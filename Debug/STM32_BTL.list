
STM32_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003458  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800358c  0800358c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800358c  0800358c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800358c  0800358c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000030  080035c4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080035c4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e374  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246e  00000000  00000000  0002e3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00030840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017caa  00000000  00000000  000320a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed37  00000000  00000000  00049d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086af6  00000000  00000000  00058a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df577  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a4  00000000  00000000  000df5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800354c 	.word	0x0800354c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800354c 	.word	0x0800354c

0800014c <fsmHorLEDsRun>:
#include "LEDs_display.h"

int horizontal_status = MODE_INIT;
int vertical_status = MODE_INIT;

void fsmHorLEDsRun() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// FSM for horizontal LEDs

	switch (horizontal_status) {
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	d847      	bhi.n	80001e8 <fsmHorLEDsRun+0x9c>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsmHorLEDsRun+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000175 	.word	0x08000175
 8000164:	080001e9 	.word	0x080001e9
 8000168:	08000189 	.word	0x08000189
 800016c:	080001a9 	.word	0x080001a9
 8000170:	080001c9 	.word	0x080001c9
		case MODE_INIT:
			horizontal_status = AUTO_RED;
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000176:	2202      	movs	r2, #2
 8000178:	601a      	str	r2, [r3, #0]
			setTimer(0, RED_time);
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <fsmHorLEDsRun+0xb4>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4619      	mov	r1, r3
 8000180:	2000      	movs	r0, #0
 8000182:	f001 f9a9 	bl	80014d8 <setTimer>
			break;
 8000186:	e036      	b.n	80001f6 <fsmHorLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(0)) {
 8000188:	2000      	movs	r0, #0
 800018a:	f001 f991 	bl	80014b0 <isTimerUp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d02b      	beq.n	80001ec <fsmHorLEDsRun+0xa0>
				horizontal_status = AUTO_GREEN;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000196:	2203      	movs	r2, #3
 8000198:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN_time);
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <fsmHorLEDsRun+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4619      	mov	r1, r3
 80001a0:	2000      	movs	r0, #0
 80001a2:	f001 f999 	bl	80014d8 <setTimer>
			}
			break;
 80001a6:	e021      	b.n	80001ec <fsmHorLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(0)) {
 80001a8:	2000      	movs	r0, #0
 80001aa:	f001 f981 	bl	80014b0 <isTimerUp>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d01d      	beq.n	80001f0 <fsmHorLEDsRun+0xa4>
				horizontal_status = AUTO_YELLOW;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	601a      	str	r2, [r3, #0]
				setTimer(0, YELLOW_time);
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <fsmHorLEDsRun+0xbc>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4619      	mov	r1, r3
 80001c0:	2000      	movs	r0, #0
 80001c2:	f001 f989 	bl	80014d8 <setTimer>
			}
			break;
 80001c6:	e013      	b.n	80001f0 <fsmHorLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(0)) {
 80001c8:	2000      	movs	r0, #0
 80001ca:	f001 f971 	bl	80014b0 <isTimerUp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00f      	beq.n	80001f4 <fsmHorLEDsRun+0xa8>
				horizontal_status = AUTO_RED;
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	601a      	str	r2, [r3, #0]
				setTimer(0, RED_time);
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fsmHorLEDsRun+0xb4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	2000      	movs	r0, #0
 80001e2:	f001 f979 	bl	80014d8 <setTimer>
			}
			break;
 80001e6:	e005      	b.n	80001f4 <fsmHorLEDsRun+0xa8>

		default:
			break;
 80001e8:	bf00      	nop
 80001ea:	e004      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001ec:	bf00      	nop
 80001ee:	e002      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f0:	bf00      	nop
 80001f2:	e000      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	20000018 	.word	0x20000018
 8000204:	2000001c 	.word	0x2000001c
 8000208:	20000020 	.word	0x20000020

0800020c <fsmVerLEDsRun>:


void fsmVerLEDsRun() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// FSM for vertical LEDs

	switch (vertical_status) {
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d847      	bhi.n	80002a8 <fsmVerLEDsRun+0x9c>
 8000218:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsmVerLEDsRun+0x14>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000235 	.word	0x08000235
 8000224:	080002a9 	.word	0x080002a9
 8000228:	08000249 	.word	0x08000249
 800022c:	08000269 	.word	0x08000269
 8000230:	08000289 	.word	0x08000289
		case MODE_INIT:
			vertical_status = AUTO_GREEN;
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000236:	2203      	movs	r2, #3
 8000238:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN_time);
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2001      	movs	r0, #1
 8000242:	f001 f949 	bl	80014d8 <setTimer>
			break;
 8000246:	e036      	b.n	80002b6 <fsmVerLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(1)) {
 8000248:	2001      	movs	r0, #1
 800024a:	f001 f931 	bl	80014b0 <isTimerUp>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d02b      	beq.n	80002ac <fsmVerLEDsRun+0xa0>
				vertical_status = AUTO_GREEN;
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000256:	2203      	movs	r2, #3
 8000258:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN_time);
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	2001      	movs	r0, #1
 8000262:	f001 f939 	bl	80014d8 <setTimer>
			}
			break;
 8000266:	e021      	b.n	80002ac <fsmVerLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(1)) {
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f921 	bl	80014b0 <isTimerUp>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <fsmVerLEDsRun+0xa4>
				vertical_status = AUTO_YELLOW;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000276:	2204      	movs	r2, #4
 8000278:	601a      	str	r2, [r3, #0]
				setTimer(1, YELLOW_time);
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <fsmVerLEDsRun+0xb8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4619      	mov	r1, r3
 8000280:	2001      	movs	r0, #1
 8000282:	f001 f929 	bl	80014d8 <setTimer>
			}
			break;
 8000286:	e013      	b.n	80002b0 <fsmVerLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(1)) {
 8000288:	2001      	movs	r0, #1
 800028a:	f001 f911 	bl	80014b0 <isTimerUp>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <fsmVerLEDsRun+0xa8>
				vertical_status = AUTO_RED;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
				setTimer(1, RED_time);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <fsmVerLEDsRun+0xbc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	2001      	movs	r0, #1
 80002a2:	f001 f919 	bl	80014d8 <setTimer>
			}
			break;
 80002a6:	e005      	b.n	80002b4 <fsmVerLEDsRun+0xa8>

		default:
			break;
 80002a8:	bf00      	nop
 80002aa:	e004      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b4:	bf00      	nop
	}
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000050 	.word	0x20000050
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	20000020 	.word	0x20000020
 80002c8:	20000018 	.word	0x20000018

080002cc <LEDsDisplay>:

void LEDsDisplay() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Display two ways LEDs

	fsmHorLEDsRun();
 80002d0:	f7ff ff3c 	bl	800014c <fsmHorLEDsRun>
	fsmVerLEDsRun();
 80002d4:	f7ff ff9a 	bl	800020c <fsmVerLEDsRun>

	switch (horizontal_status) {
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <LEDsDisplay+0xcc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d01e      	beq.n	800031e <LEDsDisplay+0x52>
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	dc28      	bgt.n	8000336 <LEDsDisplay+0x6a>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d002      	beq.n	80002ee <LEDsDisplay+0x22>
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d00c      	beq.n	8000306 <LEDsDisplay+0x3a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
			break;

		default:
			break;
 80002ec:	e023      	b.n	8000336 <LEDsDisplay+0x6a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4829      	ldr	r0, [pc, #164]	; (800039c <LEDsDisplay+0xd0>)
 80002f6:	f001 fc6e 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4828      	ldr	r0, [pc, #160]	; (80003a0 <LEDsDisplay+0xd4>)
 8000300:	f001 fc69 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000304:	e018      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4823      	ldr	r0, [pc, #140]	; (800039c <LEDsDisplay+0xd0>)
 800030e:	f001 fc62 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4822      	ldr	r0, [pc, #136]	; (80003a0 <LEDsDisplay+0xd4>)
 8000318:	f001 fc5d 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 800031c:	e00c      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <LEDsDisplay+0xd0>)
 8000326:	f001 fc56 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 800032a:	2201      	movs	r2, #1
 800032c:	2108      	movs	r1, #8
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <LEDsDisplay+0xd4>)
 8000330:	f001 fc51 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000334:	e000      	b.n	8000338 <LEDsDisplay+0x6c>
			break;
 8000336:	bf00      	nop
	}

	switch (vertical_status) {
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <LEDsDisplay+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d01c      	beq.n	800037a <LEDsDisplay+0xae>
 8000340:	2b04      	cmp	r3, #4
 8000342:	dc25      	bgt.n	8000390 <LEDsDisplay+0xc4>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d002      	beq.n	800034e <LEDsDisplay+0x82>
 8000348:	2b03      	cmp	r3, #3
 800034a:	d00b      	beq.n	8000364 <LEDsDisplay+0x98>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
			break;

		default:
			break;
 800034c:	e020      	b.n	8000390 <LEDsDisplay+0xc4>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	4813      	ldr	r0, [pc, #76]	; (80003a0 <LEDsDisplay+0xd4>)
 8000354:	f001 fc3f 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <LEDsDisplay+0xd4>)
 800035e:	f001 fc3a 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000362:	e016      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LEDsDisplay+0xd4>)
 800036a:	f001 fc34 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LEDsDisplay+0xd4>)
 8000374:	f001 fc2f 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000378:	e00b      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <LEDsDisplay+0xd4>)
 8000380:	f001 fc29 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000384:	2201      	movs	r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LEDsDisplay+0xd4>)
 800038a:	f001 fc24 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 800038e:	e000      	b.n	8000392 <LEDsDisplay+0xc6>
			break;
 8000390:	bf00      	nop
	}
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000004c 	.word	0x2000004c
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	20000050 	.word	0x20000050

080003a8 <isButtonPressed>:
int button_flag[NO_OF_BUTTON];
int button_long_flag[NO_OF_BUTTON];
GPIO_PinState key_reg[NO_OF_BUTTON][4];
int counter_for_key_pressed[NO_OF_BUTTON];

int isButtonPressed(int button) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (button_flag[button]) {
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <isButtonPressed+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d006      	beq.n	80003ca <isButtonPressed+0x22>
		button_flag[button] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <isButtonPressed+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <isButtonPressed+0x24>
	}
	else return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	200000c8 	.word	0x200000c8

080003dc <isButtonLongPressed>:

int isButtonLongPressed(int button) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if (button_long_flag[button]) {
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <isButtonLongPressed+0x30>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <isButtonLongPressed+0x22>
		button_long_flag[button] = 0;
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <isButtonLongPressed+0x30>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2100      	movs	r1, #0
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <isButtonLongPressed+0x24>
	}
	else return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	200000d8 	.word	0x200000d8

08000410 <subKeyProcess>:

void subKeyProcess(int button) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <subKeyProcess+0x1c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2101      	movs	r1, #1
 800041e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	200000c8 	.word	0x200000c8

08000430 <subKeyLongProcess>:

void subKeyLongProcess(int button) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	button_long_flag[button] = 1;
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <subKeyLongProcess+0x1c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2101      	movs	r1, #1
 800043e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	200000d8 	.word	0x200000d8

08000450 <resetKey>:

void resetKey(int button) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	button_flag[button] = 0;
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <resetKey+0x28>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_long_flag[button] = 0;
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <resetKey+0x2c>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2100      	movs	r1, #0
 8000468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000c8 	.word	0x200000c8
 800047c:	200000d8 	.word	0x200000d8

08000480 <setKeyTimer>:

void setKeyTimer(int button) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	counter_for_key_pressed[button] = timer_for_key_pressed / timer_cycle;
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <setKeyTimer+0x28>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <setKeyTimer+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	fb92 f2f3 	sdiv	r2, r2, r3
 8000494:	4906      	ldr	r1, [pc, #24]	; (80004b0 <setKeyTimer+0x30>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000014 	.word	0x20000014
 80004ac:	20000010 	.word	0x20000010
 80004b0:	200000a8 	.word	0x200000a8

080004b4 <getKeyInput>:

void getKeyInput() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e0b9      	b.n	8000634 <getKeyInput+0x180>
		key_reg[button][0] = key_reg[button][1];
 80004c0:	4a61      	ldr	r2, [pc, #388]	; (8000648 <getKeyInput+0x194>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	7859      	ldrb	r1, [r3, #1]
 80004ca:	4a5f      	ldr	r2, [pc, #380]	; (8000648 <getKeyInput+0x194>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		key_reg[button][1] = key_reg[button][2];
 80004d2:	4a5d      	ldr	r2, [pc, #372]	; (8000648 <getKeyInput+0x194>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	7899      	ldrb	r1, [r3, #2]
 80004dc:	4a5a      	ldr	r2, [pc, #360]	; (8000648 <getKeyInput+0x194>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	460a      	mov	r2, r1
 80004e6:	705a      	strb	r2, [r3, #1]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d83e      	bhi.n	800056c <getKeyInput+0xb8>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <getKeyInput+0x40>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000505 	.word	0x08000505
 80004f8:	0800051f 	.word	0x0800051f
 80004fc:	08000539 	.word	0x08000539
 8000500:	08000553 	.word	0x08000553
		switch (button) {
			case BUTTON_MODE:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000504:	2102      	movs	r1, #2
 8000506:	4851      	ldr	r0, [pc, #324]	; (800064c <getKeyInput+0x198>)
 8000508:	f001 fb4e 	bl	8001ba8 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	4619      	mov	r1, r3
 8000510:	4a4d      	ldr	r2, [pc, #308]	; (8000648 <getKeyInput+0x194>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	709a      	strb	r2, [r3, #2]
				break;
 800051c:	e027      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_SET:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 800051e:	2110      	movs	r1, #16
 8000520:	484a      	ldr	r0, [pc, #296]	; (800064c <getKeyInput+0x198>)
 8000522:	f001 fb41 	bl	8001ba8 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	4619      	mov	r1, r3
 800052a:	4a47      	ldr	r2, [pc, #284]	; (8000648 <getKeyInput+0x194>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	460a      	mov	r2, r1
 8000534:	709a      	strb	r2, [r3, #2]
				break;
 8000536:	e01a      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_INC:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_INC_GPIO_Port, BUTTON_INC_Pin);
 8000538:	2101      	movs	r1, #1
 800053a:	4845      	ldr	r0, [pc, #276]	; (8000650 <getKeyInput+0x19c>)
 800053c:	f001 fb34 	bl	8001ba8 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	4619      	mov	r1, r3
 8000544:	4a40      	ldr	r2, [pc, #256]	; (8000648 <getKeyInput+0x194>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	460a      	mov	r2, r1
 800054e:	709a      	strb	r2, [r3, #2]
				break;
 8000550:	e00d      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_PED:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_PED_GPIO_Port, BUTTON_PED_Pin);
 8000552:	2101      	movs	r1, #1
 8000554:	483d      	ldr	r0, [pc, #244]	; (800064c <getKeyInput+0x198>)
 8000556:	f001 fb27 	bl	8001ba8 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	4619      	mov	r1, r3
 800055e:	4a3a      	ldr	r2, [pc, #232]	; (8000648 <getKeyInput+0x194>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	460a      	mov	r2, r1
 8000568:	709a      	strb	r2, [r3, #2]
				break;
 800056a:	e000      	b.n	800056e <getKeyInput+0xba>
			default:
				break;
 800056c:	bf00      	nop
		}

		if ((key_reg[button][0] == key_reg[button][1]) && (key_reg[button][1] == key_reg[button][2])) {
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <getKeyInput+0x194>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000576:	4934      	ldr	r1, [pc, #208]	; (8000648 <getKeyInput+0x194>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	429a      	cmp	r2, r3
 8000582:	d154      	bne.n	800062e <getKeyInput+0x17a>
 8000584:	4a30      	ldr	r2, [pc, #192]	; (8000648 <getKeyInput+0x194>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	492e      	ldr	r1, [pc, #184]	; (8000648 <getKeyInput+0x194>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	429a      	cmp	r2, r3
 800059a:	d148      	bne.n	800062e <getKeyInput+0x17a>

			// Press button, then release
			if (key_reg[button][3] != key_reg[button][2]) {
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <getKeyInput+0x194>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	78da      	ldrb	r2, [r3, #3]
 80005a6:	4928      	ldr	r1, [pc, #160]	; (8000648 <getKeyInput+0x194>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d01c      	beq.n	80005ee <getKeyInput+0x13a>
				key_reg[button][3] = key_reg[button][2];
 80005b4:	4a24      	ldr	r2, [pc, #144]	; (8000648 <getKeyInput+0x194>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	7899      	ldrb	r1, [r3, #2]
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <getKeyInput+0x194>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	460a      	mov	r2, r1
 80005c8:	70da      	strb	r2, [r3, #3]

				if (key_reg[button][2] == PRESSED_STATE) {
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <getKeyInput+0x194>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <getKeyInput+0x132>
					subKeyProcess(button);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff19 	bl	8000410 <subKeyProcess>
					setKeyTimer(button);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff4e 	bl	8000480 <setKeyTimer>
 80005e4:	e023      	b.n	800062e <getKeyInput+0x17a>
				}
				else resetKey(button);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ff32 	bl	8000450 <resetKey>
 80005ec:	e01f      	b.n	800062e <getKeyInput+0x17a>
			}
			// Press and hold button
			else {
				counter_for_key_pressed[button]--;
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getKeyInput+0x1a0>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <getKeyInput+0x1a0>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!counter_for_key_pressed[button]) {
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <getKeyInput+0x1a0>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <getKeyInput+0x17a>
					if (key_reg[button][2] == PRESSED_STATE) {
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <getKeyInput+0x194>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <getKeyInput+0x16e>
						subKeyLongProcess(button);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff08 	bl	8000430 <subKeyLongProcess>
 8000620:	e002      	b.n	8000628 <getKeyInput+0x174>
					}
					else resetKey(button);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff14 	bl	8000450 <resetKey>
					setKeyTimer(button);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff29 	bl	8000480 <setKeyTimer>
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b03      	cmp	r3, #3
 8000638:	f77f af42 	ble.w	80004c0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000b8 	.word	0x200000b8
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	200000a8 	.word	0x200000a8

08000658 <fsmAutoModeRun>:
#include "fsm_auto_mode.h"

void fsmAutoModeRun() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// FSM for AUTO MODE

	switch (mode) {
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <fsmAutoModeRun+0x38>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <fsmAutoModeRun+0x12>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d004      	beq.n	8000672 <fsmAutoModeRun+0x1a>
			LEDsDisplay();

			break;

		default:
			break;
 8000668:	e00f      	b.n	800068a <fsmAutoModeRun+0x32>
			mode = AUTO_MODE;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <fsmAutoModeRun+0x38>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
			break;
 8000670:	e00b      	b.n	800068a <fsmAutoModeRun+0x32>
			if (isButtonPressed(BUTTON_MODE)) {
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fe98 	bl	80003a8 <isButtonPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <fsmAutoModeRun+0x2c>
				mode = MAN_MODE;
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <fsmAutoModeRun+0x38>)
 8000680:	2205      	movs	r2, #5
 8000682:	601a      	str	r2, [r3, #0]
			LEDsDisplay();
 8000684:	f7ff fe22 	bl	80002cc <LEDsDisplay>
			break;
 8000688:	bf00      	nop
	}
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000005c 	.word	0x2000005c

08000694 <fsmManualModeRun>:
#include "fsm_manual_mode.h"

void fsmManualModeRun()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	// FSM for MANUAL MODE

	switch (mode)
 8000698:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <fsmManualModeRun+0x130>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b05      	subs	r3, #5
 800069e:	2b03      	cmp	r3, #3
 80006a0:	f200 808d 	bhi.w	80007be <fsmManualModeRun+0x12a>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <fsmManualModeRun+0x18>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006c5 	.word	0x080006c5
 80006b4:	08000715 	.word	0x08000715
 80006b8:	08000765 	.word	0x08000765
	{
	case MAN_MODE:
		mode = MAN_RED;
 80006bc:	4b41      	ldr	r3, [pc, #260]	; (80007c4 <fsmManualModeRun+0x130>)
 80006be:	2206      	movs	r2, #6
 80006c0:	601a      	str	r2, [r3, #0]
		break;
 80006c2:	e07c      	b.n	80007be <fsmManualModeRun+0x12a>

	case MAN_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	483f      	ldr	r0, [pc, #252]	; (80007c8 <fsmManualModeRun+0x134>)
 80006cc:	f001 fa83 	bl	8001bd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	483d      	ldr	r0, [pc, #244]	; (80007cc <fsmManualModeRun+0x138>)
 80006d6:	f001 fa7e 	bl	8001bd6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	483b      	ldr	r0, [pc, #236]	; (80007cc <fsmManualModeRun+0x138>)
 80006e0:	f001 fa79 	bl	8001bd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2110      	movs	r1, #16
 80006e8:	4838      	ldr	r0, [pc, #224]	; (80007cc <fsmManualModeRun+0x138>)
 80006ea:	f001 fa74 	bl	8001bd6 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff fe5a 	bl	80003a8 <isButtonPressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <fsmManualModeRun+0x6c>
		{
			mode = MAN_GREEN;
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <fsmManualModeRun+0x130>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fe51 	bl	80003a8 <isButtonPressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d053      	beq.n	80007b4 <fsmManualModeRun+0x120>
		{
			mode = INC_RED;
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <fsmManualModeRun+0x130>)
 800070e:	2209      	movs	r2, #9
 8000710:	601a      	str	r2, [r3, #0]
		}
		break;
 8000712:	e04f      	b.n	80007b4 <fsmManualModeRun+0x120>

	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	482b      	ldr	r0, [pc, #172]	; (80007c8 <fsmManualModeRun+0x134>)
 800071c:	f001 fa5b 	bl	8001bd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000720:	2201      	movs	r2, #1
 8000722:	2108      	movs	r1, #8
 8000724:	4829      	ldr	r0, [pc, #164]	; (80007cc <fsmManualModeRun+0x138>)
 8000726:	f001 fa56 	bl	8001bd6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	4827      	ldr	r0, [pc, #156]	; (80007cc <fsmManualModeRun+0x138>)
 8000730:	f001 fa51 	bl	8001bd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000734:	2201      	movs	r2, #1
 8000736:	2110      	movs	r1, #16
 8000738:	4824      	ldr	r0, [pc, #144]	; (80007cc <fsmManualModeRun+0x138>)
 800073a:	f001 fa4c 	bl	8001bd6 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fe32 	bl	80003a8 <isButtonPressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <fsmManualModeRun+0xbc>
		{
			mode = MAN_YELLOW;
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <fsmManualModeRun+0x130>)
 800074c:	2208      	movs	r2, #8
 800074e:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fe29 	bl	80003a8 <isButtonPressed>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02d      	beq.n	80007b8 <fsmManualModeRun+0x124>
		{
			mode = INC_GREEN;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <fsmManualModeRun+0x130>)
 800075e:	220a      	movs	r2, #10
 8000760:	601a      	str	r2, [r3, #0]
		}
		break;
 8000762:	e029      	b.n	80007b8 <fsmManualModeRun+0x124>

	case MAN_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076a:	4817      	ldr	r0, [pc, #92]	; (80007c8 <fsmManualModeRun+0x134>)
 800076c:	f001 fa33 	bl	8001bd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	4815      	ldr	r0, [pc, #84]	; (80007cc <fsmManualModeRun+0x138>)
 8000776:	f001 fa2e 	bl	8001bd6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800077a:	2201      	movs	r2, #1
 800077c:	2120      	movs	r1, #32
 800077e:	4813      	ldr	r0, [pc, #76]	; (80007cc <fsmManualModeRun+0x138>)
 8000780:	f001 fa29 	bl	8001bd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000784:	2201      	movs	r2, #1
 8000786:	2110      	movs	r1, #16
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <fsmManualModeRun+0x138>)
 800078a:	f001 fa24 	bl	8001bd6 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fe0a 	bl	80003a8 <isButtonPressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <fsmManualModeRun+0x10c>
		{
			mode = MAN_RED;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <fsmManualModeRun+0x130>)
 800079c:	2206      	movs	r2, #6
 800079e:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fe01 	bl	80003a8 <isButtonPressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d007      	beq.n	80007bc <fsmManualModeRun+0x128>
		{
			mode = INC_YELLOW;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <fsmManualModeRun+0x130>)
 80007ae:	220b      	movs	r2, #11
 80007b0:	601a      	str	r2, [r3, #0]
		}
		break;
 80007b2:	e003      	b.n	80007bc <fsmManualModeRun+0x128>
		break;
 80007b4:	bf00      	nop
 80007b6:	e002      	b.n	80007be <fsmManualModeRun+0x12a>
		break;
 80007b8:	bf00      	nop
 80007ba:	e000      	b.n	80007be <fsmManualModeRun+0x12a>
		break;
 80007bc:	bf00      	nop
	}
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000005c 	.word	0x2000005c
 80007c8:	40010800 	.word	0x40010800
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <fsmVerPedRun>:
int hor_ped = PED_OFF;
int buzzer_time = BUZZER_time;
int pul = BUZZER_pul;
int state = 0;

void fsmVerPedRun(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	switch(ver_ped){
 80007d4:	4b52      	ldr	r3, [pc, #328]	; (8000920 <fsmVerPedRun+0x150>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3b0c      	subs	r3, #12
 80007da:	2b04      	cmp	r3, #4
 80007dc:	f200 8093 	bhi.w	8000906 <fsmVerPedRun+0x136>
 80007e0:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <fsmVerPedRun+0x18>)
 80007e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e6:	bf00      	nop
 80007e8:	080007fd 	.word	0x080007fd
 80007ec:	0800082d 	.word	0x0800082d
 80007f0:	0800086b 	.word	0x0800086b
 80007f4:	080008a1 	.word	0x080008a1
 80007f8:	080008df 	.word	0x080008df
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 80007fc:	4b49      	ldr	r3, [pc, #292]	; (8000924 <fsmVerPedRun+0x154>)
 80007fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000802:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 8000804:	4b48      	ldr	r3, [pc, #288]	; (8000928 <fsmVerPedRun+0x158>)
 8000806:	f240 2226 	movw	r2, #550	; 0x226
 800080a:	601a      	str	r2, [r3, #0]
			state = 1;
 800080c:	4b47      	ldr	r3, [pc, #284]	; (800092c <fsmVerPedRun+0x15c>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff fdc8 	bl	80003a8 <isButtonPressed>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d075      	beq.n	800090a <fsmVerPedRun+0x13a>
				ver_ped = PED_ON;
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <fsmVerPedRun+0x150>)
 8000820:	220d      	movs	r2, #13
 8000822:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 8000824:	4b42      	ldr	r3, [pc, #264]	; (8000930 <fsmVerPedRun+0x160>)
 8000826:	220d      	movs	r2, #13
 8000828:	601a      	str	r2, [r3, #0]
			}
			break;
 800082a:	e06e      	b.n	800090a <fsmVerPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 800082c:	2003      	movs	r0, #3
 800082e:	f7ff fdbb 	bl	80003a8 <isButtonPressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <fsmVerPedRun+0x74>
				ver_ped = PED_OFF;
 8000838:	4b39      	ldr	r3, [pc, #228]	; (8000920 <fsmVerPedRun+0x150>)
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <fsmVerPedRun+0x160>)
 8000840:	220c      	movs	r2, #12
 8000842:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 8000844:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <fsmVerPedRun+0x164>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d102      	bne.n	8000852 <fsmVerPedRun+0x82>
				ver_ped = WALK_ALLOW;
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <fsmVerPedRun+0x150>)
 800084e:	220e      	movs	r2, #14
 8000850:	601a      	str	r2, [r3, #0]
			}
			if((vertical_status == AUTO_GREEN) || (vertical_status == AUTO_YELLOW)){
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <fsmVerPedRun+0x164>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d003      	beq.n	8000862 <fsmVerPedRun+0x92>
 800085a:	4b36      	ldr	r3, [pc, #216]	; (8000934 <fsmVerPedRun+0x164>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b04      	cmp	r3, #4
 8000860:	d155      	bne.n	800090e <fsmVerPedRun+0x13e>
				ver_ped = WALK_STOP;
 8000862:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <fsmVerPedRun+0x150>)
 8000864:	2210      	movs	r2, #16
 8000866:	601a      	str	r2, [r3, #0]
			}
			break;
 8000868:	e051      	b.n	800090e <fsmVerPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 800086a:	2003      	movs	r0, #3
 800086c:	f7ff fd9c 	bl	80003a8 <isButtonPressed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d005      	beq.n	8000882 <fsmVerPedRun+0xb2>
				ver_ped = PED_OFF;
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <fsmVerPedRun+0x150>)
 8000878:	220c      	movs	r2, #12
 800087a:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <fsmVerPedRun+0x160>)
 800087e:	220c      	movs	r2, #12
 8000880:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(1) <= 300){
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fe04 	bl	8001490 <currentCounter>
 8000888:	4603      	mov	r3, r0
 800088a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800088e:	dc40      	bgt.n	8000912 <fsmVerPedRun+0x142>
				ver_ped = BUZZER_ON;
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <fsmVerPedRun+0x150>)
 8000892:	220f      	movs	r2, #15
 8000894:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 8000896:	2164      	movs	r1, #100	; 0x64
 8000898:	2002      	movs	r0, #2
 800089a:	f000 fe1d 	bl	80014d8 <setTimer>
			}
			break;
 800089e:	e038      	b.n	8000912 <fsmVerPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 80008a0:	2003      	movs	r0, #3
 80008a2:	f7ff fd81 	bl	80003a8 <isButtonPressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d005      	beq.n	80008b8 <fsmVerPedRun+0xe8>
				ver_ped = PED_OFF;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <fsmVerPedRun+0x150>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <fsmVerPedRun+0x160>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_GREEN){
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <fsmVerPedRun+0x164>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d12a      	bne.n	8000916 <fsmVerPedRun+0x146>
				ver_ped = WALK_STOP;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <fsmVerPedRun+0x150>)
 80008c2:	2210      	movs	r2, #16
 80008c4:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <fsmVerPedRun+0x154>)
 80008c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008cc:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <fsmVerPedRun+0x158>)
 80008d0:	f240 2226 	movw	r2, #550	; 0x226
 80008d4:	601a      	str	r2, [r3, #0]
				state = 0;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <fsmVerPedRun+0x15c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			}
			break;
 80008dc:	e01b      	b.n	8000916 <fsmVerPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 80008de:	2003      	movs	r0, #3
 80008e0:	f7ff fd62 	bl	80003a8 <isButtonPressed>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <fsmVerPedRun+0x126>
				ver_ped = PED_OFF;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <fsmVerPedRun+0x150>)
 80008ec:	220c      	movs	r2, #12
 80008ee:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <fsmVerPedRun+0x160>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <fsmVerPedRun+0x164>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d10d      	bne.n	800091a <fsmVerPedRun+0x14a>
				ver_ped = WALK_ALLOW;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <fsmVerPedRun+0x150>)
 8000900:	220e      	movs	r2, #14
 8000902:	601a      	str	r2, [r3, #0]
			}
			break;
 8000904:	e009      	b.n	800091a <fsmVerPedRun+0x14a>
		default:
			break;
 8000906:	bf00      	nop
 8000908:	e008      	b.n	800091c <fsmVerPedRun+0x14c>
			break;
 800090a:	bf00      	nop
 800090c:	e006      	b.n	800091c <fsmVerPedRun+0x14c>
			break;
 800090e:	bf00      	nop
 8000910:	e004      	b.n	800091c <fsmVerPedRun+0x14c>
			break;
 8000912:	bf00      	nop
 8000914:	e002      	b.n	800091c <fsmVerPedRun+0x14c>
			break;
 8000916:	bf00      	nop
 8000918:	e000      	b.n	800091c <fsmVerPedRun+0x14c>
			break;
 800091a:	bf00      	nop
	}
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000054 	.word	0x20000054
 8000930:	20000004 	.word	0x20000004
 8000934:	20000050 	.word	0x20000050

08000938 <fsmHorPedRun>:

void fsmHorPedRun(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	switch(hor_ped){
 800093c:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <fsmHorPedRun+0x150>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b0c      	subs	r3, #12
 8000942:	2b04      	cmp	r3, #4
 8000944:	f200 8093 	bhi.w	8000a6e <fsmHorPedRun+0x136>
 8000948:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <fsmHorPedRun+0x18>)
 800094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094e:	bf00      	nop
 8000950:	08000965 	.word	0x08000965
 8000954:	08000995 	.word	0x08000995
 8000958:	080009d3 	.word	0x080009d3
 800095c:	08000a09 	.word	0x08000a09
 8000960:	08000a47 	.word	0x08000a47
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 8000964:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <fsmHorPedRun+0x154>)
 8000966:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800096a:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 800096c:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <fsmHorPedRun+0x158>)
 800096e:	f240 2226 	movw	r2, #550	; 0x226
 8000972:	601a      	str	r2, [r3, #0]
			state = 1;
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <fsmHorPedRun+0x15c>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 800097a:	2003      	movs	r0, #3
 800097c:	f7ff fd14 	bl	80003a8 <isButtonPressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d075      	beq.n	8000a72 <fsmHorPedRun+0x13a>
				ver_ped = PED_ON;
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <fsmHorPedRun+0x160>)
 8000988:	220d      	movs	r2, #13
 800098a:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 800098c:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <fsmHorPedRun+0x150>)
 800098e:	220d      	movs	r2, #13
 8000990:	601a      	str	r2, [r3, #0]
			}
			break;
 8000992:	e06e      	b.n	8000a72 <fsmHorPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000994:	2003      	movs	r0, #3
 8000996:	f7ff fd07 	bl	80003a8 <isButtonPressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <fsmHorPedRun+0x74>
				ver_ped = PED_OFF;
 80009a0:	4b3d      	ldr	r3, [pc, #244]	; (8000a98 <fsmHorPedRun+0x160>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80009a6:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <fsmHorPedRun+0x150>)
 80009a8:	220c      	movs	r2, #12
 80009aa:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <fsmHorPedRun+0x164>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d102      	bne.n	80009ba <fsmHorPedRun+0x82>
				hor_ped = WALK_ALLOW;
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <fsmHorPedRun+0x150>)
 80009b6:	220e      	movs	r2, #14
 80009b8:	601a      	str	r2, [r3, #0]
			}
			if((horizontal_status == AUTO_GREEN) || (horizontal_status == AUTO_YELLOW)){
 80009ba:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <fsmHorPedRun+0x164>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d003      	beq.n	80009ca <fsmHorPedRun+0x92>
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <fsmHorPedRun+0x164>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d155      	bne.n	8000a76 <fsmHorPedRun+0x13e>
				hor_ped = WALK_STOP;
 80009ca:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <fsmHorPedRun+0x150>)
 80009cc:	2210      	movs	r2, #16
 80009ce:	601a      	str	r2, [r3, #0]
			}
			break;
 80009d0:	e051      	b.n	8000a76 <fsmHorPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 80009d2:	2003      	movs	r0, #3
 80009d4:	f7ff fce8 	bl	80003a8 <isButtonPressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d005      	beq.n	80009ea <fsmHorPedRun+0xb2>
				ver_ped = PED_OFF;
 80009de:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <fsmHorPedRun+0x160>)
 80009e0:	220c      	movs	r2, #12
 80009e2:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <fsmHorPedRun+0x150>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(0) <= 300){
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 fd50 	bl	8001490 <currentCounter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009f6:	dc40      	bgt.n	8000a7a <fsmHorPedRun+0x142>
				hor_ped = BUZZER_ON;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <fsmHorPedRun+0x150>)
 80009fa:	220f      	movs	r2, #15
 80009fc:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 80009fe:	2164      	movs	r1, #100	; 0x64
 8000a00:	2002      	movs	r0, #2
 8000a02:	f000 fd69 	bl	80014d8 <setTimer>
			}
			break;
 8000a06:	e038      	b.n	8000a7a <fsmHorPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f7ff fccd 	bl	80003a8 <isButtonPressed>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d005      	beq.n	8000a20 <fsmHorPedRun+0xe8>
				ver_ped = PED_OFF;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <fsmHorPedRun+0x160>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <fsmHorPedRun+0x150>)
 8000a1c:	220c      	movs	r2, #12
 8000a1e:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_GREEN){
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <fsmHorPedRun+0x164>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d12a      	bne.n	8000a7e <fsmHorPedRun+0x146>
				hor_ped = WALK_STOP;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <fsmHorPedRun+0x150>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <fsmHorPedRun+0x154>)
 8000a30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a34:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <fsmHorPedRun+0x158>)
 8000a38:	f240 2226 	movw	r2, #550	; 0x226
 8000a3c:	601a      	str	r2, [r3, #0]
				state = 0;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <fsmHorPedRun+0x15c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a44:	e01b      	b.n	8000a7e <fsmHorPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 8000a46:	2003      	movs	r0, #3
 8000a48:	f7ff fcae 	bl	80003a8 <isButtonPressed>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d005      	beq.n	8000a5e <fsmHorPedRun+0x126>
				ver_ped = PED_OFF;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <fsmHorPedRun+0x160>)
 8000a54:	220c      	movs	r2, #12
 8000a56:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <fsmHorPedRun+0x150>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <fsmHorPedRun+0x164>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d10d      	bne.n	8000a82 <fsmHorPedRun+0x14a>
				hor_ped = WALK_ALLOW;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <fsmHorPedRun+0x150>)
 8000a68:	220e      	movs	r2, #14
 8000a6a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a6c:	e009      	b.n	8000a82 <fsmHorPedRun+0x14a>
		default:
			break;
 8000a6e:	bf00      	nop
 8000a70:	e008      	b.n	8000a84 <fsmHorPedRun+0x14c>
			break;
 8000a72:	bf00      	nop
 8000a74:	e006      	b.n	8000a84 <fsmHorPedRun+0x14c>
			break;
 8000a76:	bf00      	nop
 8000a78:	e004      	b.n	8000a84 <fsmHorPedRun+0x14c>
			break;
 8000a7a:	bf00      	nop
 8000a7c:	e002      	b.n	8000a84 <fsmHorPedRun+0x14c>
			break;
 8000a7e:	bf00      	nop
 8000a80:	e000      	b.n	8000a84 <fsmHorPedRun+0x14c>
			break;
 8000a82:	bf00      	nop
	}
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	2000000c 	.word	0x2000000c
 8000a94:	20000054 	.word	0x20000054
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	2000004c 	.word	0x2000004c

08000aa0 <fsmPedestrianModeRun>:

void fsmPedestrianModeRun() {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	fsmVerPedRun();
 8000aa4:	f7ff fe94 	bl	80007d0 <fsmVerPedRun>
	fsmHorPedRun();
 8000aa8:	f7ff ff46 	bl	8000938 <fsmHorPedRun>

	switch(ver_ped){
 8000aac:	4b9a      	ldr	r3, [pc, #616]	; (8000d18 <fsmPedestrianModeRun+0x278>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3b0c      	subs	r3, #12
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	f200 8090 	bhi.w	8000bd8 <fsmPedestrianModeRun+0x138>
 8000ab8:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <fsmPedestrianModeRun+0x20>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000bd9 	.word	0x08000bd9
 8000ac8:	08000aed 	.word	0x08000aed
 8000acc:	08000b05 	.word	0x08000b05
 8000ad0:	08000bc1 	.word	0x08000bc1
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4890      	ldr	r0, [pc, #576]	; (8000d1c <fsmPedestrianModeRun+0x27c>)
 8000ada:	f001 f87c 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	488e      	ldr	r0, [pc, #568]	; (8000d20 <fsmPedestrianModeRun+0x280>)
 8000ae6:	f001 f876 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000aea:	e078      	b.n	8000bde <fsmPedestrianModeRun+0x13e>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2104      	movs	r1, #4
 8000af0:	488a      	ldr	r0, [pc, #552]	; (8000d1c <fsmPedestrianModeRun+0x27c>)
 8000af2:	f001 f870 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_ON);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	4888      	ldr	r0, [pc, #544]	; (8000d20 <fsmPedestrianModeRun+0x280>)
 8000afe:	f001 f86a 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000b02:	e06c      	b.n	8000bde <fsmPedestrianModeRun+0x13e>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 fcd3 	bl	80014b0 <isTimerUp>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d028      	beq.n	8000b62 <fsmPedestrianModeRun+0xc2>
 8000b10:	4b84      	ldr	r3, [pc, #528]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d124      	bne.n	8000b62 <fsmPedestrianModeRun+0xc2>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, pul);
 8000b18:	4b83      	ldr	r3, [pc, #524]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b83      	ldr	r3, [pc, #524]	; (8000d2c <fsmPedestrianModeRun+0x28c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000b22:	4b83      	ldr	r3, [pc, #524]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f000 fcd5 	bl	80014d8 <setTimer>
				state = 1 - state;
 8000b2e:	4b7d      	ldr	r3, [pc, #500]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f1c3 0301 	rsb	r3, r3, #1
 8000b36:	4a7b      	ldr	r2, [pc, #492]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000b38:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000b3a:	4b7b      	ldr	r3, [pc, #492]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000b42:	4293      	cmp	r3, r2
 8000b44:	dc04      	bgt.n	8000b50 <fsmPedestrianModeRun+0xb0>
 8000b46:	4b78      	ldr	r3, [pc, #480]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3364      	adds	r3, #100	; 0x64
 8000b4c:	4a76      	ldr	r2, [pc, #472]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000b4e:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000b50:	4b77      	ldr	r3, [pc, #476]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b64      	cmp	r3, #100	; 0x64
 8000b56:	dd04      	ble.n	8000b62 <fsmPedestrianModeRun+0xc2>
 8000b58:	4b75      	ldr	r3, [pc, #468]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3b64      	subs	r3, #100	; 0x64
 8000b5e:	4a74      	ldr	r2, [pc, #464]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000b60:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000b62:	2002      	movs	r0, #2
 8000b64:	f000 fca4 	bl	80014b0 <isTimerUp>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d036      	beq.n	8000bdc <fsmPedestrianModeRun+0x13c>
 8000b6e:	4b6d      	ldr	r3, [pc, #436]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d132      	bne.n	8000bdc <fsmPedestrianModeRun+0x13c>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, 0);
 8000b76:	4b6d      	ldr	r3, [pc, #436]	; (8000d2c <fsmPedestrianModeRun+0x28c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000b7e:	4b6c      	ldr	r3, [pc, #432]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	2002      	movs	r0, #2
 8000b86:	f000 fca7 	bl	80014d8 <setTimer>
				state = 1 - state;
 8000b8a:	4b66      	ldr	r3, [pc, #408]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f1c3 0301 	rsb	r3, r3, #1
 8000b92:	4a64      	ldr	r2, [pc, #400]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000b94:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000b96:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	dc04      	bgt.n	8000bac <fsmPedestrianModeRun+0x10c>
 8000ba2:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3364      	adds	r3, #100	; 0x64
 8000ba8:	4a5f      	ldr	r2, [pc, #380]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000baa:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000bac:	4b60      	ldr	r3, [pc, #384]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b64      	cmp	r3, #100	; 0x64
 8000bb2:	dd13      	ble.n	8000bdc <fsmPedestrianModeRun+0x13c>
 8000bb4:	4b5e      	ldr	r3, [pc, #376]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b64      	subs	r3, #100	; 0x64
 8000bba:	4a5d      	ldr	r2, [pc, #372]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000bbc:	6013      	str	r3, [r2, #0]
			}
			break;
 8000bbe:	e00d      	b.n	8000bdc <fsmPedestrianModeRun+0x13c>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_ON);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4855      	ldr	r0, [pc, #340]	; (8000d1c <fsmPedestrianModeRun+0x27c>)
 8000bc6:	f001 f806 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd0:	4853      	ldr	r0, [pc, #332]	; (8000d20 <fsmPedestrianModeRun+0x280>)
 8000bd2:	f001 f800 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000bd6:	e002      	b.n	8000bde <fsmPedestrianModeRun+0x13e>
		default:
			break;
 8000bd8:	bf00      	nop
 8000bda:	e000      	b.n	8000bde <fsmPedestrianModeRun+0x13e>
			break;
 8000bdc:	bf00      	nop
	}

	switch(hor_ped){
 8000bde:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <fsmPedestrianModeRun+0x294>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3b0c      	subs	r3, #12
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	f200 8092 	bhi.w	8000d0e <fsmPedestrianModeRun+0x26e>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <fsmPedestrianModeRun+0x150>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c05 	.word	0x08000c05
 8000bf4:	08000d0f 	.word	0x08000d0f
 8000bf8:	08000c1f 	.word	0x08000c1f
 8000bfc:	08000c39 	.word	0x08000c39
 8000c00:	08000cf5 	.word	0x08000cf5
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4844      	ldr	r0, [pc, #272]	; (8000d1c <fsmPedestrianModeRun+0x27c>)
 8000c0c:	f000 ffe3 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c16:	4848      	ldr	r0, [pc, #288]	; (8000d38 <fsmPedestrianModeRun+0x298>)
 8000c18:	f000 ffdd 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000c1c:	e07a      	b.n	8000d14 <fsmPedestrianModeRun+0x274>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	483d      	ldr	r0, [pc, #244]	; (8000d1c <fsmPedestrianModeRun+0x27c>)
 8000c26:	f000 ffd6 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_ON);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c30:	4841      	ldr	r0, [pc, #260]	; (8000d38 <fsmPedestrianModeRun+0x298>)
 8000c32:	f000 ffd0 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000c36:	e06d      	b.n	8000d14 <fsmPedestrianModeRun+0x274>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f000 fc39 	bl	80014b0 <isTimerUp>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d028      	beq.n	8000c96 <fsmPedestrianModeRun+0x1f6>
 8000c44:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d124      	bne.n	8000c96 <fsmPedestrianModeRun+0x1f6>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, pul);
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <fsmPedestrianModeRun+0x28c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f000 fc3b 	bl	80014d8 <setTimer>
				state = 1 - state;
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f1c3 0301 	rsb	r3, r3, #1
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000c6c:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dc04      	bgt.n	8000c84 <fsmPedestrianModeRun+0x1e4>
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3364      	adds	r3, #100	; 0x64
 8000c80:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000c82:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b64      	cmp	r3, #100	; 0x64
 8000c8a:	dd04      	ble.n	8000c96 <fsmPedestrianModeRun+0x1f6>
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3b64      	subs	r3, #100	; 0x64
 8000c92:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000c94:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000c96:	2002      	movs	r0, #2
 8000c98:	f000 fc0a 	bl	80014b0 <isTimerUp>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d037      	beq.n	8000d12 <fsmPedestrianModeRun+0x272>
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d133      	bne.n	8000d12 <fsmPedestrianModeRun+0x272>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <fsmPedestrianModeRun+0x28c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f000 fc0d 	bl	80014d8 <setTimer>
				state = 1 - state;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f1c3 0301 	rsb	r3, r3, #1
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <fsmPedestrianModeRun+0x284>)
 8000cc8:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	dc04      	bgt.n	8000ce0 <fsmPedestrianModeRun+0x240>
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3364      	adds	r3, #100	; 0x64
 8000cdc:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <fsmPedestrianModeRun+0x288>)
 8000cde:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b64      	cmp	r3, #100	; 0x64
 8000ce6:	dd14      	ble.n	8000d12 <fsmPedestrianModeRun+0x272>
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3b64      	subs	r3, #100	; 0x64
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <fsmPedestrianModeRun+0x290>)
 8000cf0:	6013      	str	r3, [r2, #0]
			}
			break;
 8000cf2:	e00e      	b.n	8000d12 <fsmPedestrianModeRun+0x272>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_ON);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfa:	4808      	ldr	r0, [pc, #32]	; (8000d1c <fsmPedestrianModeRun+0x27c>)
 8000cfc:	f000 ff6b 	bl	8001bd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <fsmPedestrianModeRun+0x298>)
 8000d08:	f000 ff65 	bl	8001bd6 <HAL_GPIO_WritePin>
			break;
 8000d0c:	e002      	b.n	8000d14 <fsmPedestrianModeRun+0x274>
		default:
			break;
 8000d0e:	bf00      	nop
 8000d10:	e000      	b.n	8000d14 <fsmPedestrianModeRun+0x274>
			break;
 8000d12:	bf00      	nop
	}


}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40011000 	.word	0x40011000
 8000d24:	20000054 	.word	0x20000054
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	20000060 	.word	0x20000060
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004
 8000d38:	40010800 	.word	0x40010800

08000d3c <fsmTuningModeRun>:
#include "fsm_tuning_mode.h"

int time_count = 0;

void fsmTuningModeRun() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	// FSM for TUNING MODE

	switch (mode) {
 8000d40:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <fsmTuningModeRun+0x17c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b0b      	cmp	r3, #11
 8000d46:	d077      	beq.n	8000e38 <fsmTuningModeRun+0xfc>
 8000d48:	2b0b      	cmp	r3, #11
 8000d4a:	f300 80ac 	bgt.w	8000ea6 <fsmTuningModeRun+0x16a>
 8000d4e:	2b09      	cmp	r3, #9
 8000d50:	d002      	beq.n	8000d58 <fsmTuningModeRun+0x1c>
 8000d52:	2b0a      	cmp	r3, #10
 8000d54:	d038      	beq.n	8000dc8 <fsmTuningModeRun+0x8c>
			}

			break;

		default:
			break;
 8000d56:	e0a6      	b.n	8000ea6 <fsmTuningModeRun+0x16a>
			if (isButtonPressed(BUTTON_MODE)) {
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fb25 	bl	80003a8 <isButtonPressed>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <fsmTuningModeRun+0x2e>
				mode = AUTO_MODE;
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <fsmTuningModeRun+0x17c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fb1c 	bl	80003a8 <isButtonPressed>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <fsmTuningModeRun+0x4a>
				RED_time = time_count * 1000;
 8000d76:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <fsmTuningModeRun+0x184>)
 8000d84:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000d86:	2002      	movs	r0, #2
 8000d88:	f7ff fb0e 	bl	80003a8 <isButtonPressed>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d106      	bne.n	8000da0 <fsmTuningModeRun+0x64>
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fb22 	bl	80003dc <isButtonLongPressed>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8085 	beq.w	8000eaa <fsmTuningModeRun+0x16e>
				time_count %= 100;
 8000da0:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <fsmTuningModeRun+0x188>)
 8000da6:	fb83 1302 	smull	r1, r3, r3, r2
 8000daa:	1159      	asrs	r1, r3, #5
 8000dac:	17d3      	asrs	r3, r2, #31
 8000dae:	1acb      	subs	r3, r1, r3
 8000db0:	2164      	movs	r1, #100	; 0x64
 8000db2:	fb01 f303 	mul.w	r3, r1, r3
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	4a40      	ldr	r2, [pc, #256]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000dba:	6013      	str	r3, [r2, #0]
				time_count++;
 8000dbc:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000dc4:	6013      	str	r3, [r2, #0]
			break;
 8000dc6:	e070      	b.n	8000eaa <fsmTuningModeRun+0x16e>
			if (isButtonPressed(BUTTON_MODE)) {
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff faed 	bl	80003a8 <isButtonPressed>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <fsmTuningModeRun+0x9e>
				mode = AUTO_MODE;
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <fsmTuningModeRun+0x17c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fae4 	bl	80003a8 <isButtonPressed>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <fsmTuningModeRun+0xba>
				GREEN_time = time_count * 1000;
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	4a35      	ldr	r2, [pc, #212]	; (8000ec8 <fsmTuningModeRun+0x18c>)
 8000df4:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff fad6 	bl	80003a8 <isButtonPressed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <fsmTuningModeRun+0xd2>
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff faea 	bl	80003dc <isButtonLongPressed>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d04f      	beq.n	8000eae <fsmTuningModeRun+0x172>
				time_count %= 90;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <fsmTuningModeRun+0x190>)
 8000e14:	fb82 1203 	smull	r1, r2, r2, r3
 8000e18:	441a      	add	r2, r3
 8000e1a:	1191      	asrs	r1, r2, #6
 8000e1c:	17da      	asrs	r2, r3, #31
 8000e1e:	1a8a      	subs	r2, r1, r2
 8000e20:	215a      	movs	r1, #90	; 0x5a
 8000e22:	fb01 f202 	mul.w	r2, r1, r2
 8000e26:	1a9a      	subs	r2, r3, r2
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e2a:	601a      	str	r2, [r3, #0]
				time_count++;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e34:	6013      	str	r3, [r2, #0]
			break;
 8000e36:	e03a      	b.n	8000eae <fsmTuningModeRun+0x172>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fab5 	bl	80003a8 <isButtonPressed>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <fsmTuningModeRun+0x10e>
				mode = AUTO_MODE;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <fsmTuningModeRun+0x17c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff faac 	bl	80003a8 <isButtonPressed>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <fsmTuningModeRun+0x12a>
				YELLOW_time = time_count * 1000;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <fsmTuningModeRun+0x194>)
 8000e64:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000e66:	2002      	movs	r0, #2
 8000e68:	f7ff fa9e 	bl	80003a8 <isButtonPressed>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <fsmTuningModeRun+0x142>
 8000e72:	2002      	movs	r0, #2
 8000e74:	f7ff fab2 	bl	80003dc <isButtonLongPressed>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d019      	beq.n	8000eb2 <fsmTuningModeRun+0x176>
				time_count %= 100;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <fsmTuningModeRun+0x188>)
 8000e84:	fb83 1302 	smull	r1, r3, r3, r2
 8000e88:	1159      	asrs	r1, r3, #5
 8000e8a:	17d3      	asrs	r3, r2, #31
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	2164      	movs	r1, #100	; 0x64
 8000e90:	fb01 f303 	mul.w	r3, r1, r3
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e98:	6013      	str	r3, [r2, #0]
				time_count++;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <fsmTuningModeRun+0x180>)
 8000ea2:	6013      	str	r3, [r2, #0]
			break;
 8000ea4:	e005      	b.n	8000eb2 <fsmTuningModeRun+0x176>
			break;
 8000ea6:	bf00      	nop
 8000ea8:	e004      	b.n	8000eb4 <fsmTuningModeRun+0x178>
			break;
 8000eaa:	bf00      	nop
 8000eac:	e002      	b.n	8000eb4 <fsmTuningModeRun+0x178>
			break;
 8000eae:	bf00      	nop
 8000eb0:	e000      	b.n	8000eb4 <fsmTuningModeRun+0x178>
			break;
 8000eb2:	bf00      	nop
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000005c 	.word	0x2000005c
 8000ebc:	20000058 	.word	0x20000058
 8000ec0:	20000018 	.word	0x20000018
 8000ec4:	51eb851f 	.word	0x51eb851f
 8000ec8:	2000001c 	.word	0x2000001c
 8000ecc:	b60b60b7 	.word	0xb60b60b7
 8000ed0:	20000020 	.word	0x20000020

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fb72 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f81c 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 f908 	bl	80010f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee4:	f000 f8dc 	bl	80010a0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ee8:	f000 f858 	bl	8000f9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <main+0x40>)
 8000eee:	f001 fb17 	bl	8002520 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <main+0x40>)
 8000ef6:	f001 fbbd 	bl	8002674 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000efa:	2104      	movs	r1, #4
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <main+0x40>)
 8000efe:	f001 fbb9 	bl	8002674 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsmAutoModeRun();
 8000f02:	f7ff fba9 	bl	8000658 <fsmAutoModeRun>
	  fsmManualModeRun();
 8000f06:	f7ff fbc5 	bl	8000694 <fsmManualModeRun>
	  fsmTuningModeRun();
 8000f0a:	f7ff ff17 	bl	8000d3c <fsmTuningModeRun>
	  fsmPedestrianModeRun();
 8000f0e:	f7ff fdc7 	bl	8000aa0 <fsmPedestrianModeRun>
	  fsmAutoModeRun();
 8000f12:	e7f6      	b.n	8000f02 <main+0x2e>
 8000f14:	20000060 	.word	0x20000060

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b090      	sub	sp, #64	; 0x40
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fb08 	bl	800353c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	2310      	movs	r3, #16
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f4e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fe77 	bl	8001c4c <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f64:	f000 f986 	bl	8001274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2102      	movs	r1, #2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 f8e2 	bl	800214c <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f8e:	f000 f971 	bl	8001274 <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3740      	adds	r7, #64	; 0x40
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <MX_TIM3_Init+0xfc>)
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <MX_TIM3_Init+0x100>)
 8000fd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <MX_TIM3_Init+0xfc>)
 8000fd4:	223f      	movs	r2, #63	; 0x3f
 8000fd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <MX_TIM3_Init+0xfc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_TIM3_Init+0xfc>)
 8000fe0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_TIM3_Init+0xfc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <MX_TIM3_Init+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ff2:	4829      	ldr	r0, [pc, #164]	; (8001098 <MX_TIM3_Init+0xfc>)
 8000ff4:	f001 fa44 	bl	8002480 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ffe:	f000 f939 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100c:	4619      	mov	r1, r3
 800100e:	4822      	ldr	r0, [pc, #136]	; (8001098 <MX_TIM3_Init+0xfc>)
 8001010:	f001 fd98 	bl	8002b44 <HAL_TIM_ConfigClockSource>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800101a:	f000 f92b 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800101e:	481e      	ldr	r0, [pc, #120]	; (8001098 <MX_TIM3_Init+0xfc>)
 8001020:	f001 fad0 	bl	80025c4 <HAL_TIM_PWM_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800102a:	f000 f923 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4619      	mov	r1, r3
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <MX_TIM3_Init+0xfc>)
 800103e:	f002 f90d 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001048:	f000 f914 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104c:	2360      	movs	r3, #96	; 0x60
 800104e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_TIM3_Init+0xfc>)
 8001064:	f001 fcb0 	bl	80029c8 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800106e:	f000 f901 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2204      	movs	r2, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM3_Init+0xfc>)
 800107a:	f001 fca5 	bl	80029c8 <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001084:	f000 f8f6 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM3_Init+0xfc>)
 800108a:	f000 f951 	bl	8001330 <HAL_TIM_MspPostInit>

}
 800108e:	bf00      	nop
 8001090:	3738      	adds	r7, #56	; 0x38
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000060 	.word	0x20000060
 800109c:	40000400 	.word	0x40000400

080010a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_USART2_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d8:	f002 f930 	bl	800333c <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010e2:	f000 f8c7 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000e8 	.word	0x200000e8
 80010f0:	40004400 	.word	0x40004400

080010f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <MX_GPIO_Init+0x154>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <MX_GPIO_Init+0x154>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <MX_GPIO_Init+0x154>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b49      	ldr	r3, [pc, #292]	; (8001248 <MX_GPIO_Init+0x154>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <MX_GPIO_Init+0x154>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b46      	ldr	r3, [pc, #280]	; (8001248 <MX_GPIO_Init+0x154>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <MX_GPIO_Init+0x154>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a42      	ldr	r2, [pc, #264]	; (8001248 <MX_GPIO_Init+0x154>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b40      	ldr	r3, [pc, #256]	; (8001248 <MX_GPIO_Init+0x154>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <MX_GPIO_Init+0x154>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a3c      	ldr	r2, [pc, #240]	; (8001248 <MX_GPIO_Init+0x154>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <MX_GPIO_Init+0x154>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_GREEN_P1_Pin|LED_RED_1_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <MX_GPIO_Init+0x158>)
 8001170:	f000 fd31 	bl	8001bd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 8001174:	2200      	movs	r2, #0
 8001176:	f240 413c 	movw	r1, #1084	; 0x43c
 800117a:	4835      	ldr	r0, [pc, #212]	; (8001250 <MX_GPIO_Init+0x15c>)
 800117c:	f000 fd2b 	bl	8001bd6 <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001186:	4833      	ldr	r0, [pc, #204]	; (8001254 <MX_GPIO_Init+0x160>)
 8001188:	f000 fd25 	bl	8001bd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <MX_GPIO_Init+0x164>)
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	482c      	ldr	r0, [pc, #176]	; (8001254 <MX_GPIO_Init+0x160>)
 80011a2:	f000 fb7d 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_PED_Pin BUTTON_MODE_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_PED_Pin|BUTTON_MODE_Pin|BUTTON_SET_Pin;
 80011a6:	2313      	movs	r3, #19
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	4824      	ldr	r0, [pc, #144]	; (800124c <MX_GPIO_Init+0x158>)
 80011ba:	f000 fb71 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_GREEN_P1_Pin LED_RED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_GREEN_P1_Pin|LED_RED_1_Pin;
 80011be:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	481d      	ldr	r0, [pc, #116]	; (800124c <MX_GPIO_Init+0x158>)
 80011d8:	f000 fb62 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INC_Pin */
  GPIO_InitStruct.Pin = BUTTON_INC_Pin;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INC_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <MX_GPIO_Init+0x15c>)
 80011f0:	f000 fb56 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_P2_Pin LED_RED_P1_Pin LED_GREEN_1_Pin LED_GREEN_2_Pin
                           LED_RED_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 80011f4:	f240 433c 	movw	r3, #1084	; 0x43c
 80011f8:	613b      	str	r3, [r7, #16]
                          |LED_RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4619      	mov	r1, r3
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <MX_GPIO_Init+0x15c>)
 800120e:	f000 fb47 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_P2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_P2_Pin;
 8001212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GREEN_P2_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <MX_GPIO_Init+0x160>)
 800122c:	f000 fb38 	bl	80018a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2028      	movs	r0, #40	; 0x28
 8001236:	f000 fafc 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800123a:	2028      	movs	r0, #40	; 0x28
 800123c:	f000 fb15 	bl	800186a <HAL_NVIC_EnableIRQ>

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	10110000 	.word	0x10110000

0800125c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	timerRun();
 8001264:	f000 f956 	bl	8001514 <timerRun>
	getKeyInput();
 8001268:	f7ff f924 	bl	80004b4 <getKeyInput>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_MspInit+0x5c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6193      	str	r3, [r2, #24]
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_MspInit+0x5c>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_MspInit+0x5c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_MspInit+0x5c>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_MspInit+0x60>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_MspInit+0x60>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_TIM_Base_MspInit+0x44>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d113      	bne.n	800131e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_TIM_Base_MspInit+0x48>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_TIM_Base_MspInit+0x48>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_TIM_Base_MspInit+0x48>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	201d      	movs	r0, #29
 8001314:	f000 fa8d 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001318:	201d      	movs	r0, #29
 800131a:	f000 faa6 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40000400 	.word	0x40000400
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_TIM_MspPostInit+0x58>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d117      	bne.n	8001380 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_TIM_MspPostInit+0x5c>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_TIM_MspPostInit+0x5c>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_TIM_MspPostInit+0x5c>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001368:	23c0      	movs	r3, #192	; 0xc0
 800136a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2302      	movs	r3, #2
 8001372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_TIM_MspPostInit+0x60>)
 800137c:	f000 fa90 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40000400 	.word	0x40000400
 800138c:	40021000 	.word	0x40021000
 8001390:	40010800 	.word	0x40010800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a15      	ldr	r2, [pc, #84]	; (8001404 <HAL_UART_MspInit+0x70>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d123      	bne.n	80013fc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x74>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_UART_MspInit+0x74>)
 80013ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013be:	61d3      	str	r3, [r2, #28]
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x74>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_UART_MspInit+0x74>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_UART_MspInit+0x74>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_UART_MspInit+0x74>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013e4:	230c      	movs	r3, #12
 80013e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x78>)
 80013f8:	f000 fa52 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 f8f9 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM3_IRQHandler+0x10>)
 8001466:	f001 f9a7 	bl	80027b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000060 	.word	0x20000060

08001474 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001478:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800147c:	f000 fbc4 	bl	8001c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <currentCounter>:
#include "timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

int currentCounter(int timer) {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <currentCounter+0x1c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000012c 	.word	0x2000012c

080014b0 <isTimerUp>:

int isTimerUp(int timer) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <isTimerUp+0x24>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000138 	.word	0x20000138

080014d8 <setTimer>:

void setTimer(int timer, int duration){
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration / timer_cycle;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <setTimer+0x30>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <setTimer+0x34>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <setTimer+0x38>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2100      	movs	r1, #0
 80014fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000010 	.word	0x20000010
 800150c:	2000012c 	.word	0x2000012c
 8001510:	20000138 	.word	0x20000138

08001514 <timerRun>:
void timerRun(){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e01c      	b.n	800155a <timerRun+0x46>
		if(timer_counter[timer] > 0){
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <timerRun+0x58>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd13      	ble.n	8001554 <timerRun+0x40>
			timer_counter[timer]--;
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <timerRun+0x58>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <timerRun+0x58>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0) {
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <timerRun+0x58>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <timerRun+0x40>
				timer_flag[timer] = 1;
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <timerRun+0x5c>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2101      	movs	r1, #1
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b02      	cmp	r3, #2
 800155e:	dddf      	ble.n	8001520 <timerRun+0xc>
			}
		}
	}
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	2000012c 	.word	0x2000012c
 8001570:	20000138 	.word	0x20000138

08001574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159a:	f7ff ff73 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f001 ffa9 	bl	80034f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a2:	f7ff fc97 	bl	8000ed4 <main>
  bx lr
 80015a6:	4770      	bx	lr
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80015b0:	08003594 	.word	0x08003594
  ldr r2, =_sbss
 80015b4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80015b8:	20000148 	.word	0x20000148

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x28>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f923 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fe50 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f93b 	bl	8001886 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 f903 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000024 	.word	0x20000024
 8001644:	2000002c 	.word	0x2000002c
 8001648:	20000028 	.word	0x20000028

0800164c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x1c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x20>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x20>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	2000002c 	.word	0x2000002c
 800166c:	20000144 	.word	0x20000144

08001670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <HAL_GetTick+0x10>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20000144 	.word	0x20000144

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4906      	ldr	r1, [pc, #24]	; (800171c <__NVIC_EnableIRQ+0x34>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff90 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff2d 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff42 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff90 	bl	8001774 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5f 	bl	8001720 <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff35 	bl	80016e8 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b08b      	sub	sp, #44	; 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	e169      	b.n	8001b88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b4:	2201      	movs	r2, #1
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8158 	bne.w	8001b82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a9a      	ldr	r2, [pc, #616]	; (8001b40 <HAL_GPIO_Init+0x2a0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d05e      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 80018dc:	4a98      	ldr	r2, [pc, #608]	; (8001b40 <HAL_GPIO_Init+0x2a0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d875      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 80018e2:	4a98      	ldr	r2, [pc, #608]	; (8001b44 <HAL_GPIO_Init+0x2a4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d058      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 80018e8:	4a96      	ldr	r2, [pc, #600]	; (8001b44 <HAL_GPIO_Init+0x2a4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d86f      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 80018ee:	4a96      	ldr	r2, [pc, #600]	; (8001b48 <HAL_GPIO_Init+0x2a8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d052      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 80018f4:	4a94      	ldr	r2, [pc, #592]	; (8001b48 <HAL_GPIO_Init+0x2a8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d869      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 80018fa:	4a94      	ldr	r2, [pc, #592]	; (8001b4c <HAL_GPIO_Init+0x2ac>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04c      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 8001900:	4a92      	ldr	r2, [pc, #584]	; (8001b4c <HAL_GPIO_Init+0x2ac>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d863      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 8001906:	4a92      	ldr	r2, [pc, #584]	; (8001b50 <HAL_GPIO_Init+0x2b0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d046      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 800190c:	4a90      	ldr	r2, [pc, #576]	; (8001b50 <HAL_GPIO_Init+0x2b0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d85d      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 8001912:	2b12      	cmp	r3, #18
 8001914:	d82a      	bhi.n	800196c <HAL_GPIO_Init+0xcc>
 8001916:	2b12      	cmp	r3, #18
 8001918:	d859      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <HAL_GPIO_Init+0x80>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	0800199b 	.word	0x0800199b
 8001924:	08001975 	.word	0x08001975
 8001928:	08001987 	.word	0x08001987
 800192c:	080019c9 	.word	0x080019c9
 8001930:	080019cf 	.word	0x080019cf
 8001934:	080019cf 	.word	0x080019cf
 8001938:	080019cf 	.word	0x080019cf
 800193c:	080019cf 	.word	0x080019cf
 8001940:	080019cf 	.word	0x080019cf
 8001944:	080019cf 	.word	0x080019cf
 8001948:	080019cf 	.word	0x080019cf
 800194c:	080019cf 	.word	0x080019cf
 8001950:	080019cf 	.word	0x080019cf
 8001954:	080019cf 	.word	0x080019cf
 8001958:	080019cf 	.word	0x080019cf
 800195c:	080019cf 	.word	0x080019cf
 8001960:	080019cf 	.word	0x080019cf
 8001964:	0800197d 	.word	0x0800197d
 8001968:	08001991 	.word	0x08001991
 800196c:	4a79      	ldr	r2, [pc, #484]	; (8001b54 <HAL_GPIO_Init+0x2b4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001972:	e02c      	b.n	80019ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e029      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	3304      	adds	r3, #4
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e024      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	3308      	adds	r3, #8
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e01f      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	330c      	adds	r3, #12
 8001996:	623b      	str	r3, [r7, #32]
          break;
 8001998:	e01a      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019a2:	2304      	movs	r3, #4
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e013      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	611a      	str	r2, [r3, #16]
          break;
 80019ba:	e009      	b.n	80019d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019bc:	2308      	movs	r3, #8
 80019be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	615a      	str	r2, [r3, #20]
          break;
 80019c6:	e003      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          break;
 80019ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	d801      	bhi.n	80019da <HAL_GPIO_Init+0x13a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	e001      	b.n	80019de <HAL_GPIO_Init+0x13e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d802      	bhi.n	80019ec <HAL_GPIO_Init+0x14c>
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x152>
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	3b08      	subs	r3, #8
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	210f      	movs	r1, #15
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	401a      	ands	r2, r3
 8001a04:	6a39      	ldr	r1, [r7, #32]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80b1 	beq.w	8001b82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a20:	4b4d      	ldr	r3, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_GPIO_Init+0x2b8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_GPIO_Init+0x2b8>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a38:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <HAL_GPIO_Init+0x2bc>)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a40      	ldr	r2, [pc, #256]	; (8001b60 <HAL_GPIO_Init+0x2c0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d013      	beq.n	8001a8c <HAL_GPIO_Init+0x1ec>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a3f      	ldr	r2, [pc, #252]	; (8001b64 <HAL_GPIO_Init+0x2c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00d      	beq.n	8001a88 <HAL_GPIO_Init+0x1e8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a3e      	ldr	r2, [pc, #248]	; (8001b68 <HAL_GPIO_Init+0x2c8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d007      	beq.n	8001a84 <HAL_GPIO_Init+0x1e4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a3d      	ldr	r2, [pc, #244]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_GPIO_Init+0x1e0>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a80:	2304      	movs	r3, #4
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a9e:	492f      	ldr	r1, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x2bc>)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	492c      	ldr	r1, [pc, #176]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4928      	ldr	r1, [pc, #160]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4922      	ldr	r1, [pc, #136]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	491e      	ldr	r1, [pc, #120]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4918      	ldr	r1, [pc, #96]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4914      	ldr	r1, [pc, #80]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d021      	beq.n	8001b74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
 8001b3c:	e021      	b.n	8001b82 <HAL_GPIO_Init+0x2e2>
 8001b3e:	bf00      	nop
 8001b40:	10320000 	.word	0x10320000
 8001b44:	10310000 	.word	0x10310000
 8001b48:	10220000 	.word	0x10220000
 8001b4c:	10210000 	.word	0x10210000
 8001b50:	10120000 	.word	0x10120000
 8001b54:	10110000 	.word	0x10110000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	40010800 	.word	0x40010800
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40011400 	.word	0x40011400
 8001b70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4909      	ldr	r1, [pc, #36]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	3301      	adds	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f ae8e 	bne.w	80018b4 <HAL_GPIO_Init+0x14>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	372c      	adds	r7, #44	; 0x2c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e001      	b.n	8001bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]
 8001be2:	4613      	mov	r3, r2
 8001be4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be6:	787b      	ldrb	r3, [r7, #1]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bec:	887a      	ldrh	r2, [r7, #2]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bf2:	e003      	b.n	8001bfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f806 	bl	8001c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e26c      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8087 	beq.w	8001d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c6c:	4b92      	ldr	r3, [pc, #584]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d00c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c78:	4b8f      	ldr	r3, [pc, #572]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d112      	bne.n	8001caa <HAL_RCC_OscConfig+0x5e>
 8001c84:	4b8c      	ldr	r3, [pc, #560]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	4b89      	ldr	r3, [pc, #548]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d06c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x12c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d168      	bne.n	8001d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e246      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x76>
 8001cb4:	4b80      	ldr	r3, [pc, #512]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a7f      	ldr	r2, [pc, #508]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e02e      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x98>
 8001cca:	4b7b      	ldr	r3, [pc, #492]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7a      	ldr	r2, [pc, #488]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b78      	ldr	r3, [pc, #480]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a77      	ldr	r2, [pc, #476]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0xbc>
 8001cee:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001d08:	4b6b      	ldr	r3, [pc, #428]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6a      	ldr	r2, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a67      	ldr	r2, [pc, #412]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fca2 	bl	8001670 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fc9e 	bl	8001670 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1fa      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe4>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fc8e 	bl	8001670 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fc8a 	bl	8001670 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1e6      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x10c>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d063      	beq.n	8001e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d86:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d11c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x18c>
 8001d9e:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d116      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x176>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1ba      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4939      	ldr	r1, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	e03a      	b.n	8001e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff fc43 	bl	8001670 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff fc3f 	bl	8001670 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e19b      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4927      	ldr	r1, [pc, #156]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fc22 	bl	8001670 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7ff fc1e 	bl	8001670 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e17a      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03a      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7ff fc02 	bl	8001670 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff fbfe 	bl	8001670 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e15a      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f000 fad8 	bl	8002444 <RCC_Delay>
 8001e94:	e01c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fbe8 	bl	8001670 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea2:	e00f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fbe4 	bl	8001670 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d908      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e140      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	42420000 	.word	0x42420000
 8001ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	4b9e      	ldr	r3, [pc, #632]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e9      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a6 	beq.w	800202a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee2:	4b97      	ldr	r3, [pc, #604]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10d      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b94      	ldr	r3, [pc, #592]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a93      	ldr	r2, [pc, #588]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	61d3      	str	r3, [r2, #28]
 8001efa:	4b91      	ldr	r3, [pc, #580]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b8e      	ldr	r3, [pc, #568]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fba5 	bl	8001670 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7ff fba1 	bl	8001670 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0fd      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_RCC_OscConfig+0x4f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x312>
 8001f50:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a7a      	ldr	r2, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e02d      	b.n	8001fba <HAL_RCC_OscConfig+0x36e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x334>
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	4b73      	ldr	r3, [pc, #460]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a72      	ldr	r2, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	e01c      	b.n	8001fba <HAL_RCC_OscConfig+0x36e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x356>
 8001f88:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a6c      	ldr	r2, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a69      	ldr	r2, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	e00b      	b.n	8001fba <HAL_RCC_OscConfig+0x36e>
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a63      	ldr	r2, [pc, #396]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d015      	beq.n	8001fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb55 	bl	8001670 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fb51 	bl	8001670 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0ab      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ee      	beq.n	8001fca <HAL_RCC_OscConfig+0x37e>
 8001fec:	e014      	b.n	8002018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fb3f 	bl	8001670 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fb3b 	bl	8001670 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e095      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200c:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ee      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4b48      	ldr	r3, [pc, #288]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8081 	beq.w	8002136 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002034:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d061      	beq.n	8002104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d146      	bne.n	80020d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002048:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <HAL_RCC_OscConfig+0x4fc>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fb0f 	bl	8001670 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fb0b 	bl	8001670 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e067      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002068:	4b35      	ldr	r3, [pc, #212]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207c:	d108      	bne.n	8002090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	492d      	ldr	r1, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a19      	ldr	r1, [r3, #32]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4927      	ldr	r1, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x4fc>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7ff fadf 	bl	8001670 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff fadb 	bl	8001670 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e037      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46a>
 80020d4:	e02f      	b.n	8002136 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_RCC_OscConfig+0x4fc>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fac8 	bl	8001670 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff fac4 	bl	8001670 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e020      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x498>
 8002102:	e018      	b.n	8002136 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e013      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	429a      	cmp	r2, r3
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
 8002148:	42420060 	.word	0x42420060

0800214c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d0      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b6a      	ldr	r3, [pc, #424]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d910      	bls.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b67      	ldr	r3, [pc, #412]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4965      	ldr	r1, [pc, #404]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b8      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	494d      	ldr	r1, [pc, #308]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d040      	beq.n	800226c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d115      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e073      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4936      	ldr	r1, [pc, #216]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223c:	f7ff fa18 	bl	8001670 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7ff fa14 	bl	8001670 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e053      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d210      	bcs.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4922      	ldr	r1, [pc, #136]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e032      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4916      	ldr	r1, [pc, #88]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	490e      	ldr	r1, [pc, #56]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f821 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490a      	ldr	r1, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1cc>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1d0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f976 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000
 8002310:	40021000 	.word	0x40021000
 8002314:	08003574 	.word	0x08003574
 8002318:	20000024 	.word	0x20000024
 800231c:	20000028 	.word	0x20000028

08002320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	b490      	push	{r4, r7}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002328:	1d3c      	adds	r4, r7, #4
 800232a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002330:	f240 2301 	movw	r3, #513	; 0x201
 8002334:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x40>
 800235a:	2b08      	cmp	r3, #8
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x46>
 800235e:	e02d      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002362:	623b      	str	r3, [r7, #32]
      break;
 8002364:	e02d      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	0c9b      	lsrs	r3, r3, #18
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002372:	4413      	add	r3, r2
 8002374:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002378:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0c5b      	lsrs	r3, r3, #17
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002392:	4413      	add	r3, r2
 8002394:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002398:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239e:	fb02 f203 	mul.w	r2, r2, r3
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	e004      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	623b      	str	r3, [r7, #32]
      break;
 80023ba:	e002      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	623b      	str	r3, [r7, #32]
      break;
 80023c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c2:	6a3b      	ldr	r3, [r7, #32]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc90      	pop	{r4, r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	08003564 	.word	0x08003564
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	003d0900 	.word	0x003d0900

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000024 	.word	0x20000024

080023f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f8:	f7ff fff2 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	08003584 	.word	0x08003584

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002420:	f7ff ffde 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	0adb      	lsrs	r3, r3, #11
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4903      	ldr	r1, [pc, #12]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	08003584 	.word	0x08003584

08002444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <RCC_Delay+0x34>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <RCC_Delay+0x38>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0a5b      	lsrs	r3, r3, #9
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002460:	bf00      	nop
  }
  while (Delay --);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	60fa      	str	r2, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f9      	bne.n	8002460 <RCC_Delay+0x1c>
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	20000024 	.word	0x20000024
 800247c:	10624dd3 	.word	0x10624dd3

08002480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e041      	b.n	8002516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe ff1c 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fc28 	bl	8002d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e03a      	b.n	80025ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00e      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x58>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d009      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x58>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_TIM_Base_Start_IT+0x9c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x58>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d111      	bne.n	800259c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b06      	cmp	r3, #6
 8002588:	d010      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259a:	e007      	b.n	80025ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40000800 	.word	0x40000800

080025c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e041      	b.n	800265a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f839 	bl	8002662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f000 fb86 	bl	8002d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_TIM_PWM_Start+0x24>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e022      	b.n	80026de <HAL_TIM_PWM_Start+0x6a>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d109      	bne.n	80026b2 <HAL_TIM_PWM_Start+0x3e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e015      	b.n	80026de <HAL_TIM_PWM_Start+0x6a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d109      	bne.n	80026cc <HAL_TIM_PWM_Start+0x58>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e008      	b.n	80026de <HAL_TIM_PWM_Start+0x6a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e05e      	b.n	80027a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_PWM_Start+0x82>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f4:	e013      	b.n	800271e <HAL_TIM_PWM_Start+0xaa>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_PWM_Start+0x92>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002704:	e00b      	b.n	800271e <HAL_TIM_PWM_Start+0xaa>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d104      	bne.n	8002716 <HAL_TIM_PWM_Start+0xa2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002714:	e003      	b.n	800271e <HAL_TIM_PWM_Start+0xaa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fd74 	bl	8003214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_TIM_PWM_Start+0x138>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d107      	bne.n	8002746 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_TIM_PWM_Start+0x138>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00e      	beq.n	800276e <HAL_TIM_PWM_Start+0xfa>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d009      	beq.n	800276e <HAL_TIM_PWM_Start+0xfa>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <HAL_TIM_PWM_Start+0x13c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_TIM_PWM_Start+0xfa>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_TIM_PWM_Start+0x140>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d111      	bne.n	8002792 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d010      	beq.n	80027a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002790:	e007      	b.n	80027a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40000800 	.word	0x40000800

080027b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0202 	mvn.w	r2, #2
 80027e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa6f 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa62 	bl	8002ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fa71 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b04      	cmp	r3, #4
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0204 	mvn.w	r2, #4
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa45 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa38 	bl	8002ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fa47 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b08      	cmp	r3, #8
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b08      	cmp	r3, #8
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0208 	mvn.w	r2, #8
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2204      	movs	r2, #4
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa1b 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa0e 	bl	8002ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fa1d 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0210 	mvn.w	r2, #16
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2208      	movs	r2, #8
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9f1 	bl	8002cde <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9e4 	bl	8002ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9f3 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10e      	bne.n	800293c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d107      	bne.n	800293c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0201 	mvn.w	r2, #1
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fc90 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d107      	bne.n	8002968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fce1 	bl	800332a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d107      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f9b7 	bl	8002d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0220 	mvn.w	r2, #32
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fcac 	bl	8003318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029de:	2302      	movs	r3, #2
 80029e0:	e0ac      	b.n	8002b3c <HAL_TIM_PWM_ConfigChannel+0x174>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	f200 809f 	bhi.w	8002b30 <HAL_TIM_PWM_ConfigChannel+0x168>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002b31 	.word	0x08002b31
 8002a00:	08002b31 	.word	0x08002b31
 8002a04:	08002b31 	.word	0x08002b31
 8002a08:	08002a6d 	.word	0x08002a6d
 8002a0c:	08002b31 	.word	0x08002b31
 8002a10:	08002b31 	.word	0x08002b31
 8002a14:	08002b31 	.word	0x08002b31
 8002a18:	08002aaf 	.word	0x08002aaf
 8002a1c:	08002b31 	.word	0x08002b31
 8002a20:	08002b31 	.word	0x08002b31
 8002a24:	08002b31 	.word	0x08002b31
 8002a28:	08002aef 	.word	0x08002aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f9d0 	bl	8002dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0208 	orr.w	r2, r2, #8
 8002a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6999      	ldr	r1, [r3, #24]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	619a      	str	r2, [r3, #24]
      break;
 8002a6a:	e062      	b.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fa16 	bl	8002ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	021a      	lsls	r2, r3, #8
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	619a      	str	r2, [r3, #24]
      break;
 8002aac:	e041      	b.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fa5f 	bl	8002f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0208 	orr.w	r2, r2, #8
 8002ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0204 	bic.w	r2, r2, #4
 8002ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69d9      	ldr	r1, [r3, #28]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	61da      	str	r2, [r3, #28]
      break;
 8002aec:	e021      	b.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 faa9 	bl	800304c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	021a      	lsls	r2, r3, #8
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	61da      	str	r2, [r3, #28]
      break;
 8002b2e:	e000      	b.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_TIM_ConfigClockSource+0x18>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0b3      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x180>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b94:	d03e      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0xd0>
 8002b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9a:	f200 8087 	bhi.w	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba2:	f000 8085 	beq.w	8002cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	d87f      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bac:	2b70      	cmp	r3, #112	; 0x70
 8002bae:	d01a      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0xa2>
 8002bb0:	2b70      	cmp	r3, #112	; 0x70
 8002bb2:	d87b      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bb4:	2b60      	cmp	r3, #96	; 0x60
 8002bb6:	d050      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x116>
 8002bb8:	2b60      	cmp	r3, #96	; 0x60
 8002bba:	d877      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bbc:	2b50      	cmp	r3, #80	; 0x50
 8002bbe:	d03c      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0xf6>
 8002bc0:	2b50      	cmp	r3, #80	; 0x50
 8002bc2:	d873      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d058      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x136>
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d86f      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bcc:	2b30      	cmp	r3, #48	; 0x30
 8002bce:	d064      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
 8002bd0:	2b30      	cmp	r3, #48	; 0x30
 8002bd2:	d86b      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d060      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d867      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d05c      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d05a      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002be4:	e062      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f000 faee 	bl	80031d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	609a      	str	r2, [r3, #8]
      break;
 8002c12:	e04e      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6899      	ldr	r1, [r3, #8]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f000 fad7 	bl	80031d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c36:	609a      	str	r2, [r3, #8]
      break;
 8002c38:	e03b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 fa4e 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2150      	movs	r1, #80	; 0x50
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 faa5 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002c58:	e02b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 fa6c 	bl	8003144 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2160      	movs	r1, #96	; 0x60
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fa95 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002c78:	e01b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 fa2e 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2140      	movs	r1, #64	; 0x40
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fa85 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002c98:	e00b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f000 fa7c 	bl	80031a2 <TIM_ITRx_SetConfig>
        break;
 8002caa:	e002      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cac:	bf00      	nop
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <TIM_Base_SetConfig+0xb8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_Base_SetConfig+0x30>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d007      	beq.n	8002d44 <TIM_Base_SetConfig+0x30>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <TIM_Base_SetConfig+0xbc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x30>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <TIM_Base_SetConfig+0xc0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <TIM_Base_SetConfig+0xb8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_Base_SetConfig+0x62>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0x62>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <TIM_Base_SetConfig+0xbc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <TIM_Base_SetConfig+0xc0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <TIM_Base_SetConfig+0xb8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40000800 	.word	0x40000800

08002dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 0302 	bic.w	r3, r3, #2
 8002e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <TIM_OC1_SetConfig+0xc8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10c      	bne.n	8002e4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0308 	bic.w	r3, r3, #8
 8002e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <TIM_OC1_SetConfig+0xc8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d111      	bne.n	8002e7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	621a      	str	r2, [r3, #32]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40012c00 	.word	0x40012c00

08002ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0320 	bic.w	r3, r3, #32
 8002eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <TIM_OC2_SetConfig+0xd0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10d      	bne.n	8002f20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <TIM_OC2_SetConfig+0xd0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d113      	bne.n	8002f50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00

08002f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <TIM_OC3_SetConfig+0xd0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10d      	bne.n	8002ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <TIM_OC3_SetConfig+0xd0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d113      	bne.n	8003022 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	621a      	str	r2, [r3, #32]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40012c00 	.word	0x40012c00

0800304c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	031b      	lsls	r3, r3, #12
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <TIM_OC4_SetConfig+0x98>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d109      	bne.n	80030c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40012c00 	.word	0x40012c00

080030e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 030a 	bic.w	r3, r3, #10
 8003124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f023 0210 	bic.w	r2, r3, #16
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800316e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	031b      	lsls	r3, r3, #12
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	621a      	str	r2, [r3, #32]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f043 0307 	orr.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b087      	sub	sp, #28
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2201      	movs	r2, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e046      	b.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a16      	ldr	r2, [pc, #88]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d009      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d10c      	bne.n	80032f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800

08003318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e03f      	b.n	80033ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe f816 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f829 	bl	80033d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003412:	f023 030c 	bic.w	r3, r3, #12
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	430b      	orrs	r3, r1
 800341e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a2c      	ldr	r2, [pc, #176]	; (80034ec <UART_SetConfig+0x114>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7fe ffec 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	e002      	b.n	800344e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003448:	f7fe ffd4 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 800344c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009a      	lsls	r2, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <UART_SetConfig+0x118>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	0119      	lsls	r1, r3, #4
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009a      	lsls	r2, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fbb2 f2f3 	udiv	r2, r2, r3
 8003484:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <UART_SetConfig+0x118>)
 8003486:	fba3 0302 	umull	r0, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2064      	movs	r0, #100	; 0x64
 800348e:	fb00 f303 	mul.w	r3, r0, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	3332      	adds	r3, #50	; 0x32
 8003498:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <UART_SetConfig+0x118>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a4:	4419      	add	r1, r3
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009a      	lsls	r2, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <UART_SetConfig+0x118>)
 80034be:	fba3 0302 	umull	r0, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2064      	movs	r0, #100	; 0x64
 80034c6:	fb00 f303 	mul.w	r3, r0, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	; 0x32
 80034d0:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <UART_SetConfig+0x118>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	440a      	add	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40013800 	.word	0x40013800
 80034f0:	51eb851f 	.word	0x51eb851f

080034f4 <__libc_init_array>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	2600      	movs	r6, #0
 80034f8:	4d0c      	ldr	r5, [pc, #48]	; (800352c <__libc_init_array+0x38>)
 80034fa:	4c0d      	ldr	r4, [pc, #52]	; (8003530 <__libc_init_array+0x3c>)
 80034fc:	1b64      	subs	r4, r4, r5
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	42a6      	cmp	r6, r4
 8003502:	d109      	bne.n	8003518 <__libc_init_array+0x24>
 8003504:	f000 f822 	bl	800354c <_init>
 8003508:	2600      	movs	r6, #0
 800350a:	4d0a      	ldr	r5, [pc, #40]	; (8003534 <__libc_init_array+0x40>)
 800350c:	4c0a      	ldr	r4, [pc, #40]	; (8003538 <__libc_init_array+0x44>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	42a6      	cmp	r6, r4
 8003514:	d105      	bne.n	8003522 <__libc_init_array+0x2e>
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	f855 3b04 	ldr.w	r3, [r5], #4
 800351c:	4798      	blx	r3
 800351e:	3601      	adds	r6, #1
 8003520:	e7ee      	b.n	8003500 <__libc_init_array+0xc>
 8003522:	f855 3b04 	ldr.w	r3, [r5], #4
 8003526:	4798      	blx	r3
 8003528:	3601      	adds	r6, #1
 800352a:	e7f2      	b.n	8003512 <__libc_init_array+0x1e>
 800352c:	0800358c 	.word	0x0800358c
 8003530:	0800358c 	.word	0x0800358c
 8003534:	0800358c 	.word	0x0800358c
 8003538:	08003590 	.word	0x08003590

0800353c <memset>:
 800353c:	4603      	mov	r3, r0
 800353e:	4402      	add	r2, r0
 8003540:	4293      	cmp	r3, r2
 8003542:	d100      	bne.n	8003546 <memset+0xa>
 8003544:	4770      	bx	lr
 8003546:	f803 1b01 	strb.w	r1, [r3], #1
 800354a:	e7f9      	b.n	8003540 <memset+0x4>

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
