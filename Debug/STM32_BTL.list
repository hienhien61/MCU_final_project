
STM32_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002774  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a8  080028a8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080028a8  080028a8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a8  080028a8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080028b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000001c  080028cc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080028cc  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae8e  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f39  00000000  00000000  0002aed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002ce10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017beb  00000000  00000000  0002e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9ec  00000000  00000000  0004622b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869c4  00000000  00000000  00054c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db5db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000325c  00000000  00000000  000db630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002868 	.word	0x08002868

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002868 	.word	0x08002868

0800014c <fsmHorLEDsRun>:
#include "LEDs_display.h"

int horizontal_status = MODE_INIT;
int vertical_status = MODE_INIT;

void fsmHorLEDsRun() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// FSM for horizontal LEDs

	switch (horizontal_status) {
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	d847      	bhi.n	80001e8 <fsmHorLEDsRun+0x9c>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsmHorLEDsRun+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000175 	.word	0x08000175
 8000164:	080001e9 	.word	0x080001e9
 8000168:	08000189 	.word	0x08000189
 800016c:	080001a9 	.word	0x080001a9
 8000170:	080001c9 	.word	0x080001c9
		case MODE_INIT:
			horizontal_status = AUTO_RED;
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000176:	2202      	movs	r2, #2
 8000178:	601a      	str	r2, [r3, #0]
			setTimer(0, RED_time);
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <fsmHorLEDsRun+0xb4>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4619      	mov	r1, r3
 8000180:	2000      	movs	r0, #0
 8000182:	f000 fd83 	bl	8000c8c <setTimer>
			break;
 8000186:	e036      	b.n	80001f6 <fsmHorLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(0)) {
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fd6b 	bl	8000c64 <isTimerUp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d02b      	beq.n	80001ec <fsmHorLEDsRun+0xa0>
				horizontal_status = AUTO_GREEN;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000196:	2203      	movs	r2, #3
 8000198:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN_time);
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <fsmHorLEDsRun+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4619      	mov	r1, r3
 80001a0:	2000      	movs	r0, #0
 80001a2:	f000 fd73 	bl	8000c8c <setTimer>
			}
			break;
 80001a6:	e021      	b.n	80001ec <fsmHorLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(0)) {
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 fd5b 	bl	8000c64 <isTimerUp>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d01d      	beq.n	80001f0 <fsmHorLEDsRun+0xa4>
				horizontal_status = AUTO_YELLOW;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	601a      	str	r2, [r3, #0]
				setTimer(0, YELLOW_time);
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <fsmHorLEDsRun+0xbc>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4619      	mov	r1, r3
 80001c0:	2000      	movs	r0, #0
 80001c2:	f000 fd63 	bl	8000c8c <setTimer>
			}
			break;
 80001c6:	e013      	b.n	80001f0 <fsmHorLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(0)) {
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 fd4b 	bl	8000c64 <isTimerUp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00f      	beq.n	80001f4 <fsmHorLEDsRun+0xa8>
				horizontal_status = AUTO_RED;
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	601a      	str	r2, [r3, #0]
				setTimer(0, RED_time);
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fsmHorLEDsRun+0xb4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 fd53 	bl	8000c8c <setTimer>
			}
			break;
 80001e6:	e005      	b.n	80001f4 <fsmHorLEDsRun+0xa8>

		default:
			break;
 80001e8:	bf00      	nop
 80001ea:	e004      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001ec:	bf00      	nop
 80001ee:	e002      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f0:	bf00      	nop
 80001f2:	e000      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000038 	.word	0x20000038
 8000200:	20000004 	.word	0x20000004
 8000204:	20000008 	.word	0x20000008
 8000208:	2000000c 	.word	0x2000000c

0800020c <fsmVerLEDsRun>:


void fsmVerLEDsRun() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// FSM for vertical LEDs

	switch (vertical_status) {
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d847      	bhi.n	80002a8 <fsmVerLEDsRun+0x9c>
 8000218:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsmVerLEDsRun+0x14>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000235 	.word	0x08000235
 8000224:	080002a9 	.word	0x080002a9
 8000228:	08000249 	.word	0x08000249
 800022c:	08000269 	.word	0x08000269
 8000230:	08000289 	.word	0x08000289
		case MODE_INIT:
			vertical_status = AUTO_GREEN;
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000236:	2203      	movs	r2, #3
 8000238:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN_time);
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2001      	movs	r0, #1
 8000242:	f000 fd23 	bl	8000c8c <setTimer>
			break;
 8000246:	e036      	b.n	80002b6 <fsmVerLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(1)) {
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fd0b 	bl	8000c64 <isTimerUp>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d02b      	beq.n	80002ac <fsmVerLEDsRun+0xa0>
				vertical_status = AUTO_GREEN;
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000256:	2203      	movs	r2, #3
 8000258:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN_time);
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	2001      	movs	r0, #1
 8000262:	f000 fd13 	bl	8000c8c <setTimer>
			}
			break;
 8000266:	e021      	b.n	80002ac <fsmVerLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(1)) {
 8000268:	2001      	movs	r0, #1
 800026a:	f000 fcfb 	bl	8000c64 <isTimerUp>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <fsmVerLEDsRun+0xa4>
				vertical_status = AUTO_YELLOW;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000276:	2204      	movs	r2, #4
 8000278:	601a      	str	r2, [r3, #0]
				setTimer(1, YELLOW_time);
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <fsmVerLEDsRun+0xb8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4619      	mov	r1, r3
 8000280:	2001      	movs	r0, #1
 8000282:	f000 fd03 	bl	8000c8c <setTimer>
			}
			break;
 8000286:	e013      	b.n	80002b0 <fsmVerLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(1)) {
 8000288:	2001      	movs	r0, #1
 800028a:	f000 fceb 	bl	8000c64 <isTimerUp>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <fsmVerLEDsRun+0xa8>
				vertical_status = AUTO_RED;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
				setTimer(1, RED_time);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <fsmVerLEDsRun+0xbc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 fcf3 	bl	8000c8c <setTimer>
			}
			break;
 80002a6:	e005      	b.n	80002b4 <fsmVerLEDsRun+0xa8>

		default:
			break;
 80002a8:	bf00      	nop
 80002aa:	e004      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b4:	bf00      	nop
	}
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000003c 	.word	0x2000003c
 80002c0:	20000008 	.word	0x20000008
 80002c4:	2000000c 	.word	0x2000000c
 80002c8:	20000004 	.word	0x20000004

080002cc <LEDsDisplay>:

void LEDsDisplay() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Display two ways LEDs

	fsmHorLEDsRun();
 80002d0:	f7ff ff3c 	bl	800014c <fsmHorLEDsRun>
	fsmVerLEDsRun();
 80002d4:	f7ff ff9a 	bl	800020c <fsmVerLEDsRun>

	switch (horizontal_status) {
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <LEDsDisplay+0xcc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d01e      	beq.n	800031e <LEDsDisplay+0x52>
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	dc28      	bgt.n	8000336 <LEDsDisplay+0x6a>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d002      	beq.n	80002ee <LEDsDisplay+0x22>
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d00c      	beq.n	8000306 <LEDsDisplay+0x3a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
			break;

		default:
			break;
 80002ec:	e023      	b.n	8000336 <LEDsDisplay+0x6a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4829      	ldr	r0, [pc, #164]	; (800039c <LEDsDisplay+0xd0>)
 80002f6:	f001 f801 	bl	80012fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4828      	ldr	r0, [pc, #160]	; (80003a0 <LEDsDisplay+0xd4>)
 8000300:	f000 fffc 	bl	80012fc <HAL_GPIO_WritePin>
			break;
 8000304:	e018      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4823      	ldr	r0, [pc, #140]	; (800039c <LEDsDisplay+0xd0>)
 800030e:	f000 fff5 	bl	80012fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4822      	ldr	r0, [pc, #136]	; (80003a0 <LEDsDisplay+0xd4>)
 8000318:	f000 fff0 	bl	80012fc <HAL_GPIO_WritePin>
			break;
 800031c:	e00c      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <LEDsDisplay+0xd0>)
 8000326:	f000 ffe9 	bl	80012fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 800032a:	2201      	movs	r2, #1
 800032c:	2108      	movs	r1, #8
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <LEDsDisplay+0xd4>)
 8000330:	f000 ffe4 	bl	80012fc <HAL_GPIO_WritePin>
			break;
 8000334:	e000      	b.n	8000338 <LEDsDisplay+0x6c>
			break;
 8000336:	bf00      	nop
	}

	switch (vertical_status) {
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <LEDsDisplay+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d01c      	beq.n	800037a <LEDsDisplay+0xae>
 8000340:	2b04      	cmp	r3, #4
 8000342:	dc25      	bgt.n	8000390 <LEDsDisplay+0xc4>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d002      	beq.n	800034e <LEDsDisplay+0x82>
 8000348:	2b03      	cmp	r3, #3
 800034a:	d00b      	beq.n	8000364 <LEDsDisplay+0x98>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
			break;

		default:
			break;
 800034c:	e020      	b.n	8000390 <LEDsDisplay+0xc4>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	4813      	ldr	r0, [pc, #76]	; (80003a0 <LEDsDisplay+0xd4>)
 8000354:	f000 ffd2 	bl	80012fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <LEDsDisplay+0xd4>)
 800035e:	f000 ffcd 	bl	80012fc <HAL_GPIO_WritePin>
			break;
 8000362:	e016      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LEDsDisplay+0xd4>)
 800036a:	f000 ffc7 	bl	80012fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LEDsDisplay+0xd4>)
 8000374:	f000 ffc2 	bl	80012fc <HAL_GPIO_WritePin>
			break;
 8000378:	e00b      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <LEDsDisplay+0xd4>)
 8000380:	f000 ffbc 	bl	80012fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000384:	2201      	movs	r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LEDsDisplay+0xd4>)
 800038a:	f000 ffb7 	bl	80012fc <HAL_GPIO_WritePin>
			break;
 800038e:	e000      	b.n	8000392 <LEDsDisplay+0xc6>
			break;
 8000390:	bf00      	nop
	}
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000038 	.word	0x20000038
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	2000003c 	.word	0x2000003c

080003a8 <isButtonPressed>:
int button_flag[NO_OF_BUTTON];
int button_long_flag[NO_OF_BUTTON];
GPIO_PinState key_reg[NO_OF_BUTTON][4];
int counter_for_key_pressed[NO_OF_BUTTON];

int isButtonPressed(int button) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (button_flag[button]) {
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <isButtonPressed+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d006      	beq.n	80003ca <isButtonPressed+0x22>
		button_flag[button] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <isButtonPressed+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <isButtonPressed+0x24>
	}
	else return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000068 	.word	0x20000068

080003dc <isButtonLongPressed>:

int isButtonLongPressed(int button) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if (button_long_flag[button]) {
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <isButtonLongPressed+0x30>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <isButtonLongPressed+0x22>
		button_long_flag[button] = 0;
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <isButtonLongPressed+0x30>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2100      	movs	r1, #0
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <isButtonLongPressed+0x24>
	}
	else return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000078 	.word	0x20000078

08000410 <fsmAutoModeRun>:
#include "fsm_auto_mode.h"

void fsmAutoModeRun() {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	// FSM for AUTO MODE

	switch (mode) {
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <fsmAutoModeRun+0x38>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d002      	beq.n	8000422 <fsmAutoModeRun+0x12>
 800041c:	2b01      	cmp	r3, #1
 800041e:	d004      	beq.n	800042a <fsmAutoModeRun+0x1a>
			LEDsDisplay();

			break;

		default:
			break;
 8000420:	e00f      	b.n	8000442 <fsmAutoModeRun+0x32>
			mode = AUTO_MODE;
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <fsmAutoModeRun+0x38>)
 8000424:	2201      	movs	r2, #1
 8000426:	601a      	str	r2, [r3, #0]
			break;
 8000428:	e00b      	b.n	8000442 <fsmAutoModeRun+0x32>
			if (isButtonPressed(BUTTON_MODE)) {
 800042a:	2000      	movs	r0, #0
 800042c:	f7ff ffbc 	bl	80003a8 <isButtonPressed>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <fsmAutoModeRun+0x2c>
				mode = MAN_MODE;
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <fsmAutoModeRun+0x38>)
 8000438:	2205      	movs	r2, #5
 800043a:	601a      	str	r2, [r3, #0]
			LEDsDisplay();
 800043c:	f7ff ff46 	bl	80002cc <LEDsDisplay>
			break;
 8000440:	bf00      	nop
	}
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000044 	.word	0x20000044

0800044c <fsmManualModeRun>:
#include "fsm_manual_mode.h"

void fsmManualModeRun()
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	// FSM for MANUAL MODE

	switch (mode)
 8000450:	4b4a      	ldr	r3, [pc, #296]	; (800057c <fsmManualModeRun+0x130>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	3b05      	subs	r3, #5
 8000456:	2b03      	cmp	r3, #3
 8000458:	f200 808d 	bhi.w	8000576 <fsmManualModeRun+0x12a>
 800045c:	a201      	add	r2, pc, #4	; (adr r2, 8000464 <fsmManualModeRun+0x18>)
 800045e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000462:	bf00      	nop
 8000464:	08000475 	.word	0x08000475
 8000468:	0800047d 	.word	0x0800047d
 800046c:	080004cd 	.word	0x080004cd
 8000470:	0800051d 	.word	0x0800051d
	{
	case MAN_MODE:
		mode = MAN_RED;
 8000474:	4b41      	ldr	r3, [pc, #260]	; (800057c <fsmManualModeRun+0x130>)
 8000476:	2206      	movs	r2, #6
 8000478:	601a      	str	r2, [r3, #0]
		break;
 800047a:	e07c      	b.n	8000576 <fsmManualModeRun+0x12a>

	case MAN_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000482:	483f      	ldr	r0, [pc, #252]	; (8000580 <fsmManualModeRun+0x134>)
 8000484:	f000 ff3a 	bl	80012fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 8000488:	2200      	movs	r2, #0
 800048a:	2108      	movs	r1, #8
 800048c:	483d      	ldr	r0, [pc, #244]	; (8000584 <fsmManualModeRun+0x138>)
 800048e:	f000 ff35 	bl	80012fc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 8000492:	2201      	movs	r2, #1
 8000494:	2120      	movs	r1, #32
 8000496:	483b      	ldr	r0, [pc, #236]	; (8000584 <fsmManualModeRun+0x138>)
 8000498:	f000 ff30 	bl	80012fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 800049c:	2200      	movs	r2, #0
 800049e:	2110      	movs	r1, #16
 80004a0:	4838      	ldr	r0, [pc, #224]	; (8000584 <fsmManualModeRun+0x138>)
 80004a2:	f000 ff2b 	bl	80012fc <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff ff7e 	bl	80003a8 <isButtonPressed>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <fsmManualModeRun+0x6c>
		{
			mode = MAN_GREEN;
 80004b2:	4b32      	ldr	r3, [pc, #200]	; (800057c <fsmManualModeRun+0x130>)
 80004b4:	2207      	movs	r2, #7
 80004b6:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff ff75 	bl	80003a8 <isButtonPressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d053      	beq.n	800056c <fsmManualModeRun+0x120>
		{
			mode = INC_RED;
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <fsmManualModeRun+0x130>)
 80004c6:	2209      	movs	r2, #9
 80004c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80004ca:	e04f      	b.n	800056c <fsmManualModeRun+0x120>

	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d2:	482b      	ldr	r0, [pc, #172]	; (8000580 <fsmManualModeRun+0x134>)
 80004d4:	f000 ff12 	bl	80012fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 80004d8:	2201      	movs	r2, #1
 80004da:	2108      	movs	r1, #8
 80004dc:	4829      	ldr	r0, [pc, #164]	; (8000584 <fsmManualModeRun+0x138>)
 80004de:	f000 ff0d 	bl	80012fc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2120      	movs	r1, #32
 80004e6:	4827      	ldr	r0, [pc, #156]	; (8000584 <fsmManualModeRun+0x138>)
 80004e8:	f000 ff08 	bl	80012fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2110      	movs	r1, #16
 80004f0:	4824      	ldr	r0, [pc, #144]	; (8000584 <fsmManualModeRun+0x138>)
 80004f2:	f000 ff03 	bl	80012fc <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff ff56 	bl	80003a8 <isButtonPressed>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <fsmManualModeRun+0xbc>
		{
			mode = MAN_YELLOW;
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <fsmManualModeRun+0x130>)
 8000504:	2208      	movs	r2, #8
 8000506:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff ff4d 	bl	80003a8 <isButtonPressed>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d02d      	beq.n	8000570 <fsmManualModeRun+0x124>
		{
			mode = INC_GREEN;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <fsmManualModeRun+0x130>)
 8000516:	220a      	movs	r2, #10
 8000518:	601a      	str	r2, [r3, #0]
		}
		break;
 800051a:	e029      	b.n	8000570 <fsmManualModeRun+0x124>

	case MAN_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000522:	4817      	ldr	r0, [pc, #92]	; (8000580 <fsmManualModeRun+0x134>)
 8000524:	f000 feea 	bl	80012fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4815      	ldr	r0, [pc, #84]	; (8000584 <fsmManualModeRun+0x138>)
 800052e:	f000 fee5 	bl	80012fc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 8000532:	2201      	movs	r2, #1
 8000534:	2120      	movs	r1, #32
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <fsmManualModeRun+0x138>)
 8000538:	f000 fee0 	bl	80012fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	4810      	ldr	r0, [pc, #64]	; (8000584 <fsmManualModeRun+0x138>)
 8000542:	f000 fedb 	bl	80012fc <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff ff2e 	bl	80003a8 <isButtonPressed>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d002      	beq.n	8000558 <fsmManualModeRun+0x10c>
		{
			mode = MAN_RED;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <fsmManualModeRun+0x130>)
 8000554:	2206      	movs	r2, #6
 8000556:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff ff25 	bl	80003a8 <isButtonPressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d007      	beq.n	8000574 <fsmManualModeRun+0x128>
		{
			mode = INC_YELLOW;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <fsmManualModeRun+0x130>)
 8000566:	220b      	movs	r2, #11
 8000568:	601a      	str	r2, [r3, #0]
		}
		break;
 800056a:	e003      	b.n	8000574 <fsmManualModeRun+0x128>
		break;
 800056c:	bf00      	nop
 800056e:	e002      	b.n	8000576 <fsmManualModeRun+0x12a>
		break;
 8000570:	bf00      	nop
 8000572:	e000      	b.n	8000576 <fsmManualModeRun+0x12a>
		break;
 8000574:	bf00      	nop
	}
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000044 	.word	0x20000044
 8000580:	40010800 	.word	0x40010800
 8000584:	40010c00 	.word	0x40010c00

08000588 <fsmPedestrianModeRun>:
#include "fsm_pedestrian_mode.h"

void fsmPedestrianModeRun() {
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	// TODO
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <fsmTuningModeRun>:
#include "fsm_tuning_mode.h"

int time_count = 0;

void fsmTuningModeRun() {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	// FSM for TUNING MODE

	switch (mode) {
 8000598:	4b5e      	ldr	r3, [pc, #376]	; (8000714 <fsmTuningModeRun+0x180>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b0b      	cmp	r3, #11
 800059e:	d077      	beq.n	8000690 <fsmTuningModeRun+0xfc>
 80005a0:	2b0b      	cmp	r3, #11
 80005a2:	f300 80ad 	bgt.w	8000700 <fsmTuningModeRun+0x16c>
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d002      	beq.n	80005b0 <fsmTuningModeRun+0x1c>
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d038      	beq.n	8000620 <fsmTuningModeRun+0x8c>
			}

			break;

		default:
			break;
 80005ae:	e0a7      	b.n	8000700 <fsmTuningModeRun+0x16c>
			if (isButtonPressed(BUTTON_MODE)) {
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff fef9 	bl	80003a8 <isButtonPressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <fsmTuningModeRun+0x2e>
				mode = AUTO_MODE;
 80005bc:	4b55      	ldr	r3, [pc, #340]	; (8000714 <fsmTuningModeRun+0x180>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 80005c2:	2001      	movs	r0, #1
 80005c4:	f7ff fef0 	bl	80003a8 <isButtonPressed>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d007      	beq.n	80005de <fsmTuningModeRun+0x4a>
				RED_time = time_count * 1000;
 80005ce:	4b52      	ldr	r3, [pc, #328]	; (8000718 <fsmTuningModeRun+0x184>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d6:	fb02 f303 	mul.w	r3, r2, r3
 80005da:	4a50      	ldr	r2, [pc, #320]	; (800071c <fsmTuningModeRun+0x188>)
 80005dc:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 80005de:	2002      	movs	r0, #2
 80005e0:	f7ff fee2 	bl	80003a8 <isButtonPressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d106      	bne.n	80005f8 <fsmTuningModeRun+0x64>
 80005ea:	2002      	movs	r0, #2
 80005ec:	f7ff fef6 	bl	80003dc <isButtonLongPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	f000 8086 	beq.w	8000704 <fsmTuningModeRun+0x170>
				time_count %= 100;
 80005f8:	4b47      	ldr	r3, [pc, #284]	; (8000718 <fsmTuningModeRun+0x184>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <fsmTuningModeRun+0x18c>)
 80005fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000602:	1159      	asrs	r1, r3, #5
 8000604:	17d3      	asrs	r3, r2, #31
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	2164      	movs	r1, #100	; 0x64
 800060a:	fb01 f303 	mul.w	r3, r1, r3
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	4a41      	ldr	r2, [pc, #260]	; (8000718 <fsmTuningModeRun+0x184>)
 8000612:	6013      	str	r3, [r2, #0]
				time_count++;
 8000614:	4b40      	ldr	r3, [pc, #256]	; (8000718 <fsmTuningModeRun+0x184>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a3f      	ldr	r2, [pc, #252]	; (8000718 <fsmTuningModeRun+0x184>)
 800061c:	6013      	str	r3, [r2, #0]
			break;
 800061e:	e071      	b.n	8000704 <fsmTuningModeRun+0x170>
			if (isButtonPressed(BUTTON_MODE)) {
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fec1 	bl	80003a8 <isButtonPressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <fsmTuningModeRun+0x9e>
				mode = AUTO_MODE;
 800062c:	4b39      	ldr	r3, [pc, #228]	; (8000714 <fsmTuningModeRun+0x180>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff feb8 	bl	80003a8 <isButtonPressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <fsmTuningModeRun+0xba>
				GREEN_time = time_count * 1000;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <fsmTuningModeRun+0x184>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	4a36      	ldr	r2, [pc, #216]	; (8000724 <fsmTuningModeRun+0x190>)
 800064c:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff feaa 	bl	80003a8 <isButtonPressed>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d105      	bne.n	8000666 <fsmTuningModeRun+0xd2>
 800065a:	2002      	movs	r0, #2
 800065c:	f7ff febe 	bl	80003dc <isButtonLongPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d050      	beq.n	8000708 <fsmTuningModeRun+0x174>
				time_count %= 90;
 8000666:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <fsmTuningModeRun+0x184>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a2f      	ldr	r2, [pc, #188]	; (8000728 <fsmTuningModeRun+0x194>)
 800066c:	fb82 1203 	smull	r1, r2, r2, r3
 8000670:	441a      	add	r2, r3
 8000672:	1191      	asrs	r1, r2, #6
 8000674:	17da      	asrs	r2, r3, #31
 8000676:	1a8a      	subs	r2, r1, r2
 8000678:	215a      	movs	r1, #90	; 0x5a
 800067a:	fb01 f202 	mul.w	r2, r1, r2
 800067e:	1a9a      	subs	r2, r3, r2
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <fsmTuningModeRun+0x184>)
 8000682:	601a      	str	r2, [r3, #0]
				time_count++;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <fsmTuningModeRun+0x184>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a23      	ldr	r2, [pc, #140]	; (8000718 <fsmTuningModeRun+0x184>)
 800068c:	6013      	str	r3, [r2, #0]
			break;
 800068e:	e03b      	b.n	8000708 <fsmTuningModeRun+0x174>
			if (isButtonPressed(BUTTON_MODE)) {
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fe89 	bl	80003a8 <isButtonPressed>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <fsmTuningModeRun+0x10e>
				mode = AUTO_MODE;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <fsmTuningModeRun+0x180>)
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff fe80 	bl	80003a8 <isButtonPressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <fsmTuningModeRun+0x12a>
				YELLOW_time = time_count * 1000;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <fsmTuningModeRun+0x184>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b6:	fb02 f303 	mul.w	r3, r2, r3
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <fsmTuningModeRun+0x198>)
 80006bc:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 80006be:	2002      	movs	r0, #2
 80006c0:	f7ff fe72 	bl	80003a8 <isButtonPressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d105      	bne.n	80006d6 <fsmTuningModeRun+0x142>
 80006ca:	2002      	movs	r0, #2
 80006cc:	f7ff fe86 	bl	80003dc <isButtonLongPressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01a      	beq.n	800070c <fsmTuningModeRun+0x178>
				time_count %= 10;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <fsmTuningModeRun+0x184>)
 80006d8:	6819      	ldr	r1, [r3, #0]
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <fsmTuningModeRun+0x19c>)
 80006dc:	fb83 2301 	smull	r2, r3, r3, r1
 80006e0:	109a      	asrs	r2, r3, #2
 80006e2:	17cb      	asrs	r3, r1, #31
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	1aca      	subs	r2, r1, r3
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <fsmTuningModeRun+0x184>)
 80006f2:	601a      	str	r2, [r3, #0]
				time_count++;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <fsmTuningModeRun+0x184>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <fsmTuningModeRun+0x184>)
 80006fc:	6013      	str	r3, [r2, #0]
			break;
 80006fe:	e005      	b.n	800070c <fsmTuningModeRun+0x178>
			break;
 8000700:	bf00      	nop
 8000702:	e004      	b.n	800070e <fsmTuningModeRun+0x17a>
			break;
 8000704:	bf00      	nop
 8000706:	e002      	b.n	800070e <fsmTuningModeRun+0x17a>
			break;
 8000708:	bf00      	nop
 800070a:	e000      	b.n	800070e <fsmTuningModeRun+0x17a>
			break;
 800070c:	bf00      	nop
	}
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000044 	.word	0x20000044
 8000718:	20000040 	.word	0x20000040
 800071c:	20000004 	.word	0x20000004
 8000720:	51eb851f 	.word	0x51eb851f
 8000724:	20000008 	.word	0x20000008
 8000728:	b60b60b7 	.word	0xb60b60b7
 800072c:	2000000c 	.word	0x2000000c
 8000730:	66666667 	.word	0x66666667

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 faec 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f814 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 f8f4 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000744:	f000 f8c8 	bl	80008d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000748:	f000 f850 	bl	80007ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <main+0x30>)
 800074e:	f001 fa79 	bl	8001c44 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsmAutoModeRun();
 8000752:	f7ff fe5d 	bl	8000410 <fsmAutoModeRun>
	  fsmManualModeRun();
 8000756:	f7ff fe79 	bl	800044c <fsmManualModeRun>
	  fsmTuningModeRun();
 800075a:	f7ff ff1b 	bl	8000594 <fsmTuningModeRun>
	  fsmPedestrianModeRun();
 800075e:	f7ff ff13 	bl	8000588 <fsmPedestrianModeRun>
  {
 8000762:	e7f6      	b.n	8000752 <main+0x1e>
 8000764:	20000088 	.word	0x20000088

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b090      	sub	sp, #64	; 0x40
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2228      	movs	r2, #40	; 0x28
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f86e 	bl	8002858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800079e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0318 	add.w	r3, r7, #24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fde1 	bl	8001370 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007b4:	f000 f95a 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f84c 	bl	8001870 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007de:	f000 f945 	bl	8000a6c <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3740      	adds	r7, #64	; 0x40
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <MX_TIM3_Init+0xe4>)
 800081e:	4a2d      	ldr	r2, [pc, #180]	; (80008d4 <MX_TIM3_Init+0xe8>)
 8000820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_TIM3_Init+0xe4>)
 8000824:	223f      	movs	r2, #63	; 0x3f
 8000826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <MX_TIM3_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_TIM3_Init+0xe4>)
 8000830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_TIM3_Init+0xe4>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_TIM3_Init+0xe4>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000842:	4823      	ldr	r0, [pc, #140]	; (80008d0 <MX_TIM3_Init+0xe4>)
 8000844:	f001 f9ae 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800084e:	f000 f90d 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085c:	4619      	mov	r1, r3
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <MX_TIM3_Init+0xe4>)
 8000860:	f001 fb58 	bl	8001f14 <HAL_TIM_ConfigClockSource>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800086a:	f000 f8ff 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800086e:	4818      	ldr	r0, [pc, #96]	; (80008d0 <MX_TIM3_Init+0xe4>)
 8000870:	f001 fa3a 	bl	8001ce8 <HAL_TIM_PWM_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800087a:	f000 f8f7 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	4619      	mov	r1, r3
 800088c:	4810      	ldr	r0, [pc, #64]	; (80008d0 <MX_TIM3_Init+0xe4>)
 800088e:	f001 fe85 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000898:	f000 f8e8 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM3_Init+0xe4>)
 80008b4:	f001 fa70 	bl	8001d98 <HAL_TIM_PWM_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008be:	f000 f8d5 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM3_Init+0xe4>)
 80008c4:	f000 f928 	bl	8000b18 <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3738      	adds	r7, #56	; 0x38
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000088 	.word	0x20000088
 80008d4:	40000400 	.word	0x40000400

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f001 fea2 	bl	8002658 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f8a7 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000d0 	.word	0x200000d0
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <MX_GPIO_Init+0x12c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <MX_GPIO_Init+0x12c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <MX_GPIO_Init+0x12c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <MX_GPIO_Init+0x12c>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a3e      	ldr	r2, [pc, #248]	; (8000a58 <MX_GPIO_Init+0x12c>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <MX_GPIO_Init+0x12c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <MX_GPIO_Init+0x12c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <MX_GPIO_Init+0x12c>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <MX_GPIO_Init+0x12c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <MX_GPIO_Init+0x12c>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <MX_GPIO_Init+0x12c>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_GPIO_Init+0x12c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_GREEN_P_Pin|LED_RED_1_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80009a6:	482d      	ldr	r0, [pc, #180]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009a8:	f000 fca8 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_P_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin|LED_RED_2_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80009b2:	482b      	ldr	r0, [pc, #172]	; (8000a60 <MX_GPIO_Init+0x134>)
 80009b4:	f000 fca2 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x138>)
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <MX_GPIO_Init+0x13c>)
 80009ce:	f000 fb11 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_PED_Pin BUTTON_MODE_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_PED_Pin|BUTTON_MODE_Pin|BUTTON_SET_Pin;
 80009d2:	2313      	movs	r3, #19
 80009d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4619      	mov	r1, r3
 80009e4:	481d      	ldr	r0, [pc, #116]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009e6:	f000 fb05 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_GREEN_P_Pin LED_RED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_GREEN_P_Pin|LED_RED_1_Pin;
 80009ea:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	4816      	ldr	r0, [pc, #88]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000a04:	f000 faf6 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INC_Pin */
  GPIO_InitStruct.Pin = BUTTON_INC_Pin;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INC_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_GPIO_Init+0x134>)
 8000a1c:	f000 faea 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_P_Pin LED_GREEN_1_Pin LED_GREEN_2_Pin LED_RED_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_P_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin|LED_RED_2_Pin;
 8000a20:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <MX_GPIO_Init+0x134>)
 8000a3a:	f000 fadb 	bl	8000ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2028      	movs	r0, #40	; 0x28
 8000a44:	f000 fa9f 	bl	8000f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a48:	2028      	movs	r0, #40	; 0x28
 8000a4a:	f000 fab8 	bl	8000fbe <HAL_NVIC_EnableIRQ>

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	10110000 	.word	0x10110000
 8000a68:	40011000 	.word	0x40011000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_MspInit+0x5c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_MspInit+0x5c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_MspInit+0x5c>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x5c>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_MspInit+0x5c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x5c>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_MspInit+0x60>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_MspInit+0x60>)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010000 	.word	0x40010000

08000adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_TIM_Base_MspInit+0x34>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10b      	bne.n	8000b06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_TIM_Base_MspInit+0x38>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_TIM_Base_MspInit+0x38>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_TIM_Base_MspInit+0x38>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40000400 	.word	0x40000400
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_TIM_MspPostInit+0x58>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d117      	bne.n	8000b68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_TIM_MspPostInit+0x5c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_TIM_MspPostInit+0x5c>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_TIM_MspPostInit+0x5c>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_TIM_MspPostInit+0x60>)
 8000b64:	f000 fa46 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40000400 	.word	0x40000400
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x70>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d123      	bne.n	8000be4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_UART_MspInit+0x74>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_UART_MspInit+0x74>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_UART_MspInit+0x74>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_UART_MspInit+0x74>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_UART_MspInit+0x74>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_UART_MspInit+0x74>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bcc:	230c      	movs	r3, #12
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_UART_MspInit+0x78>)
 8000be0:	f000 fa08 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f8af 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c4e:	f000 fb6d 	bl	800132c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
	...

08000c64 <isTimerUp>:

int currentCounter(int timer) {
	return timer_counter[timer];
}

int isTimerUp(int timer) {
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <isTimerUp+0x24>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	bf0c      	ite	eq
 8000c78:	2301      	moveq	r3, #1
 8000c7a:	2300      	movne	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000120 	.word	0x20000120

08000c8c <setTimer>:

void setTimer(int timer, int duration){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration / timer_cycle;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <setTimer+0x30>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <setTimer+0x34>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <setTimer+0x38>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2100      	movs	r1, #0
 8000cae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000114 	.word	0x20000114
 8000cc4:	20000120 	.word	0x20000120

08000cc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cee:	f7ff ffb2 	bl	8000c56 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f001 fd8d 	bl	8002810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fd1d 	bl	8000734 <main>
  bx lr
 8000cfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d04:	080028b0 	.word	0x080028b0
  ldr r2, =_sbss
 8000d08:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d0c:	20000130 	.word	0x20000130

08000d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_2_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x28>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x28>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f923 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fea2 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f93b 	bl	8000fda <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f903 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000010 	.word	0x20000010
 8000d98:	20000018 	.word	0x20000018
 8000d9c:	20000014 	.word	0x20000014

08000da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x1c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_IncTick+0x20>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <HAL_IncTick+0x20>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000018 	.word	0x20000018
 8000dc0:	2000012c 	.word	0x2000012c

08000dc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <HAL_GetTick+0x10>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	2000012c 	.word	0x2000012c

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4906      	ldr	r1, [pc, #24]	; (8000e70 <__NVIC_EnableIRQ+0x34>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff90 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff2d 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff42 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff90 	bl	8000ec8 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5f 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff35 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b08b      	sub	sp, #44	; 0x2c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	e169      	b.n	80012dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001008:	2201      	movs	r2, #1
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8158 	bne.w	80012d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a9a      	ldr	r2, [pc, #616]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d05e      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001030:	4a98      	ldr	r2, [pc, #608]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d875      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001036:	4a98      	ldr	r2, [pc, #608]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d058      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 800103c:	4a96      	ldr	r2, [pc, #600]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d86f      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001042:	4a96      	ldr	r2, [pc, #600]	; (800129c <HAL_GPIO_Init+0x2a8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d052      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001048:	4a94      	ldr	r2, [pc, #592]	; (800129c <HAL_GPIO_Init+0x2a8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d869      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800104e:	4a94      	ldr	r2, [pc, #592]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d04c      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001054:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d863      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800105a:	4a92      	ldr	r2, [pc, #584]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d046      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001060:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d85d      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001066:	2b12      	cmp	r3, #18
 8001068:	d82a      	bhi.n	80010c0 <HAL_GPIO_Init+0xcc>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d859      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <HAL_GPIO_Init+0x80>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	080010ef 	.word	0x080010ef
 8001078:	080010c9 	.word	0x080010c9
 800107c:	080010db 	.word	0x080010db
 8001080:	0800111d 	.word	0x0800111d
 8001084:	08001123 	.word	0x08001123
 8001088:	08001123 	.word	0x08001123
 800108c:	08001123 	.word	0x08001123
 8001090:	08001123 	.word	0x08001123
 8001094:	08001123 	.word	0x08001123
 8001098:	08001123 	.word	0x08001123
 800109c:	08001123 	.word	0x08001123
 80010a0:	08001123 	.word	0x08001123
 80010a4:	08001123 	.word	0x08001123
 80010a8:	08001123 	.word	0x08001123
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001123 	.word	0x08001123
 80010b4:	08001123 	.word	0x08001123
 80010b8:	080010d1 	.word	0x080010d1
 80010bc:	080010e5 	.word	0x080010e5
 80010c0:	4a79      	ldr	r2, [pc, #484]	; (80012a8 <HAL_GPIO_Init+0x2b4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c6:	e02c      	b.n	8001122 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e029      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	3304      	adds	r3, #4
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e024      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	3308      	adds	r3, #8
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e01f      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	330c      	adds	r3, #12
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e01a      	b.n	8001124 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f6:	2304      	movs	r3, #4
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e013      	b.n	8001124 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	611a      	str	r2, [r3, #16]
          break;
 800110e:	e009      	b.n	8001124 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001110:	2308      	movs	r3, #8
 8001112:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	615a      	str	r2, [r3, #20]
          break;
 800111a:	e003      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x130>
          break;
 8001122:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2bff      	cmp	r3, #255	; 0xff
 8001128:	d801      	bhi.n	800112e <HAL_GPIO_Init+0x13a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	e001      	b.n	8001132 <HAL_GPIO_Init+0x13e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3304      	adds	r3, #4
 8001132:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d802      	bhi.n	8001140 <HAL_GPIO_Init+0x14c>
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x152>
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3b08      	subs	r3, #8
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	210f      	movs	r1, #15
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	6a39      	ldr	r1, [r7, #32]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80b1 	beq.w	80012d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <HAL_GPIO_Init+0x2c0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d013      	beq.n	80011e0 <HAL_GPIO_Init+0x1ec>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00d      	beq.n	80011dc <HAL_GPIO_Init+0x1e8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_Init+0x1e0>
 80011d0:	2303      	movs	r3, #3
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d4:	2304      	movs	r3, #4
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011e0:	2300      	movs	r3, #0
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	492c      	ldr	r1, [pc, #176]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	4928      	ldr	r1, [pc, #160]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001224:	4013      	ands	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4922      	ldr	r1, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	43db      	mvns	r3, r3
 800124a:	491e      	ldr	r1, [pc, #120]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800124c:	4013      	ands	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4918      	ldr	r1, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4914      	ldr	r1, [pc, #80]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	490e      	ldr	r1, [pc, #56]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e021      	b.n	80012d6 <HAL_GPIO_Init+0x2e2>
 8001292:	bf00      	nop
 8001294:	10320000 	.word	0x10320000
 8001298:	10310000 	.word	0x10310000
 800129c:	10220000 	.word	0x10220000
 80012a0:	10210000 	.word	0x10210000
 80012a4:	10120000 	.word	0x10120000
 80012a8:	10110000 	.word	0x10110000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40011400 	.word	0x40011400
 80012c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3301      	adds	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f47f ae8e 	bne.w	8001008 <HAL_GPIO_Init+0x14>
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	372c      	adds	r7, #44	; 0x2c
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	611a      	str	r2, [r3, #16]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f806 	bl	800135c <HAL_GPIO_EXTI_Callback>
  }
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40010400 	.word	0x40010400

0800135c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e26c      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8087 	beq.w	800149e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001390:	4b92      	ldr	r3, [pc, #584]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b04      	cmp	r3, #4
 800139a:	d00c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800139c:	4b8f      	ldr	r3, [pc, #572]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d112      	bne.n	80013ce <HAL_RCC_OscConfig+0x5e>
 80013a8:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d10b      	bne.n	80013ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d06c      	beq.n	800149c <HAL_RCC_OscConfig+0x12c>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d168      	bne.n	800149c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e246      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x76>
 80013d8:	4b80      	ldr	r3, [pc, #512]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a7f      	ldr	r2, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e02e      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x98>
 80013ee:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7a      	ldr	r2, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b78      	ldr	r3, [pc, #480]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a77      	ldr	r2, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0xbc>
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a71      	ldr	r2, [pc, #452]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6e      	ldr	r2, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 800142c:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a67      	ldr	r2, [pc, #412]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fcba 	bl	8000dc4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fcb6 	bl	8000dc4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1fa      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0xe4>
 8001472:	e014      	b.n	800149e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fca6 	bl	8000dc4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fca2 	bl	8000dc4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1e6      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x10c>
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d063      	beq.n	8001572 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014aa:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014b6:	4b49      	ldr	r3, [pc, #292]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d11c      	bne.n	80014fc <HAL_RCC_OscConfig+0x18c>
 80014c2:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d116      	bne.n	80014fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x176>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e1ba      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4939      	ldr	r1, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	e03a      	b.n	8001572 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d020      	beq.n	8001546 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <HAL_RCC_OscConfig+0x270>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fc5b 	bl	8000dc4 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fc57 	bl	8000dc4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e19b      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4927      	ldr	r1, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_RCC_OscConfig+0x270>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fc3a 	bl	8000dc4 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001554:	f7ff fc36 	bl	8000dc4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e17a      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d03a      	beq.n	80015f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d019      	beq.n	80015ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_RCC_OscConfig+0x274>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fc1a 	bl	8000dc4 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff fc16 	bl	8000dc4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e15a      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 fad8 	bl	8001b68 <RCC_Delay>
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x274>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff fc00 	bl	8000dc4 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c6:	e00f      	b.n	80015e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff fbfc 	bl	8000dc4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d908      	bls.n	80015e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e140      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	42420000 	.word	0x42420000
 80015e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b9e      	ldr	r3, [pc, #632]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e9      	bne.n	80015c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a6 	beq.w	800174e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b97      	ldr	r3, [pc, #604]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10d      	bne.n	800162e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b94      	ldr	r3, [pc, #592]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a93      	ldr	r2, [pc, #588]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b91      	ldr	r3, [pc, #580]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b8e      	ldr	r3, [pc, #568]	; (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b8b      	ldr	r3, [pc, #556]	; (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a8a      	ldr	r2, [pc, #552]	; (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fbbd 	bl	8000dc4 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fbb9 	bl	8000dc4 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e0fd      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b81      	ldr	r3, [pc, #516]	; (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x312>
 8001674:	4b7b      	ldr	r3, [pc, #492]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a7a      	ldr	r2, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	e02d      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x334>
 800168a:	4b76      	ldr	r3, [pc, #472]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a75      	ldr	r2, [pc, #468]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a72      	ldr	r2, [pc, #456]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e01c      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x356>
 80016ac:	4b6d      	ldr	r3, [pc, #436]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a6c      	ldr	r2, [pc, #432]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a69      	ldr	r2, [pc, #420]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a66      	ldr	r2, [pc, #408]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b64      	ldr	r3, [pc, #400]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a63      	ldr	r2, [pc, #396]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d015      	beq.n	8001712 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb6d 	bl	8000dc4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fb69 	bl	8000dc4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0ab      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	4b57      	ldr	r3, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0ee      	beq.n	80016ee <HAL_RCC_OscConfig+0x37e>
 8001710:	e014      	b.n	800173c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fb57 	bl	8000dc4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fb53 	bl	8000dc4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e095      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001742:	4b48      	ldr	r3, [pc, #288]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8081 	beq.w	800185a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	4b42      	ldr	r3, [pc, #264]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d061      	beq.n	8001828 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d146      	bne.n	80017fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_OscConfig+0x4fc>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb27 	bl	8000dc4 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fb23 	bl	8000dc4 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e067      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178c:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a0:	d108      	bne.n	80017b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a2:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	492d      	ldr	r1, [pc, #180]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a19      	ldr	r1, [r3, #32]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	430b      	orrs	r3, r1
 80017c6:	4927      	ldr	r1, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_RCC_OscConfig+0x4fc>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff faf7 	bl	8000dc4 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff faf3 	bl	8000dc4 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e037      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x46a>
 80017f8:	e02f      	b.n	800185a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_RCC_OscConfig+0x4fc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fae0 	bl	8000dc4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fadc 	bl	8000dc4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e020      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x498>
 8001826:	e018      	b.n	800185a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e013      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	429a      	cmp	r2, r3
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
 800186c:	42420060 	.word	0x42420060

08001870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0d0      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d910      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 0207 	bic.w	r2, r3, #7
 800189a:	4965      	ldr	r1, [pc, #404]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0b8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	494d      	ldr	r1, [pc, #308]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d040      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d115      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e07f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e073      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e06b      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4936      	ldr	r1, [pc, #216]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fa30 	bl	8000dc4 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fa2c 	bl	8000dc4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e053      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d210      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 0207 	bic.w	r2, r3, #7
 80019a6:	4922      	ldr	r1, [pc, #136]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e032      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4916      	ldr	r1, [pc, #88]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fe:	f000 f821 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	490a      	ldr	r1, [pc, #40]	; (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	5ccb      	ldrb	r3, [r1, r3]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1cc>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1d0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f98e 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08002890 	.word	0x08002890
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	20000014 	.word	0x20000014

08001a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	b490      	push	{r4, r7}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a4c:	1d3c      	adds	r4, r7, #4
 8001a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a54:	f240 2301 	movw	r3, #513	; 0x201
 8001a58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d002      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_GetSysClockFreq+0x46>
 8001a82:	e02d      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a86:	623b      	str	r3, [r7, #32]
      break;
 8001a88:	e02d      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a96:	4413      	add	r3, r2
 8001a98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	0c5b      	lsrs	r3, r3, #17
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001abc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac2:	fb02 f203 	mul.w	r2, r2, r3
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e004      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	623b      	str	r3, [r7, #32]
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae2:	623b      	str	r3, [r7, #32]
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc90      	pop	{r4, r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	08002880 	.word	0x08002880
 8001af8:	40021000 	.word	0x40021000
 8001afc:	007a1200 	.word	0x007a1200
 8001b00:	003d0900 	.word	0x003d0900

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	20000010 	.word	0x20000010

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff2 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	080028a0 	.word	0x080028a0

08001b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	0adb      	lsrs	r3, r3, #11
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	080028a0 	.word	0x080028a0

08001b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <RCC_Delay+0x34>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <RCC_Delay+0x38>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0a5b      	lsrs	r3, r3, #9
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b84:	bf00      	nop
  }
  while (Delay --);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	60fa      	str	r2, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f9      	bne.n	8001b84 <RCC_Delay+0x1c>
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	20000010 	.word	0x20000010
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e041      	b.n	8001c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe ff86 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f000 fa5a 	bl	800209c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e03a      	b.n	8001cd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_TIM_Base_Start_IT+0x98>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00e      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x58>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d009      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x58>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x58>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d111      	bne.n	8001cc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d010      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbe:	e007      	b.n	8001cd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40012c00 	.word	0x40012c00
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800

08001ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e041      	b.n	8001d7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f839 	bl	8001d86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f000 f9b8 	bl	800209c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e0ac      	b.n	8001f0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	f200 809f 	bhi.w	8001f00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001dfd 	.word	0x08001dfd
 8001dcc:	08001f01 	.word	0x08001f01
 8001dd0:	08001f01 	.word	0x08001f01
 8001dd4:	08001f01 	.word	0x08001f01
 8001dd8:	08001e3d 	.word	0x08001e3d
 8001ddc:	08001f01 	.word	0x08001f01
 8001de0:	08001f01 	.word	0x08001f01
 8001de4:	08001f01 	.word	0x08001f01
 8001de8:	08001e7f 	.word	0x08001e7f
 8001dec:	08001f01 	.word	0x08001f01
 8001df0:	08001f01 	.word	0x08001f01
 8001df4:	08001f01 	.word	0x08001f01
 8001df8:	08001ebf 	.word	0x08001ebf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f9ac 	bl	8002160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0208 	orr.w	r2, r2, #8
 8001e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0204 	bic.w	r2, r2, #4
 8001e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6999      	ldr	r1, [r3, #24]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	619a      	str	r2, [r3, #24]
      break;
 8001e3a:	e062      	b.n	8001f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f9f2 	bl	800222c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6999      	ldr	r1, [r3, #24]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	021a      	lsls	r2, r3, #8
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	619a      	str	r2, [r3, #24]
      break;
 8001e7c:	e041      	b.n	8001f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fa3b 	bl	8002300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0208 	orr.w	r2, r2, #8
 8001e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0204 	bic.w	r2, r2, #4
 8001ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69d9      	ldr	r1, [r3, #28]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	61da      	str	r2, [r3, #28]
      break;
 8001ebc:	e021      	b.n	8001f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa85 	bl	80023d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69d9      	ldr	r1, [r3, #28]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	021a      	lsls	r2, r3, #8
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	61da      	str	r2, [r3, #28]
      break;
 8001efe:	e000      	b.n	8001f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_TIM_ConfigClockSource+0x18>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e0b3      	b.n	8002094 <HAL_TIM_ConfigClockSource+0x180>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f64:	d03e      	beq.n	8001fe4 <HAL_TIM_ConfigClockSource+0xd0>
 8001f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6a:	f200 8087 	bhi.w	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f72:	f000 8085 	beq.w	8002080 <HAL_TIM_ConfigClockSource+0x16c>
 8001f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7a:	d87f      	bhi.n	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001f7c:	2b70      	cmp	r3, #112	; 0x70
 8001f7e:	d01a      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0xa2>
 8001f80:	2b70      	cmp	r3, #112	; 0x70
 8001f82:	d87b      	bhi.n	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001f84:	2b60      	cmp	r3, #96	; 0x60
 8001f86:	d050      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x116>
 8001f88:	2b60      	cmp	r3, #96	; 0x60
 8001f8a:	d877      	bhi.n	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001f8c:	2b50      	cmp	r3, #80	; 0x50
 8001f8e:	d03c      	beq.n	800200a <HAL_TIM_ConfigClockSource+0xf6>
 8001f90:	2b50      	cmp	r3, #80	; 0x50
 8001f92:	d873      	bhi.n	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d058      	beq.n	800204a <HAL_TIM_ConfigClockSource+0x136>
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	d86f      	bhi.n	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001f9c:	2b30      	cmp	r3, #48	; 0x30
 8001f9e:	d064      	beq.n	800206a <HAL_TIM_ConfigClockSource+0x156>
 8001fa0:	2b30      	cmp	r3, #48	; 0x30
 8001fa2:	d86b      	bhi.n	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d060      	beq.n	800206a <HAL_TIM_ConfigClockSource+0x156>
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d867      	bhi.n	800207c <HAL_TIM_ConfigClockSource+0x168>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05c      	beq.n	800206a <HAL_TIM_ConfigClockSource+0x156>
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d05a      	beq.n	800206a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001fb4:	e062      	b.n	800207c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6899      	ldr	r1, [r3, #8]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f000 faca 	bl	800255e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	609a      	str	r2, [r3, #8]
      break;
 8001fe2:	e04e      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f000 fab3 	bl	800255e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002006:	609a      	str	r2, [r3, #8]
      break;
 8002008:	e03b      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	461a      	mov	r2, r3
 8002018:	f000 fa2a 	bl	8002470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2150      	movs	r1, #80	; 0x50
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fa81 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 8002028:	e02b      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	461a      	mov	r2, r3
 8002038:	f000 fa48 	bl	80024cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2160      	movs	r1, #96	; 0x60
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fa71 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 8002048:	e01b      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	461a      	mov	r2, r3
 8002058:	f000 fa0a 	bl	8002470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fa61 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 8002068:	e00b      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f000 fa58 	bl	800252a <TIM_ITRx_SetConfig>
        break;
 800207a:	e002      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800207c:	bf00      	nop
 800207e:	e000      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002080:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a29      	ldr	r2, [pc, #164]	; (8002154 <TIM_Base_SetConfig+0xb8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00b      	beq.n	80020cc <TIM_Base_SetConfig+0x30>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d007      	beq.n	80020cc <TIM_Base_SetConfig+0x30>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a26      	ldr	r2, [pc, #152]	; (8002158 <TIM_Base_SetConfig+0xbc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0x30>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <TIM_Base_SetConfig+0xc0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <TIM_Base_SetConfig+0xb8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00b      	beq.n	80020fe <TIM_Base_SetConfig+0x62>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d007      	beq.n	80020fe <TIM_Base_SetConfig+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <TIM_Base_SetConfig+0xbc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d003      	beq.n	80020fe <TIM_Base_SetConfig+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <TIM_Base_SetConfig+0xc0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d108      	bne.n	8002110 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <TIM_Base_SetConfig+0xb8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d103      	bne.n	8002144 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	615a      	str	r2, [r3, #20]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	40012c00 	.word	0x40012c00
 8002158:	40000400 	.word	0x40000400
 800215c:	40000800 	.word	0x40000800

08002160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f023 0201 	bic.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f023 0302 	bic.w	r3, r3, #2
 80021a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <TIM_OC1_SetConfig+0xc8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10c      	bne.n	80021d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f023 0308 	bic.w	r3, r3, #8
 80021c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a13      	ldr	r2, [pc, #76]	; (8002228 <TIM_OC1_SetConfig+0xc8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d111      	bne.n	8002202 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	621a      	str	r2, [r3, #32]
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40012c00 	.word	0x40012c00

0800222c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f023 0210 	bic.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f023 0320 	bic.w	r3, r3, #32
 8002276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <TIM_OC2_SetConfig+0xd0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d10d      	bne.n	80022a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a14      	ldr	r2, [pc, #80]	; (80022fc <TIM_OC2_SetConfig+0xd0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d113      	bne.n	80022d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	621a      	str	r2, [r3, #32]
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40012c00 	.word	0x40012c00

08002300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <TIM_OC3_SetConfig+0xd0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10d      	bne.n	800237a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <TIM_OC3_SetConfig+0xd0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d113      	bne.n	80023aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	621a      	str	r2, [r3, #32]
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40012c00 	.word	0x40012c00

080023d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800241e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	031b      	lsls	r3, r3, #12
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <TIM_OC4_SetConfig+0x98>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d109      	bne.n	8002448 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	621a      	str	r2, [r3, #32]
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40012c00 	.word	0x40012c00

08002470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f023 0201 	bic.w	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f023 030a 	bic.w	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	621a      	str	r2, [r3, #32]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f023 0210 	bic.w	r2, r3, #16
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	031b      	lsls	r3, r3, #12
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	621a      	str	r2, [r3, #32]
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	f043 0307 	orr.w	r3, r3, #7
 800254c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800255e:	b480      	push	{r7}
 8002560:	b087      	sub	sp, #28
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002578:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4313      	orrs	r3, r2
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	609a      	str	r2, [r3, #8]
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e046      	b.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d009      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10c      	bne.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800

08002658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e03f      	b.n	80026ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fa7c 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800269a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f829 	bl	80026f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800272e:	f023 030c 	bic.w	r3, r3, #12
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	430b      	orrs	r3, r1
 800273a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2c      	ldr	r2, [pc, #176]	; (8002808 <UART_SetConfig+0x114>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d103      	bne.n	8002764 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800275c:	f7ff f9f0 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	e002      	b.n	800276a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002764:	f7ff f9d8 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002768:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009a      	lsls	r2, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	4a22      	ldr	r2, [pc, #136]	; (800280c <UART_SetConfig+0x118>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	0119      	lsls	r1, r3, #4
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009a      	lsls	r2, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <UART_SetConfig+0x118>)
 80027a2:	fba3 0302 	umull	r0, r3, r3, r2
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2064      	movs	r0, #100	; 0x64
 80027aa:	fb00 f303 	mul.w	r3, r0, r3
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	3332      	adds	r3, #50	; 0x32
 80027b4:	4a15      	ldr	r2, [pc, #84]	; (800280c <UART_SetConfig+0x118>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c0:	4419      	add	r1, r3
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009a      	lsls	r2, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <UART_SetConfig+0x118>)
 80027da:	fba3 0302 	umull	r0, r3, r3, r2
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2064      	movs	r0, #100	; 0x64
 80027e2:	fb00 f303 	mul.w	r3, r0, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	3332      	adds	r3, #50	; 0x32
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <UART_SetConfig+0x118>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	f003 020f 	and.w	r2, r3, #15
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	440a      	add	r2, r1
 80027fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40013800 	.word	0x40013800
 800280c:	51eb851f 	.word	0x51eb851f

08002810 <__libc_init_array>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	2600      	movs	r6, #0
 8002814:	4d0c      	ldr	r5, [pc, #48]	; (8002848 <__libc_init_array+0x38>)
 8002816:	4c0d      	ldr	r4, [pc, #52]	; (800284c <__libc_init_array+0x3c>)
 8002818:	1b64      	subs	r4, r4, r5
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	42a6      	cmp	r6, r4
 800281e:	d109      	bne.n	8002834 <__libc_init_array+0x24>
 8002820:	f000 f822 	bl	8002868 <_init>
 8002824:	2600      	movs	r6, #0
 8002826:	4d0a      	ldr	r5, [pc, #40]	; (8002850 <__libc_init_array+0x40>)
 8002828:	4c0a      	ldr	r4, [pc, #40]	; (8002854 <__libc_init_array+0x44>)
 800282a:	1b64      	subs	r4, r4, r5
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	42a6      	cmp	r6, r4
 8002830:	d105      	bne.n	800283e <__libc_init_array+0x2e>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	f855 3b04 	ldr.w	r3, [r5], #4
 8002838:	4798      	blx	r3
 800283a:	3601      	adds	r6, #1
 800283c:	e7ee      	b.n	800281c <__libc_init_array+0xc>
 800283e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002842:	4798      	blx	r3
 8002844:	3601      	adds	r6, #1
 8002846:	e7f2      	b.n	800282e <__libc_init_array+0x1e>
 8002848:	080028a8 	.word	0x080028a8
 800284c:	080028a8 	.word	0x080028a8
 8002850:	080028a8 	.word	0x080028a8
 8002854:	080028ac 	.word	0x080028ac

08002858 <memset>:
 8002858:	4603      	mov	r3, r0
 800285a:	4402      	add	r2, r0
 800285c:	4293      	cmp	r3, r2
 800285e:	d100      	bne.n	8002862 <memset+0xa>
 8002860:	4770      	bx	lr
 8002862:	f803 1b01 	strb.w	r1, [r3], #1
 8002866:	e7f9      	b.n	800285c <memset+0x4>

08002868 <_init>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr

08002874 <_fini>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr
