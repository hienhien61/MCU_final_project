
STM32_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003d7c  08003d7c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d7c  08003d7c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000030  08003db4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003db4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160dd  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c91  00000000  00000000  00036136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00038dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00039b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198e3  00000000  00000000  0003a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115c2  00000000  00000000  0005405b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008add0  00000000  00000000  0006561d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f03ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000352c  00000000  00000000  000f0440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d3c 	.word	0x08003d3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003d3c 	.word	0x08003d3c

0800014c <fsmHorLEDsRun>:
#include "LEDs_display.h"

int horizontal_status = MODE_INIT;
int vertical_status = MODE_INIT;

void fsmHorLEDsRun() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// FSM for horizontal LEDs

	switch (horizontal_status) {
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	d847      	bhi.n	80001e8 <fsmHorLEDsRun+0x9c>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsmHorLEDsRun+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000175 	.word	0x08000175
 8000164:	080001e9 	.word	0x080001e9
 8000168:	08000189 	.word	0x08000189
 800016c:	080001a9 	.word	0x080001a9
 8000170:	080001c9 	.word	0x080001c9
		case MODE_INIT:
			horizontal_status = AUTO_RED;
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000176:	2202      	movs	r2, #2
 8000178:	601a      	str	r2, [r3, #0]
			setTimer(0, RED_time);
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <fsmHorLEDsRun+0xb4>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4619      	mov	r1, r3
 8000180:	2000      	movs	r0, #0
 8000182:	f001 f9d1 	bl	8001528 <setTimer>
			break;
 8000186:	e036      	b.n	80001f6 <fsmHorLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(0)) {
 8000188:	2000      	movs	r0, #0
 800018a:	f001 f9b9 	bl	8001500 <isTimerUp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d02b      	beq.n	80001ec <fsmHorLEDsRun+0xa0>
				horizontal_status = AUTO_GREEN;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000196:	2203      	movs	r2, #3
 8000198:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN_time);
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <fsmHorLEDsRun+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4619      	mov	r1, r3
 80001a0:	2000      	movs	r0, #0
 80001a2:	f001 f9c1 	bl	8001528 <setTimer>
			}
			break;
 80001a6:	e021      	b.n	80001ec <fsmHorLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(0)) {
 80001a8:	2000      	movs	r0, #0
 80001aa:	f001 f9a9 	bl	8001500 <isTimerUp>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d01d      	beq.n	80001f0 <fsmHorLEDsRun+0xa4>
				horizontal_status = AUTO_YELLOW;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	601a      	str	r2, [r3, #0]
				setTimer(0, YELLOW_time);
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <fsmHorLEDsRun+0xbc>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4619      	mov	r1, r3
 80001c0:	2000      	movs	r0, #0
 80001c2:	f001 f9b1 	bl	8001528 <setTimer>
			}
			break;
 80001c6:	e013      	b.n	80001f0 <fsmHorLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(0)) {
 80001c8:	2000      	movs	r0, #0
 80001ca:	f001 f999 	bl	8001500 <isTimerUp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00f      	beq.n	80001f4 <fsmHorLEDsRun+0xa8>
				horizontal_status = AUTO_RED;
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	601a      	str	r2, [r3, #0]
				setTimer(0, RED_time);
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fsmHorLEDsRun+0xb4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	2000      	movs	r0, #0
 80001e2:	f001 f9a1 	bl	8001528 <setTimer>
			}
			break;
 80001e6:	e005      	b.n	80001f4 <fsmHorLEDsRun+0xa8>

		default:
			break;
 80001e8:	bf00      	nop
 80001ea:	e004      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001ec:	bf00      	nop
 80001ee:	e002      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f0:	bf00      	nop
 80001f2:	e000      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	20000018 	.word	0x20000018
 8000204:	2000001c 	.word	0x2000001c
 8000208:	20000020 	.word	0x20000020

0800020c <fsmVerLEDsRun>:


void fsmVerLEDsRun() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// FSM for vertical LEDs

	switch (vertical_status) {
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d847      	bhi.n	80002a8 <fsmVerLEDsRun+0x9c>
 8000218:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsmVerLEDsRun+0x14>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000235 	.word	0x08000235
 8000224:	080002a9 	.word	0x080002a9
 8000228:	08000249 	.word	0x08000249
 800022c:	08000269 	.word	0x08000269
 8000230:	08000289 	.word	0x08000289
		case MODE_INIT:
			vertical_status = AUTO_GREEN;
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000236:	2203      	movs	r2, #3
 8000238:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN_time);
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2001      	movs	r0, #1
 8000242:	f001 f971 	bl	8001528 <setTimer>
			break;
 8000246:	e036      	b.n	80002b6 <fsmVerLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(1)) {
 8000248:	2001      	movs	r0, #1
 800024a:	f001 f959 	bl	8001500 <isTimerUp>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d02b      	beq.n	80002ac <fsmVerLEDsRun+0xa0>
				vertical_status = AUTO_GREEN;
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000256:	2203      	movs	r2, #3
 8000258:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN_time);
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	2001      	movs	r0, #1
 8000262:	f001 f961 	bl	8001528 <setTimer>
			}
			break;
 8000266:	e021      	b.n	80002ac <fsmVerLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(1)) {
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f949 	bl	8001500 <isTimerUp>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <fsmVerLEDsRun+0xa4>
				vertical_status = AUTO_YELLOW;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000276:	2204      	movs	r2, #4
 8000278:	601a      	str	r2, [r3, #0]
				setTimer(1, YELLOW_time);
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <fsmVerLEDsRun+0xb8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4619      	mov	r1, r3
 8000280:	2001      	movs	r0, #1
 8000282:	f001 f951 	bl	8001528 <setTimer>
			}
			break;
 8000286:	e013      	b.n	80002b0 <fsmVerLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(1)) {
 8000288:	2001      	movs	r0, #1
 800028a:	f001 f939 	bl	8001500 <isTimerUp>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <fsmVerLEDsRun+0xa8>
				vertical_status = AUTO_RED;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
				setTimer(1, RED_time);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <fsmVerLEDsRun+0xbc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	2001      	movs	r0, #1
 80002a2:	f001 f941 	bl	8001528 <setTimer>
			}
			break;
 80002a6:	e005      	b.n	80002b4 <fsmVerLEDsRun+0xa8>

		default:
			break;
 80002a8:	bf00      	nop
 80002aa:	e004      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b4:	bf00      	nop
	}
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000050 	.word	0x20000050
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	20000020 	.word	0x20000020
 80002c8:	20000018 	.word	0x20000018

080002cc <LEDsDisplay>:

void LEDsDisplay() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Display two ways LEDs

	fsmHorLEDsRun();
 80002d0:	f7ff ff3c 	bl	800014c <fsmHorLEDsRun>
	fsmVerLEDsRun();
 80002d4:	f7ff ff9a 	bl	800020c <fsmVerLEDsRun>

	switch (horizontal_status) {
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <LEDsDisplay+0xcc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d01e      	beq.n	800031e <LEDsDisplay+0x52>
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	dc28      	bgt.n	8000336 <LEDsDisplay+0x6a>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d002      	beq.n	80002ee <LEDsDisplay+0x22>
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d00c      	beq.n	8000306 <LEDsDisplay+0x3a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
			break;

		default:
			break;
 80002ec:	e023      	b.n	8000336 <LEDsDisplay+0x6a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4829      	ldr	r0, [pc, #164]	; (800039c <LEDsDisplay+0xd0>)
 80002f6:	f001 fd46 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4828      	ldr	r0, [pc, #160]	; (80003a0 <LEDsDisplay+0xd4>)
 8000300:	f001 fd41 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000304:	e018      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4823      	ldr	r0, [pc, #140]	; (800039c <LEDsDisplay+0xd0>)
 800030e:	f001 fd3a 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4822      	ldr	r0, [pc, #136]	; (80003a0 <LEDsDisplay+0xd4>)
 8000318:	f001 fd35 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 800031c:	e00c      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <LEDsDisplay+0xd0>)
 8000326:	f001 fd2e 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 800032a:	2201      	movs	r2, #1
 800032c:	2108      	movs	r1, #8
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <LEDsDisplay+0xd4>)
 8000330:	f001 fd29 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000334:	e000      	b.n	8000338 <LEDsDisplay+0x6c>
			break;
 8000336:	bf00      	nop
	}

	switch (vertical_status) {
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <LEDsDisplay+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d01c      	beq.n	800037a <LEDsDisplay+0xae>
 8000340:	2b04      	cmp	r3, #4
 8000342:	dc25      	bgt.n	8000390 <LEDsDisplay+0xc4>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d002      	beq.n	800034e <LEDsDisplay+0x82>
 8000348:	2b03      	cmp	r3, #3
 800034a:	d00b      	beq.n	8000364 <LEDsDisplay+0x98>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
			break;

		default:
			break;
 800034c:	e020      	b.n	8000390 <LEDsDisplay+0xc4>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	4813      	ldr	r0, [pc, #76]	; (80003a0 <LEDsDisplay+0xd4>)
 8000354:	f001 fd17 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <LEDsDisplay+0xd4>)
 800035e:	f001 fd12 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000362:	e016      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LEDsDisplay+0xd4>)
 800036a:	f001 fd0c 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LEDsDisplay+0xd4>)
 8000374:	f001 fd07 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000378:	e00b      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <LEDsDisplay+0xd4>)
 8000380:	f001 fd01 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000384:	2201      	movs	r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LEDsDisplay+0xd4>)
 800038a:	f001 fcfc 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 800038e:	e000      	b.n	8000392 <LEDsDisplay+0xc6>
			break;
 8000390:	bf00      	nop
	}
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000004c 	.word	0x2000004c
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	20000050 	.word	0x20000050

080003a8 <isButtonPressed>:
int button_flag[NO_OF_BUTTON];
int button_long_flag[NO_OF_BUTTON];
GPIO_PinState key_reg[NO_OF_BUTTON][4];
int counter_for_key_pressed[NO_OF_BUTTON];

int isButtonPressed(int button) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (button_flag[button]) {
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <isButtonPressed+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d006      	beq.n	80003ca <isButtonPressed+0x22>
		button_flag[button] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <isButtonPressed+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <isButtonPressed+0x24>
	}
	else return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000080 	.word	0x20000080

080003dc <isButtonLongPressed>:

int isButtonLongPressed(int button) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if (button_long_flag[button]) {
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <isButtonLongPressed+0x30>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <isButtonLongPressed+0x22>
		button_long_flag[button] = 0;
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <isButtonLongPressed+0x30>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2100      	movs	r1, #0
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <isButtonLongPressed+0x24>
	}
	else return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000090 	.word	0x20000090

08000410 <subKeyProcess>:

void subKeyProcess(int button) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <subKeyProcess+0x1c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2101      	movs	r1, #1
 800041e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20000080 	.word	0x20000080

08000430 <subKeyLongProcess>:

void subKeyLongProcess(int button) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	button_long_flag[button] = 1;
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <subKeyLongProcess+0x1c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2101      	movs	r1, #1
 800043e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000090 	.word	0x20000090

08000450 <resetKey>:

void resetKey(int button) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	button_flag[button] = 0;
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <resetKey+0x28>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_long_flag[button] = 0;
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <resetKey+0x2c>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2100      	movs	r1, #0
 8000468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000080 	.word	0x20000080
 800047c:	20000090 	.word	0x20000090

08000480 <setKeyTimer>:

void setKeyTimer(int button) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	counter_for_key_pressed[button] = timer_for_key_pressed / timer_cycle;
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <setKeyTimer+0x28>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <setKeyTimer+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	fb92 f2f3 	sdiv	r2, r2, r3
 8000494:	4906      	ldr	r1, [pc, #24]	; (80004b0 <setKeyTimer+0x30>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000014 	.word	0x20000014
 80004ac:	20000010 	.word	0x20000010
 80004b0:	20000060 	.word	0x20000060

080004b4 <getKeyInput>:

void getKeyInput() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e0b9      	b.n	8000634 <getKeyInput+0x180>
		key_reg[button][0] = key_reg[button][1];
 80004c0:	4a61      	ldr	r2, [pc, #388]	; (8000648 <getKeyInput+0x194>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	7859      	ldrb	r1, [r3, #1]
 80004ca:	4a5f      	ldr	r2, [pc, #380]	; (8000648 <getKeyInput+0x194>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		key_reg[button][1] = key_reg[button][2];
 80004d2:	4a5d      	ldr	r2, [pc, #372]	; (8000648 <getKeyInput+0x194>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	7899      	ldrb	r1, [r3, #2]
 80004dc:	4a5a      	ldr	r2, [pc, #360]	; (8000648 <getKeyInput+0x194>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	460a      	mov	r2, r1
 80004e6:	705a      	strb	r2, [r3, #1]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d83e      	bhi.n	800056c <getKeyInput+0xb8>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <getKeyInput+0x40>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000505 	.word	0x08000505
 80004f8:	0800051f 	.word	0x0800051f
 80004fc:	08000539 	.word	0x08000539
 8000500:	08000553 	.word	0x08000553
		switch (button) {
			case BUTTON_MODE:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000504:	2102      	movs	r1, #2
 8000506:	4851      	ldr	r0, [pc, #324]	; (800064c <getKeyInput+0x198>)
 8000508:	f001 fc26 	bl	8001d58 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	4619      	mov	r1, r3
 8000510:	4a4d      	ldr	r2, [pc, #308]	; (8000648 <getKeyInput+0x194>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	709a      	strb	r2, [r3, #2]
				break;
 800051c:	e027      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_SET:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 800051e:	2110      	movs	r1, #16
 8000520:	484a      	ldr	r0, [pc, #296]	; (800064c <getKeyInput+0x198>)
 8000522:	f001 fc19 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	4619      	mov	r1, r3
 800052a:	4a47      	ldr	r2, [pc, #284]	; (8000648 <getKeyInput+0x194>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	460a      	mov	r2, r1
 8000534:	709a      	strb	r2, [r3, #2]
				break;
 8000536:	e01a      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_INC:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_INC_GPIO_Port, BUTTON_INC_Pin);
 8000538:	2101      	movs	r1, #1
 800053a:	4845      	ldr	r0, [pc, #276]	; (8000650 <getKeyInput+0x19c>)
 800053c:	f001 fc0c 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	4619      	mov	r1, r3
 8000544:	4a40      	ldr	r2, [pc, #256]	; (8000648 <getKeyInput+0x194>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	460a      	mov	r2, r1
 800054e:	709a      	strb	r2, [r3, #2]
				break;
 8000550:	e00d      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_PED:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_PED_GPIO_Port, BUTTON_PED_Pin);
 8000552:	2101      	movs	r1, #1
 8000554:	483d      	ldr	r0, [pc, #244]	; (800064c <getKeyInput+0x198>)
 8000556:	f001 fbff 	bl	8001d58 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	4619      	mov	r1, r3
 800055e:	4a3a      	ldr	r2, [pc, #232]	; (8000648 <getKeyInput+0x194>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	460a      	mov	r2, r1
 8000568:	709a      	strb	r2, [r3, #2]
				break;
 800056a:	e000      	b.n	800056e <getKeyInput+0xba>
			default:
				break;
 800056c:	bf00      	nop
		}

		if ((key_reg[button][0] == key_reg[button][1]) && (key_reg[button][1] == key_reg[button][2])) {
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <getKeyInput+0x194>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000576:	4934      	ldr	r1, [pc, #208]	; (8000648 <getKeyInput+0x194>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	429a      	cmp	r2, r3
 8000582:	d154      	bne.n	800062e <getKeyInput+0x17a>
 8000584:	4a30      	ldr	r2, [pc, #192]	; (8000648 <getKeyInput+0x194>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	492e      	ldr	r1, [pc, #184]	; (8000648 <getKeyInput+0x194>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	429a      	cmp	r2, r3
 800059a:	d148      	bne.n	800062e <getKeyInput+0x17a>

			// Press button, then release
			if (key_reg[button][3] != key_reg[button][2]) {
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <getKeyInput+0x194>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	78da      	ldrb	r2, [r3, #3]
 80005a6:	4928      	ldr	r1, [pc, #160]	; (8000648 <getKeyInput+0x194>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d01c      	beq.n	80005ee <getKeyInput+0x13a>
				key_reg[button][3] = key_reg[button][2];
 80005b4:	4a24      	ldr	r2, [pc, #144]	; (8000648 <getKeyInput+0x194>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	7899      	ldrb	r1, [r3, #2]
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <getKeyInput+0x194>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	460a      	mov	r2, r1
 80005c8:	70da      	strb	r2, [r3, #3]

				if (key_reg[button][2] == PRESSED_STATE) {
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <getKeyInput+0x194>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <getKeyInput+0x132>
					subKeyProcess(button);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff19 	bl	8000410 <subKeyProcess>
					setKeyTimer(button);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff4e 	bl	8000480 <setKeyTimer>
 80005e4:	e023      	b.n	800062e <getKeyInput+0x17a>
				}
				else resetKey(button);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ff32 	bl	8000450 <resetKey>
 80005ec:	e01f      	b.n	800062e <getKeyInput+0x17a>
			}
			// Press and hold button
			else {
				counter_for_key_pressed[button]--;
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getKeyInput+0x1a0>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <getKeyInput+0x1a0>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!counter_for_key_pressed[button]) {
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <getKeyInput+0x1a0>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <getKeyInput+0x17a>
					if (key_reg[button][2] == PRESSED_STATE) {
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <getKeyInput+0x194>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <getKeyInput+0x16e>
						subKeyLongProcess(button);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff08 	bl	8000430 <subKeyLongProcess>
 8000620:	e002      	b.n	8000628 <getKeyInput+0x174>
					}
					else resetKey(button);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff14 	bl	8000450 <resetKey>
					setKeyTimer(button);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff29 	bl	8000480 <setKeyTimer>
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b03      	cmp	r3, #3
 8000638:	f77f af42 	ble.w	80004c0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000070 	.word	0x20000070
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	20000060 	.word	0x20000060

08000658 <fsmAutoModeRun>:
#include "fsm_auto_mode.h"

void fsmAutoModeRun() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// FSM for AUTO MODE

	switch (mode) {
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <fsmAutoModeRun+0x38>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <fsmAutoModeRun+0x12>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d004      	beq.n	8000672 <fsmAutoModeRun+0x1a>
			LEDsDisplay();

			break;

		default:
			break;
 8000668:	e00f      	b.n	800068a <fsmAutoModeRun+0x32>
			mode = AUTO_MODE;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <fsmAutoModeRun+0x38>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
			break;
 8000670:	e00b      	b.n	800068a <fsmAutoModeRun+0x32>
			if (isButtonPressed(BUTTON_MODE)) {
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fe98 	bl	80003a8 <isButtonPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <fsmAutoModeRun+0x2c>
				mode = MAN_MODE;
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <fsmAutoModeRun+0x38>)
 8000680:	2205      	movs	r2, #5
 8000682:	601a      	str	r2, [r3, #0]
			LEDsDisplay();
 8000684:	f7ff fe22 	bl	80002cc <LEDsDisplay>
			break;
 8000688:	bf00      	nop
	}
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000005c 	.word	0x2000005c

08000694 <fsmManualModeRun>:
#include "fsm_manual_mode.h"

void fsmManualModeRun()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	// FSM for MANUAL MODE

	switch (mode)
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <fsmManualModeRun+0x16c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b05      	subs	r3, #5
 800069e:	2b03      	cmp	r3, #3
 80006a0:	f200 80ab 	bhi.w	80007fa <fsmManualModeRun+0x166>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <fsmManualModeRun+0x18>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006c5 	.word	0x080006c5
 80006b4:	08000729 	.word	0x08000729
 80006b8:	0800078d 	.word	0x0800078d
	{
	case MAN_MODE:
		mode = MAN_RED;
 80006bc:	4b50      	ldr	r3, [pc, #320]	; (8000800 <fsmManualModeRun+0x16c>)
 80006be:	2206      	movs	r2, #6
 80006c0:	601a      	str	r2, [r3, #0]
		break;
 80006c2:	e09a      	b.n	80007fa <fsmManualModeRun+0x166>

	case MAN_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	484e      	ldr	r0, [pc, #312]	; (8000804 <fsmManualModeRun+0x170>)
 80006cc:	f001 fb5b 	bl	8001d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	484c      	ldr	r0, [pc, #304]	; (8000808 <fsmManualModeRun+0x174>)
 80006d6:	f001 fb56 	bl	8001d86 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	484a      	ldr	r0, [pc, #296]	; (8000808 <fsmManualModeRun+0x174>)
 80006e0:	f001 fb51 	bl	8001d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2110      	movs	r1, #16
 80006e8:	4847      	ldr	r0, [pc, #284]	; (8000808 <fsmManualModeRun+0x174>)
 80006ea:	f001 fb4c 	bl	8001d86 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff fe5a 	bl	80003a8 <isButtonPressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <fsmManualModeRun+0x6c>
		{
			mode = MAN_GREEN;
 80006fa:	4b41      	ldr	r3, [pc, #260]	; (8000800 <fsmManualModeRun+0x16c>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fe51 	bl	80003a8 <isButtonPressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d071      	beq.n	80007f0 <fsmManualModeRun+0x15c>
		{
			mode = INC_RED;
 800070c:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <fsmManualModeRun+0x16c>)
 800070e:	2209      	movs	r2, #9
 8000710:	601a      	str	r2, [r3, #0]
			time_count = RED_time / 1000;
 8000712:	4b3e      	ldr	r3, [pc, #248]	; (800080c <fsmManualModeRun+0x178>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a3e      	ldr	r2, [pc, #248]	; (8000810 <fsmManualModeRun+0x17c>)
 8000718:	fb82 1203 	smull	r1, r2, r2, r3
 800071c:	1192      	asrs	r2, r2, #6
 800071e:	17db      	asrs	r3, r3, #31
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4a3c      	ldr	r2, [pc, #240]	; (8000814 <fsmManualModeRun+0x180>)
 8000724:	6013      	str	r3, [r2, #0]
		}

		break;
 8000726:	e063      	b.n	80007f0 <fsmManualModeRun+0x15c>

	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072e:	4835      	ldr	r0, [pc, #212]	; (8000804 <fsmManualModeRun+0x170>)
 8000730:	f001 fb29 	bl	8001d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000734:	2201      	movs	r2, #1
 8000736:	2108      	movs	r1, #8
 8000738:	4833      	ldr	r0, [pc, #204]	; (8000808 <fsmManualModeRun+0x174>)
 800073a:	f001 fb24 	bl	8001d86 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4831      	ldr	r0, [pc, #196]	; (8000808 <fsmManualModeRun+0x174>)
 8000744:	f001 fb1f 	bl	8001d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	482e      	ldr	r0, [pc, #184]	; (8000808 <fsmManualModeRun+0x174>)
 800074e:	f001 fb1a 	bl	8001d86 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fe28 	bl	80003a8 <isButtonPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <fsmManualModeRun+0xd0>
		{
			mode = MAN_YELLOW;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <fsmManualModeRun+0x16c>)
 8000760:	2208      	movs	r2, #8
 8000762:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fe1f 	bl	80003a8 <isButtonPressed>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d041      	beq.n	80007f4 <fsmManualModeRun+0x160>
		{
			mode = INC_GREEN;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <fsmManualModeRun+0x16c>)
 8000772:	220a      	movs	r2, #10
 8000774:	601a      	str	r2, [r3, #0]
			time_count = GREEN_time / 1000;
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <fsmManualModeRun+0x184>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a25      	ldr	r2, [pc, #148]	; (8000810 <fsmManualModeRun+0x17c>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1192      	asrs	r2, r2, #6
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <fsmManualModeRun+0x180>)
 8000788:	6013      	str	r3, [r2, #0]
		}

		break;
 800078a:	e033      	b.n	80007f4 <fsmManualModeRun+0x160>

	case MAN_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000792:	481c      	ldr	r0, [pc, #112]	; (8000804 <fsmManualModeRun+0x170>)
 8000794:	f001 faf7 	bl	8001d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000798:	2201      	movs	r2, #1
 800079a:	2108      	movs	r1, #8
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <fsmManualModeRun+0x174>)
 800079e:	f001 faf2 	bl	8001d86 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2120      	movs	r1, #32
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <fsmManualModeRun+0x174>)
 80007a8:	f001 faed 	bl	8001d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	4815      	ldr	r0, [pc, #84]	; (8000808 <fsmManualModeRun+0x174>)
 80007b2:	f001 fae8 	bl	8001d86 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff fdf6 	bl	80003a8 <isButtonPressed>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <fsmManualModeRun+0x134>
		{
			mode = MAN_RED;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <fsmManualModeRun+0x16c>)
 80007c4:	2206      	movs	r2, #6
 80007c6:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fded 	bl	80003a8 <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d011      	beq.n	80007f8 <fsmManualModeRun+0x164>
		{
			mode = INC_YELLOW;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <fsmManualModeRun+0x16c>)
 80007d6:	220b      	movs	r2, #11
 80007d8:	601a      	str	r2, [r3, #0]
			time_count = YELLOW_time / 1000;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <fsmManualModeRun+0x188>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <fsmManualModeRun+0x17c>)
 80007e0:	fb82 1203 	smull	r1, r2, r2, r3
 80007e4:	1192      	asrs	r2, r2, #6
 80007e6:	17db      	asrs	r3, r3, #31
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <fsmManualModeRun+0x180>)
 80007ec:	6013      	str	r3, [r2, #0]
		}

		break;
 80007ee:	e003      	b.n	80007f8 <fsmManualModeRun+0x164>
		break;
 80007f0:	bf00      	nop
 80007f2:	e002      	b.n	80007fa <fsmManualModeRun+0x166>
		break;
 80007f4:	bf00      	nop
 80007f6:	e000      	b.n	80007fa <fsmManualModeRun+0x166>
		break;
 80007f8:	bf00      	nop
	}
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000005c 	.word	0x2000005c
 8000804:	40010800 	.word	0x40010800
 8000808:	40010c00 	.word	0x40010c00
 800080c:	20000018 	.word	0x20000018
 8000810:	10624dd3 	.word	0x10624dd3
 8000814:	20000058 	.word	0x20000058
 8000818:	2000001c 	.word	0x2000001c
 800081c:	20000020 	.word	0x20000020

08000820 <fsmVerPedRun>:
int hor_ped = PED_OFF;
int buzzer_time = BUZZER_time;
int pul = BUZZER_pul;
int state = 0;

void fsmVerPedRun(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	switch(ver_ped){
 8000824:	4b52      	ldr	r3, [pc, #328]	; (8000970 <fsmVerPedRun+0x150>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3b0c      	subs	r3, #12
 800082a:	2b04      	cmp	r3, #4
 800082c:	f200 8093 	bhi.w	8000956 <fsmVerPedRun+0x136>
 8000830:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <fsmVerPedRun+0x18>)
 8000832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000836:	bf00      	nop
 8000838:	0800084d 	.word	0x0800084d
 800083c:	0800087d 	.word	0x0800087d
 8000840:	080008bb 	.word	0x080008bb
 8000844:	080008f1 	.word	0x080008f1
 8000848:	0800092f 	.word	0x0800092f
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 800084c:	4b49      	ldr	r3, [pc, #292]	; (8000974 <fsmVerPedRun+0x154>)
 800084e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000852:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 8000854:	4b48      	ldr	r3, [pc, #288]	; (8000978 <fsmVerPedRun+0x158>)
 8000856:	f240 2226 	movw	r2, #550	; 0x226
 800085a:	601a      	str	r2, [r3, #0]
			state = 1;
 800085c:	4b47      	ldr	r3, [pc, #284]	; (800097c <fsmVerPedRun+0x15c>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 8000862:	2003      	movs	r0, #3
 8000864:	f7ff fda0 	bl	80003a8 <isButtonPressed>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d075      	beq.n	800095a <fsmVerPedRun+0x13a>
				ver_ped = PED_ON;
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <fsmVerPedRun+0x150>)
 8000870:	220d      	movs	r2, #13
 8000872:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 8000874:	4b42      	ldr	r3, [pc, #264]	; (8000980 <fsmVerPedRun+0x160>)
 8000876:	220d      	movs	r2, #13
 8000878:	601a      	str	r2, [r3, #0]
			}
			break;
 800087a:	e06e      	b.n	800095a <fsmVerPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 800087c:	2003      	movs	r0, #3
 800087e:	f7ff fd93 	bl	80003a8 <isButtonPressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <fsmVerPedRun+0x74>
				ver_ped = PED_OFF;
 8000888:	4b39      	ldr	r3, [pc, #228]	; (8000970 <fsmVerPedRun+0x150>)
 800088a:	220c      	movs	r2, #12
 800088c:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <fsmVerPedRun+0x160>)
 8000890:	220c      	movs	r2, #12
 8000892:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <fsmVerPedRun+0x164>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d102      	bne.n	80008a2 <fsmVerPedRun+0x82>
				ver_ped = WALK_ALLOW;
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <fsmVerPedRun+0x150>)
 800089e:	220e      	movs	r2, #14
 80008a0:	601a      	str	r2, [r3, #0]
			}
			if((vertical_status == AUTO_GREEN) || (vertical_status == AUTO_YELLOW)){
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <fsmVerPedRun+0x164>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d003      	beq.n	80008b2 <fsmVerPedRun+0x92>
 80008aa:	4b36      	ldr	r3, [pc, #216]	; (8000984 <fsmVerPedRun+0x164>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d155      	bne.n	800095e <fsmVerPedRun+0x13e>
				ver_ped = WALK_STOP;
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <fsmVerPedRun+0x150>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	601a      	str	r2, [r3, #0]
			}
			break;
 80008b8:	e051      	b.n	800095e <fsmVerPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 80008ba:	2003      	movs	r0, #3
 80008bc:	f7ff fd74 	bl	80003a8 <isButtonPressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d005      	beq.n	80008d2 <fsmVerPedRun+0xb2>
				ver_ped = PED_OFF;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <fsmVerPedRun+0x150>)
 80008c8:	220c      	movs	r2, #12
 80008ca:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <fsmVerPedRun+0x160>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(1) <= 300){
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 fe04 	bl	80014e0 <currentCounter>
 80008d8:	4603      	mov	r3, r0
 80008da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80008de:	dc40      	bgt.n	8000962 <fsmVerPedRun+0x142>
				ver_ped = BUZZER_ON;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <fsmVerPedRun+0x150>)
 80008e2:	220f      	movs	r2, #15
 80008e4:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 80008e6:	2164      	movs	r1, #100	; 0x64
 80008e8:	2002      	movs	r0, #2
 80008ea:	f000 fe1d 	bl	8001528 <setTimer>
			}
			break;
 80008ee:	e038      	b.n	8000962 <fsmVerPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 80008f0:	2003      	movs	r0, #3
 80008f2:	f7ff fd59 	bl	80003a8 <isButtonPressed>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d005      	beq.n	8000908 <fsmVerPedRun+0xe8>
				ver_ped = PED_OFF;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <fsmVerPedRun+0x150>)
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <fsmVerPedRun+0x160>)
 8000904:	220c      	movs	r2, #12
 8000906:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_GREEN){
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <fsmVerPedRun+0x164>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b03      	cmp	r3, #3
 800090e:	d12a      	bne.n	8000966 <fsmVerPedRun+0x146>
				ver_ped = WALK_STOP;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <fsmVerPedRun+0x150>)
 8000912:	2210      	movs	r2, #16
 8000914:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <fsmVerPedRun+0x154>)
 8000918:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800091c:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <fsmVerPedRun+0x158>)
 8000920:	f240 2226 	movw	r2, #550	; 0x226
 8000924:	601a      	str	r2, [r3, #0]
				state = 0;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <fsmVerPedRun+0x15c>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
			}
			break;
 800092c:	e01b      	b.n	8000966 <fsmVerPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 800092e:	2003      	movs	r0, #3
 8000930:	f7ff fd3a 	bl	80003a8 <isButtonPressed>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <fsmVerPedRun+0x126>
				ver_ped = PED_OFF;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <fsmVerPedRun+0x150>)
 800093c:	220c      	movs	r2, #12
 800093e:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <fsmVerPedRun+0x160>)
 8000942:	220c      	movs	r2, #12
 8000944:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <fsmVerPedRun+0x164>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d10d      	bne.n	800096a <fsmVerPedRun+0x14a>
				ver_ped = WALK_ALLOW;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <fsmVerPedRun+0x150>)
 8000950:	220e      	movs	r2, #14
 8000952:	601a      	str	r2, [r3, #0]
			}
			break;
 8000954:	e009      	b.n	800096a <fsmVerPedRun+0x14a>
		default:
			break;
 8000956:	bf00      	nop
 8000958:	e008      	b.n	800096c <fsmVerPedRun+0x14c>
			break;
 800095a:	bf00      	nop
 800095c:	e006      	b.n	800096c <fsmVerPedRun+0x14c>
			break;
 800095e:	bf00      	nop
 8000960:	e004      	b.n	800096c <fsmVerPedRun+0x14c>
			break;
 8000962:	bf00      	nop
 8000964:	e002      	b.n	800096c <fsmVerPedRun+0x14c>
			break;
 8000966:	bf00      	nop
 8000968:	e000      	b.n	800096c <fsmVerPedRun+0x14c>
			break;
 800096a:	bf00      	nop
	}
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	2000000c 	.word	0x2000000c
 800097c:	20000054 	.word	0x20000054
 8000980:	20000004 	.word	0x20000004
 8000984:	20000050 	.word	0x20000050

08000988 <fsmHorPedRun>:

void fsmHorPedRun(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	switch(hor_ped){
 800098c:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <fsmHorPedRun+0x150>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3b0c      	subs	r3, #12
 8000992:	2b04      	cmp	r3, #4
 8000994:	f200 8093 	bhi.w	8000abe <fsmHorPedRun+0x136>
 8000998:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <fsmHorPedRun+0x18>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	080009b5 	.word	0x080009b5
 80009a4:	080009e5 	.word	0x080009e5
 80009a8:	08000a23 	.word	0x08000a23
 80009ac:	08000a59 	.word	0x08000a59
 80009b0:	08000a97 	.word	0x08000a97
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 80009b4:	4b49      	ldr	r3, [pc, #292]	; (8000adc <fsmHorPedRun+0x154>)
 80009b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009ba:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 80009bc:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <fsmHorPedRun+0x158>)
 80009be:	f240 2226 	movw	r2, #550	; 0x226
 80009c2:	601a      	str	r2, [r3, #0]
			state = 1;
 80009c4:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <fsmHorPedRun+0x15c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 80009ca:	2003      	movs	r0, #3
 80009cc:	f7ff fcec 	bl	80003a8 <isButtonPressed>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d075      	beq.n	8000ac2 <fsmHorPedRun+0x13a>
				ver_ped = PED_ON;
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <fsmHorPedRun+0x160>)
 80009d8:	220d      	movs	r2, #13
 80009da:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 80009dc:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <fsmHorPedRun+0x150>)
 80009de:	220d      	movs	r2, #13
 80009e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80009e2:	e06e      	b.n	8000ac2 <fsmHorPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 80009e4:	2003      	movs	r0, #3
 80009e6:	f7ff fcdf 	bl	80003a8 <isButtonPressed>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <fsmHorPedRun+0x74>
				ver_ped = PED_OFF;
 80009f0:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <fsmHorPedRun+0x160>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <fsmHorPedRun+0x150>)
 80009f8:	220c      	movs	r2, #12
 80009fa:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 80009fc:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <fsmHorPedRun+0x164>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d102      	bne.n	8000a0a <fsmHorPedRun+0x82>
				hor_ped = WALK_ALLOW;
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000a06:	220e      	movs	r2, #14
 8000a08:	601a      	str	r2, [r3, #0]
			}
			if((horizontal_status == AUTO_GREEN) || (horizontal_status == AUTO_YELLOW)){
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <fsmHorPedRun+0x164>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d003      	beq.n	8000a1a <fsmHorPedRun+0x92>
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <fsmHorPedRun+0x164>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d155      	bne.n	8000ac6 <fsmHorPedRun+0x13e>
				hor_ped = WALK_STOP;
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a20:	e051      	b.n	8000ac6 <fsmHorPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 8000a22:	2003      	movs	r0, #3
 8000a24:	f7ff fcc0 	bl	80003a8 <isButtonPressed>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d005      	beq.n	8000a3a <fsmHorPedRun+0xb2>
				ver_ped = PED_OFF;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <fsmHorPedRun+0x160>)
 8000a30:	220c      	movs	r2, #12
 8000a32:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(0) <= 300){
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 fd50 	bl	80014e0 <currentCounter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a46:	dc40      	bgt.n	8000aca <fsmHorPedRun+0x142>
				hor_ped = BUZZER_ON;
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 8000a4e:	2164      	movs	r1, #100	; 0x64
 8000a50:	2002      	movs	r0, #2
 8000a52:	f000 fd69 	bl	8001528 <setTimer>
			}
			break;
 8000a56:	e038      	b.n	8000aca <fsmHorPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f7ff fca5 	bl	80003a8 <isButtonPressed>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <fsmHorPedRun+0xe8>
				ver_ped = PED_OFF;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <fsmHorPedRun+0x160>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_GREEN){
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <fsmHorPedRun+0x164>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d12a      	bne.n	8000ace <fsmHorPedRun+0x146>
				hor_ped = WALK_STOP;
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <fsmHorPedRun+0x154>)
 8000a80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a84:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <fsmHorPedRun+0x158>)
 8000a88:	f240 2226 	movw	r2, #550	; 0x226
 8000a8c:	601a      	str	r2, [r3, #0]
				state = 0;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <fsmHorPedRun+0x15c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a94:	e01b      	b.n	8000ace <fsmHorPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 8000a96:	2003      	movs	r0, #3
 8000a98:	f7ff fc86 	bl	80003a8 <isButtonPressed>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d005      	beq.n	8000aae <fsmHorPedRun+0x126>
				ver_ped = PED_OFF;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <fsmHorPedRun+0x160>)
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <fsmHorPedRun+0x164>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d10d      	bne.n	8000ad2 <fsmHorPedRun+0x14a>
				hor_ped = WALK_ALLOW;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <fsmHorPedRun+0x150>)
 8000ab8:	220e      	movs	r2, #14
 8000aba:	601a      	str	r2, [r3, #0]
			}
			break;
 8000abc:	e009      	b.n	8000ad2 <fsmHorPedRun+0x14a>
		default:
			break;
 8000abe:	bf00      	nop
 8000ac0:	e008      	b.n	8000ad4 <fsmHorPedRun+0x14c>
			break;
 8000ac2:	bf00      	nop
 8000ac4:	e006      	b.n	8000ad4 <fsmHorPedRun+0x14c>
			break;
 8000ac6:	bf00      	nop
 8000ac8:	e004      	b.n	8000ad4 <fsmHorPedRun+0x14c>
			break;
 8000aca:	bf00      	nop
 8000acc:	e002      	b.n	8000ad4 <fsmHorPedRun+0x14c>
			break;
 8000ace:	bf00      	nop
 8000ad0:	e000      	b.n	8000ad4 <fsmHorPedRun+0x14c>
			break;
 8000ad2:	bf00      	nop
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	20000054 	.word	0x20000054
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	2000004c 	.word	0x2000004c

08000af0 <fsmPedestrianModeRun>:

void fsmPedestrianModeRun() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	fsmVerPedRun();
 8000af4:	f7ff fe94 	bl	8000820 <fsmVerPedRun>
	fsmHorPedRun();
 8000af8:	f7ff ff46 	bl	8000988 <fsmHorPedRun>

	switch(ver_ped){
 8000afc:	4b9a      	ldr	r3, [pc, #616]	; (8000d68 <fsmPedestrianModeRun+0x278>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3b0c      	subs	r3, #12
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	f200 8090 	bhi.w	8000c28 <fsmPedestrianModeRun+0x138>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <fsmPedestrianModeRun+0x20>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000c29 	.word	0x08000c29
 8000b18:	08000b3d 	.word	0x08000b3d
 8000b1c:	08000b55 	.word	0x08000b55
 8000b20:	08000c11 	.word	0x08000c11
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2104      	movs	r1, #4
 8000b28:	4890      	ldr	r0, [pc, #576]	; (8000d6c <fsmPedestrianModeRun+0x27c>)
 8000b2a:	f001 f92c 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	488e      	ldr	r0, [pc, #568]	; (8000d70 <fsmPedestrianModeRun+0x280>)
 8000b36:	f001 f926 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000b3a:	e078      	b.n	8000c2e <fsmPedestrianModeRun+0x13e>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2104      	movs	r1, #4
 8000b40:	488a      	ldr	r0, [pc, #552]	; (8000d6c <fsmPedestrianModeRun+0x27c>)
 8000b42:	f001 f920 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_ON);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	4888      	ldr	r0, [pc, #544]	; (8000d70 <fsmPedestrianModeRun+0x280>)
 8000b4e:	f001 f91a 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000b52:	e06c      	b.n	8000c2e <fsmPedestrianModeRun+0x13e>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fcd3 	bl	8001500 <isTimerUp>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d028      	beq.n	8000bb2 <fsmPedestrianModeRun+0xc2>
 8000b60:	4b84      	ldr	r3, [pc, #528]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d124      	bne.n	8000bb2 <fsmPedestrianModeRun+0xc2>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, pul);
 8000b68:	4b83      	ldr	r3, [pc, #524]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <fsmPedestrianModeRun+0x28c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000b72:	4b83      	ldr	r3, [pc, #524]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4619      	mov	r1, r3
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f000 fcd5 	bl	8001528 <setTimer>
				state = 1 - state;
 8000b7e:	4b7d      	ldr	r3, [pc, #500]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f1c3 0301 	rsb	r3, r3, #1
 8000b86:	4a7b      	ldr	r2, [pc, #492]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000b88:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000b92:	4293      	cmp	r3, r2
 8000b94:	dc04      	bgt.n	8000ba0 <fsmPedestrianModeRun+0xb0>
 8000b96:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3364      	adds	r3, #100	; 0x64
 8000b9c:	4a76      	ldr	r2, [pc, #472]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000b9e:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000ba0:	4b77      	ldr	r3, [pc, #476]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b64      	cmp	r3, #100	; 0x64
 8000ba6:	dd04      	ble.n	8000bb2 <fsmPedestrianModeRun+0xc2>
 8000ba8:	4b75      	ldr	r3, [pc, #468]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3b64      	subs	r3, #100	; 0x64
 8000bae:	4a74      	ldr	r2, [pc, #464]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000bb0:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f000 fca4 	bl	8001500 <isTimerUp>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d036      	beq.n	8000c2c <fsmPedestrianModeRun+0x13c>
 8000bbe:	4b6d      	ldr	r3, [pc, #436]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d132      	bne.n	8000c2c <fsmPedestrianModeRun+0x13c>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, 0);
 8000bc6:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <fsmPedestrianModeRun+0x28c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000bce:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f000 fca7 	bl	8001528 <setTimer>
				state = 1 - state;
 8000bda:	4b66      	ldr	r3, [pc, #408]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f1c3 0301 	rsb	r3, r3, #1
 8000be2:	4a64      	ldr	r2, [pc, #400]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000be4:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000be6:	4b64      	ldr	r3, [pc, #400]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	dc04      	bgt.n	8000bfc <fsmPedestrianModeRun+0x10c>
 8000bf2:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3364      	adds	r3, #100	; 0x64
 8000bf8:	4a5f      	ldr	r2, [pc, #380]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000bfa:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000bfc:	4b60      	ldr	r3, [pc, #384]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b64      	cmp	r3, #100	; 0x64
 8000c02:	dd13      	ble.n	8000c2c <fsmPedestrianModeRun+0x13c>
 8000c04:	4b5e      	ldr	r3, [pc, #376]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3b64      	subs	r3, #100	; 0x64
 8000c0a:	4a5d      	ldr	r2, [pc, #372]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000c0c:	6013      	str	r3, [r2, #0]
			}
			break;
 8000c0e:	e00d      	b.n	8000c2c <fsmPedestrianModeRun+0x13c>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_ON);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2104      	movs	r1, #4
 8000c14:	4855      	ldr	r0, [pc, #340]	; (8000d6c <fsmPedestrianModeRun+0x27c>)
 8000c16:	f001 f8b6 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	4853      	ldr	r0, [pc, #332]	; (8000d70 <fsmPedestrianModeRun+0x280>)
 8000c22:	f001 f8b0 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000c26:	e002      	b.n	8000c2e <fsmPedestrianModeRun+0x13e>
		default:
			break;
 8000c28:	bf00      	nop
 8000c2a:	e000      	b.n	8000c2e <fsmPedestrianModeRun+0x13e>
			break;
 8000c2c:	bf00      	nop
	}

	switch(hor_ped){
 8000c2e:	4b55      	ldr	r3, [pc, #340]	; (8000d84 <fsmPedestrianModeRun+0x294>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3b0c      	subs	r3, #12
 8000c34:	2b04      	cmp	r3, #4
 8000c36:	f200 8092 	bhi.w	8000d5e <fsmPedestrianModeRun+0x26e>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <fsmPedestrianModeRun+0x150>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000c55 	.word	0x08000c55
 8000c44:	08000d5f 	.word	0x08000d5f
 8000c48:	08000c6f 	.word	0x08000c6f
 8000c4c:	08000c89 	.word	0x08000c89
 8000c50:	08000d45 	.word	0x08000d45
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5a:	4844      	ldr	r0, [pc, #272]	; (8000d6c <fsmPedestrianModeRun+0x27c>)
 8000c5c:	f001 f893 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c66:	4842      	ldr	r0, [pc, #264]	; (8000d70 <fsmPedestrianModeRun+0x280>)
 8000c68:	f001 f88d 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000c6c:	e07a      	b.n	8000d64 <fsmPedestrianModeRun+0x274>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	483d      	ldr	r0, [pc, #244]	; (8000d6c <fsmPedestrianModeRun+0x27c>)
 8000c76:	f001 f886 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_ON);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c80:	483b      	ldr	r0, [pc, #236]	; (8000d70 <fsmPedestrianModeRun+0x280>)
 8000c82:	f001 f880 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000c86:	e06d      	b.n	8000d64 <fsmPedestrianModeRun+0x274>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f000 fc39 	bl	8001500 <isTimerUp>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d028      	beq.n	8000ce6 <fsmPedestrianModeRun+0x1f6>
 8000c94:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d124      	bne.n	8000ce6 <fsmPedestrianModeRun+0x1f6>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, pul);
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <fsmPedestrianModeRun+0x28c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 fc3b 	bl	8001528 <setTimer>
				state = 1 - state;
 8000cb2:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f1c3 0301 	rsb	r3, r3, #1
 8000cba:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000cbc:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	dc04      	bgt.n	8000cd4 <fsmPedestrianModeRun+0x1e4>
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3364      	adds	r3, #100	; 0x64
 8000cd0:	4a29      	ldr	r2, [pc, #164]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000cd2:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b64      	cmp	r3, #100	; 0x64
 8000cda:	dd04      	ble.n	8000ce6 <fsmPedestrianModeRun+0x1f6>
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3b64      	subs	r3, #100	; 0x64
 8000ce2:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000ce4:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f000 fc0a 	bl	8001500 <isTimerUp>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d037      	beq.n	8000d62 <fsmPedestrianModeRun+0x272>
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d133      	bne.n	8000d62 <fsmPedestrianModeRun+0x272>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <fsmPedestrianModeRun+0x28c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f000 fc0d 	bl	8001528 <setTimer>
				state = 1 - state;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f1c3 0301 	rsb	r3, r3, #1
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <fsmPedestrianModeRun+0x284>)
 8000d18:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000d22:	4293      	cmp	r3, r2
 8000d24:	dc04      	bgt.n	8000d30 <fsmPedestrianModeRun+0x240>
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3364      	adds	r3, #100	; 0x64
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <fsmPedestrianModeRun+0x288>)
 8000d2e:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b64      	cmp	r3, #100	; 0x64
 8000d36:	dd14      	ble.n	8000d62 <fsmPedestrianModeRun+0x272>
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3b64      	subs	r3, #100	; 0x64
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <fsmPedestrianModeRun+0x290>)
 8000d40:	6013      	str	r3, [r2, #0]
			}
			break;
 8000d42:	e00e      	b.n	8000d62 <fsmPedestrianModeRun+0x272>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_ON);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <fsmPedestrianModeRun+0x27c>)
 8000d4c:	f001 f81b 	bl	8001d86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <fsmPedestrianModeRun+0x280>)
 8000d58:	f001 f815 	bl	8001d86 <HAL_GPIO_WritePin>
			break;
 8000d5c:	e002      	b.n	8000d64 <fsmPedestrianModeRun+0x274>
		default:
			break;
 8000d5e:	bf00      	nop
 8000d60:	e000      	b.n	8000d64 <fsmPedestrianModeRun+0x274>
			break;
 8000d62:	bf00      	nop
	}


}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40010800 	.word	0x40010800
 8000d74:	20000054 	.word	0x20000054
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	200000a0 	.word	0x200000a0
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <fsmTuningModeRun>:
#include "fsm_tuning_mode.h"

int time_count = 0;

void fsmTuningModeRun() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	// FSM for TUNING MODE

	switch (mode) {
 8000d8c:	4b5e      	ldr	r3, [pc, #376]	; (8000f08 <fsmTuningModeRun+0x180>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b0b      	cmp	r3, #11
 8000d92:	d077      	beq.n	8000e84 <fsmTuningModeRun+0xfc>
 8000d94:	2b0b      	cmp	r3, #11
 8000d96:	f300 80ad 	bgt.w	8000ef4 <fsmTuningModeRun+0x16c>
 8000d9a:	2b09      	cmp	r3, #9
 8000d9c:	d002      	beq.n	8000da4 <fsmTuningModeRun+0x1c>
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d038      	beq.n	8000e14 <fsmTuningModeRun+0x8c>
			}

			break;

		default:
			break;
 8000da2:	e0a7      	b.n	8000ef4 <fsmTuningModeRun+0x16c>
			if (isButtonPressed(BUTTON_MODE)) {
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff faff 	bl	80003a8 <isButtonPressed>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <fsmTuningModeRun+0x2e>
				mode = AUTO_MODE;
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <fsmTuningModeRun+0x180>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff faf6 	bl	80003a8 <isButtonPressed>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <fsmTuningModeRun+0x4a>
				RED_time = time_count * 1000;
 8000dc2:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	4a50      	ldr	r2, [pc, #320]	; (8000f10 <fsmTuningModeRun+0x188>)
 8000dd0:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f7ff fae8 	bl	80003a8 <isButtonPressed>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <fsmTuningModeRun+0x64>
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff fafc 	bl	80003dc <isButtonLongPressed>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8086 	beq.w	8000ef8 <fsmTuningModeRun+0x170>
				time_count %= 100;
 8000dec:	4b47      	ldr	r3, [pc, #284]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <fsmTuningModeRun+0x18c>)
 8000df2:	fb83 1302 	smull	r1, r3, r3, r2
 8000df6:	1159      	asrs	r1, r3, #5
 8000df8:	17d3      	asrs	r3, r2, #31
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	2164      	movs	r1, #100	; 0x64
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	4a41      	ldr	r2, [pc, #260]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e06:	6013      	str	r3, [r2, #0]
				time_count++;
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e10:	6013      	str	r3, [r2, #0]
			break;
 8000e12:	e071      	b.n	8000ef8 <fsmTuningModeRun+0x170>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fac7 	bl	80003a8 <isButtonPressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <fsmTuningModeRun+0x9e>
				mode = AUTO_MODE;
 8000e20:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <fsmTuningModeRun+0x180>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff fabe 	bl	80003a8 <isButtonPressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <fsmTuningModeRun+0xba>
				GREEN_time = time_count * 1000;
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	4a36      	ldr	r2, [pc, #216]	; (8000f18 <fsmTuningModeRun+0x190>)
 8000e40:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff fab0 	bl	80003a8 <isButtonPressed>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <fsmTuningModeRun+0xd2>
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f7ff fac4 	bl	80003dc <isButtonLongPressed>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d050      	beq.n	8000efc <fsmTuningModeRun+0x174>
				time_count %= 90;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <fsmTuningModeRun+0x194>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	441a      	add	r2, r3
 8000e66:	1191      	asrs	r1, r2, #6
 8000e68:	17da      	asrs	r2, r3, #31
 8000e6a:	1a8a      	subs	r2, r1, r2
 8000e6c:	215a      	movs	r1, #90	; 0x5a
 8000e6e:	fb01 f202 	mul.w	r2, r1, r2
 8000e72:	1a9a      	subs	r2, r3, r2
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e76:	601a      	str	r2, [r3, #0]
				time_count++;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000e80:	6013      	str	r3, [r2, #0]
			break;
 8000e82:	e03b      	b.n	8000efc <fsmTuningModeRun+0x174>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fa8f 	bl	80003a8 <isButtonPressed>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <fsmTuningModeRun+0x10e>
				mode = AUTO_MODE;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <fsmTuningModeRun+0x180>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fa86 	bl	80003a8 <isButtonPressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <fsmTuningModeRun+0x12a>
				YELLOW_time = time_count * 1000;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <fsmTuningModeRun+0x198>)
 8000eb0:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f7ff fa78 	bl	80003a8 <isButtonPressed>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <fsmTuningModeRun+0x142>
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fa8c 	bl	80003dc <isButtonLongPressed>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d01a      	beq.n	8000f00 <fsmTuningModeRun+0x178>
				time_count %= 10;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <fsmTuningModeRun+0x19c>)
 8000ed0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed4:	109a      	asrs	r2, r3, #2
 8000ed6:	17cb      	asrs	r3, r1, #31
 8000ed8:	1ad2      	subs	r2, r2, r3
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	1aca      	subs	r2, r1, r3
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000ee6:	601a      	str	r2, [r3, #0]
				time_count++;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <fsmTuningModeRun+0x184>)
 8000ef0:	6013      	str	r3, [r2, #0]
			break;
 8000ef2:	e005      	b.n	8000f00 <fsmTuningModeRun+0x178>
			break;
 8000ef4:	bf00      	nop
 8000ef6:	e004      	b.n	8000f02 <fsmTuningModeRun+0x17a>
			break;
 8000ef8:	bf00      	nop
 8000efa:	e002      	b.n	8000f02 <fsmTuningModeRun+0x17a>
			break;
 8000efc:	bf00      	nop
 8000efe:	e000      	b.n	8000f02 <fsmTuningModeRun+0x17a>
			break;
 8000f00:	bf00      	nop
	}
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000005c 	.word	0x2000005c
 8000f0c:	20000058 	.word	0x20000058
 8000f10:	20000018 	.word	0x20000018
 8000f14:	51eb851f 	.word	0x51eb851f
 8000f18:	2000001c 	.word	0x2000001c
 8000f1c:	b60b60b7 	.word	0xb60b60b7
 8000f20:	20000020 	.word	0x20000020
 8000f24:	66666667 	.word	0x66666667

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fb70 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f81c 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f908 	bl	8001148 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f38:	f000 f8dc 	bl	80010f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f3c:	f000 f858 	bl	8000ff0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <main+0x40>)
 8000f42:	f001 fbc5 	bl	80026d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <main+0x40>)
 8000f4a:	f001 fc6b 	bl	8002824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <main+0x40>)
 8000f52:	f001 fc67 	bl	8002824 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsmAutoModeRun();
 8000f56:	f7ff fb7f 	bl	8000658 <fsmAutoModeRun>
	  fsmManualModeRun();
 8000f5a:	f7ff fb9b 	bl	8000694 <fsmManualModeRun>
	  fsmTuningModeRun();
 8000f5e:	f7ff ff13 	bl	8000d88 <fsmTuningModeRun>
	  fsmPedestrianModeRun();
 8000f62:	f7ff fdc5 	bl	8000af0 <fsmPedestrianModeRun>
	  fsmAutoModeRun();
 8000f66:	e7f6      	b.n	8000f56 <main+0x2e>
 8000f68:	200000a0 	.word	0x200000a0

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b090      	sub	sp, #64	; 0x40
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	2228      	movs	r2, #40	; 0x28
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fed6 	bl	8003d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f96:	2310      	movs	r3, #16
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fa2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 ff25 	bl	8001dfc <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fb8:	f000 f972 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 f990 	bl	80022fc <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fe2:	f000 f95d 	bl	80012a0 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3740      	adds	r7, #64	; 0x40
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	615a      	str	r2, [r3, #20]
 800101e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001022:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <MX_TIM3_Init+0x100>)
 8001024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001028:	223f      	movs	r2, #63	; 0x3f
 800102a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <MX_TIM3_Init+0xfc>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001038:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <MX_TIM3_Init+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001046:	4829      	ldr	r0, [pc, #164]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001048:	f001 faf2 	bl	8002630 <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001052:	f000 f925 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001060:	4619      	mov	r1, r3
 8001062:	4822      	ldr	r0, [pc, #136]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001064:	f001 fe46 	bl	8002cf4 <HAL_TIM_ConfigClockSource>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800106e:	f000 f917 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001072:	481e      	ldr	r0, [pc, #120]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001074:	f001 fb7e 	bl	8002774 <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800107e:	f000 f90f 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	4619      	mov	r1, r3
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001092:	f002 f9bb 	bl	800340c <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800109c:	f000 f900 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	2360      	movs	r3, #96	; 0x60
 80010a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_TIM3_Init+0xfc>)
 80010b8:	f001 fd5e 	bl	8002b78 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010c2:	f000 f8ed 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2204      	movs	r2, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM3_Init+0xfc>)
 80010ce:	f001 fd53 	bl	8002b78 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010d8:	f000 f8e2 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM3_Init+0xfc>)
 80010de:	f000 f93d 	bl	800135c <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3738      	adds	r7, #56	; 0x38
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000a0 	.word	0x200000a0
 80010f0:	40000400 	.word	0x40000400

080010f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_USART2_UART_Init+0x50>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 800112c:	f002 f9de 	bl	80034ec <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001136:	f000 f8b3 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000100 	.word	0x20000100
 8001144:	40004400 	.word	0x40004400

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <MX_GPIO_Init+0x12c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a44      	ldr	r2, [pc, #272]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <MX_GPIO_Init+0x12c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a3e      	ldr	r2, [pc, #248]	; (8001274 <MX_GPIO_Init+0x12c>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_GPIO_Init+0x12c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a38      	ldr	r2, [pc, #224]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <MX_GPIO_Init+0x12c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a32      	ldr	r2, [pc, #200]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80011c2:	482d      	ldr	r0, [pc, #180]	; (8001278 <MX_GPIO_Init+0x130>)
 80011c4:	f000 fddf 	bl	8001d86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 80011c8:	2200      	movs	r2, #0
 80011ca:	f240 413c 	movw	r1, #1084	; 0x43c
 80011ce:	482b      	ldr	r0, [pc, #172]	; (800127c <MX_GPIO_Init+0x134>)
 80011d0:	f000 fdd9 	bl	8001d86 <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_GPIO_Init+0x138>)
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	4826      	ldr	r0, [pc, #152]	; (8001284 <MX_GPIO_Init+0x13c>)
 80011ea:	f000 fc31 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_PED_Pin BUTTON_MODE_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_PED_Pin|BUTTON_MODE_Pin|BUTTON_SET_Pin;
 80011ee:	2313      	movs	r3, #19
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	481d      	ldr	r0, [pc, #116]	; (8001278 <MX_GPIO_Init+0x130>)
 8001202:	f000 fc25 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_GREEN_P1_Pin LED_GREEN_P2_Pin LED_RED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin;
 8001206:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4816      	ldr	r0, [pc, #88]	; (8001278 <MX_GPIO_Init+0x130>)
 8001220:	f000 fc16 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INC_Pin */
  GPIO_InitStruct.Pin = BUTTON_INC_Pin;
 8001224:	2301      	movs	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INC_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_GPIO_Init+0x134>)
 8001238:	f000 fc0a 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_P2_Pin LED_RED_P1_Pin LED_GREEN_1_Pin LED_GREEN_2_Pin
                           LED_RED_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 800123c:	f240 433c 	movw	r3, #1084	; 0x43c
 8001240:	613b      	str	r3, [r7, #16]
                          |LED_RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2302      	movs	r3, #2
 800124c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_GPIO_Init+0x134>)
 8001256:	f000 fbfb 	bl	8001a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f000 fb0f 	bl	8001882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001264:	2028      	movs	r0, #40	; 0x28
 8001266:	f000 fb28 	bl	80018ba <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	10110000 	.word	0x10110000
 8001284:	40011000 	.word	0x40011000

08001288 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001290:	f000 f968 	bl	8001564 <timerRun>
	getKeyInput();
 8001294:	f7ff f90e 	bl	80004b4 <getKeyInput>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_MspInit+0x5c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_MspInit+0x5c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_MspInit+0x5c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x5c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_MspInit+0x5c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_MspInit+0x5c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_MspInit+0x60>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_MspInit+0x60>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_TIM_Base_MspInit+0x44>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d113      	bne.n	800134a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_TIM_Base_MspInit+0x48>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_TIM_Base_MspInit+0x48>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_TIM_Base_MspInit+0x48>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	201d      	movs	r0, #29
 8001340:	f000 fa9f 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001344:	201d      	movs	r0, #29
 8001346:	f000 fab8 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000400 	.word	0x40000400
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_TIM_MspPostInit+0x58>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d117      	bne.n	80013ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_TIM_MspPostInit+0x5c>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_TIM_MspPostInit+0x5c>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_TIM_MspPostInit+0x5c>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2302      	movs	r3, #2
 800139e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_TIM_MspPostInit+0x60>)
 80013a8:	f000 fb52 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40000400 	.word	0x40000400
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_UART_MspInit+0x80>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d12b      	bne.n	8001438 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ea:	61d3      	str	r3, [r2, #28]
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_UART_MspInit+0x84>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001410:	230c      	movs	r3, #12
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <HAL_UART_MspInit+0x88>)
 8001424:	f000 fb14 	bl	8001a50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2026      	movs	r0, #38	; 0x26
 800142e:	f000 fa28 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001432:	2026      	movs	r0, #38	; 0x26
 8001434:	f000 fa41 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40004400 	.word	0x40004400
 8001444:	40021000 	.word	0x40021000
 8001448:	40010800 	.word	0x40010800

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 f903 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM3_IRQHandler+0x10>)
 80014a2:	f001 fa61 	bl	8002968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000a0 	.word	0x200000a0

080014b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART2_IRQHandler+0x10>)
 80014b6:	f002 f867 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000100 	.word	0x20000100

080014c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014cc:	f000 fc74 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <currentCounter>:
#include "timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

int currentCounter(int timer) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <currentCounter+0x1c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200000e8 	.word	0x200000e8

08001500 <isTimerUp>:

int isTimerUp(int timer) {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <isTimerUp+0x24>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	2b01      	cmp	r3, #1
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	200000f4 	.word	0x200000f4

08001528 <setTimer>:

void setTimer(int timer, int duration){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration / timer_cycle;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <setTimer+0x30>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	fb92 f2f3 	sdiv	r2, r2, r3
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <setTimer+0x34>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <setTimer+0x38>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2100      	movs	r1, #0
 800154a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	20000010 	.word	0x20000010
 800155c:	200000e8 	.word	0x200000e8
 8001560:	200000f4 	.word	0x200000f4

08001564 <timerRun>:
void timerRun(){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	e01c      	b.n	80015aa <timerRun+0x46>
		if(timer_counter[timer] > 0){
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <timerRun+0x58>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd13      	ble.n	80015a4 <timerRun+0x40>
			timer_counter[timer]--;
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <timerRun+0x58>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <timerRun+0x58>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0) {
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <timerRun+0x58>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d104      	bne.n	80015a4 <timerRun+0x40>
				timer_flag[timer] = 1;
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <timerRun+0x5c>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2101      	movs	r1, #1
 80015a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3301      	adds	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	dddf      	ble.n	8001570 <timerRun+0xc>
			}
		}
	}
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	200000e8 	.word	0x200000e8
 80015c0:	200000f4 	.word	0x200000f4

080015c4 <Reset_Handler>:
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <LoopFillZerobss+0x1a>)
 80015ca:	2300      	movs	r3, #0
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:
 80015ce:	58d4      	ldr	r4, [r2, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:
 80015d4:	18c4      	adds	r4, r0, r3
 80015d6:	428c      	cmp	r4, r1
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <LoopFillZerobss+0x1e>)
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <LoopFillZerobss+0x22>)
 80015de:	2300      	movs	r3, #0
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:
 80015e6:	42a2      	cmp	r2, r4
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>
 80015ea:	f7ff ff73 	bl	80014d4 <SystemInit>
 80015ee:	f002 fb79 	bl	8003ce4 <__libc_init_array>
 80015f2:	f7ff fc99 	bl	8000f28 <main>
 80015f6:	4770      	bx	lr
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000030 	.word	0x20000030
 8001600:	08003d84 	.word	0x08003d84
 8001604:	20000030 	.word	0x20000030
 8001608:	2000017c 	.word	0x2000017c

0800160c <ADC1_2_IRQHandler>:
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x28>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f923 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fe3e 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f93b 	bl	80018d6 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f903 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000024 	.word	0x20000024
 8001694:	2000002c 	.word	0x2000002c
 8001698:	20000028 	.word	0x20000028

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	2000002c 	.word	0x2000002c
 80016bc:	20000178 	.word	0x20000178

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	20000178 	.word	0x20000178

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001900:	2b02      	cmp	r3, #2
 8001902:	d008      	beq.n	8001916 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2204      	movs	r2, #4
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e020      	b.n	8001958 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020e 	bic.w	r2, r2, #14
 8001924:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001976:	2b02      	cmp	r3, #2
 8001978:	d005      	beq.n	8001986 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2204      	movs	r2, #4
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e051      	b.n	8001a2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 020e 	bic.w	r2, r2, #14
 8001994:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_DMA_Abort_IT+0xd0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d029      	beq.n	8001a04 <HAL_DMA_Abort_IT+0xa0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_DMA_Abort_IT+0xd4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d022      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x9c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_DMA_Abort_IT+0xd8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d01a      	beq.n	80019fa <HAL_DMA_Abort_IT+0x96>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_DMA_Abort_IT+0xdc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d012      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x90>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_DMA_Abort_IT+0xe0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00a      	beq.n	80019ee <HAL_DMA_Abort_IT+0x8a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <HAL_DMA_Abort_IT+0xe4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d102      	bne.n	80019e8 <HAL_DMA_Abort_IT+0x84>
 80019e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019e6:	e00e      	b.n	8001a06 <HAL_DMA_Abort_IT+0xa2>
 80019e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ec:	e00b      	b.n	8001a06 <HAL_DMA_Abort_IT+0xa2>
 80019ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f2:	e008      	b.n	8001a06 <HAL_DMA_Abort_IT+0xa2>
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	e005      	b.n	8001a06 <HAL_DMA_Abort_IT+0xa2>
 80019fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fe:	e002      	b.n	8001a06 <HAL_DMA_Abort_IT+0xa2>
 8001a00:	2310      	movs	r3, #16
 8001a02:	e000      	b.n	8001a06 <HAL_DMA_Abort_IT+0xa2>
 8001a04:	2301      	movs	r3, #1
 8001a06:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_DMA_Abort_IT+0xe8>)
 8001a08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
    } 
  }
  return status;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40020008 	.word	0x40020008
 8001a38:	4002001c 	.word	0x4002001c
 8001a3c:	40020030 	.word	0x40020030
 8001a40:	40020044 	.word	0x40020044
 8001a44:	40020058 	.word	0x40020058
 8001a48:	4002006c 	.word	0x4002006c
 8001a4c:	40020000 	.word	0x40020000

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e169      	b.n	8001d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a64:	2201      	movs	r2, #1
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8158 	bne.w	8001d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a9a      	ldr	r2, [pc, #616]	; (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d05e      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a98      	ldr	r2, [pc, #608]	; (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d875      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a92:	4a98      	ldr	r2, [pc, #608]	; (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d058      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a98:	4a96      	ldr	r2, [pc, #600]	; (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d86f      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a9e:	4a96      	ldr	r2, [pc, #600]	; (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d052      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001aa4:	4a94      	ldr	r2, [pc, #592]	; (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d869      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aaa:	4a94      	ldr	r2, [pc, #592]	; (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d04c      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001ab0:	4a92      	ldr	r2, [pc, #584]	; (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d863      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ab6:	4a92      	ldr	r2, [pc, #584]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d046      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001abc:	4a90      	ldr	r2, [pc, #576]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d85d      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d82a      	bhi.n	8001b1c <HAL_GPIO_Init+0xcc>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d859      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aca:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <HAL_GPIO_Init+0x80>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001b4b 	.word	0x08001b4b
 8001ad4:	08001b25 	.word	0x08001b25
 8001ad8:	08001b37 	.word	0x08001b37
 8001adc:	08001b79 	.word	0x08001b79
 8001ae0:	08001b7f 	.word	0x08001b7f
 8001ae4:	08001b7f 	.word	0x08001b7f
 8001ae8:	08001b7f 	.word	0x08001b7f
 8001aec:	08001b7f 	.word	0x08001b7f
 8001af0:	08001b7f 	.word	0x08001b7f
 8001af4:	08001b7f 	.word	0x08001b7f
 8001af8:	08001b7f 	.word	0x08001b7f
 8001afc:	08001b7f 	.word	0x08001b7f
 8001b00:	08001b7f 	.word	0x08001b7f
 8001b04:	08001b7f 	.word	0x08001b7f
 8001b08:	08001b7f 	.word	0x08001b7f
 8001b0c:	08001b7f 	.word	0x08001b7f
 8001b10:	08001b7f 	.word	0x08001b7f
 8001b14:	08001b2d 	.word	0x08001b2d
 8001b18:	08001b41 	.word	0x08001b41
 8001b1c:	4a79      	ldr	r2, [pc, #484]	; (8001d04 <HAL_GPIO_Init+0x2b4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b22:	e02c      	b.n	8001b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e029      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e024      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e01f      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	330c      	adds	r3, #12
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e01a      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b52:	2304      	movs	r3, #4
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e013      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b60:	2308      	movs	r3, #8
 8001b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	611a      	str	r2, [r3, #16]
          break;
 8001b6a:	e009      	b.n	8001b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	615a      	str	r2, [r3, #20]
          break;
 8001b76:	e003      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          break;
 8001b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d801      	bhi.n	8001b8a <HAL_GPIO_Init+0x13a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_Init+0x13e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d802      	bhi.n	8001b9c <HAL_GPIO_Init+0x14c>
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x152>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3b08      	subs	r3, #8
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	210f      	movs	r1, #15
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80b1 	beq.w	8001d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_GPIO_Init+0x2bc>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1ec>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <HAL_GPIO_Init+0x2c4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1e8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3e      	ldr	r2, [pc, #248]	; (8001d18 <HAL_GPIO_Init+0x2c8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1e4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <HAL_GPIO_Init+0x2cc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1e0>
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c30:	2304      	movs	r3, #4
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c4e:	492f      	ldr	r1, [pc, #188]	; (8001d0c <HAL_GPIO_Init+0x2bc>)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	492c      	ldr	r1, [pc, #176]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4928      	ldr	r1, [pc, #160]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4922      	ldr	r1, [pc, #136]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	491e      	ldr	r1, [pc, #120]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	4918      	ldr	r1, [pc, #96]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4914      	ldr	r1, [pc, #80]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d021      	beq.n	8001d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
 8001cec:	e021      	b.n	8001d32 <HAL_GPIO_Init+0x2e2>
 8001cee:	bf00      	nop
 8001cf0:	10320000 	.word	0x10320000
 8001cf4:	10310000 	.word	0x10310000
 8001cf8:	10220000 	.word	0x10220000
 8001cfc:	10210000 	.word	0x10210000
 8001d00:	10120000 	.word	0x10120000
 8001d04:	10110000 	.word	0x10110000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	40010c00 	.word	0x40010c00
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40011400 	.word	0x40011400
 8001d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	3301      	adds	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f47f ae8e 	bne.w	8001a64 <HAL_GPIO_Init+0x14>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	372c      	adds	r7, #44	; 0x2c
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	807b      	strh	r3, [r7, #2]
 8001d92:	4613      	mov	r3, r2
 8001d94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d96:	787b      	ldrb	r3, [r7, #1]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9c:	887a      	ldrh	r2, [r7, #2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001da2:	e003      	b.n	8001dac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	041a      	lsls	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	611a      	str	r2, [r3, #16]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f806 	bl	8001de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e26c      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e28:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d112      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d06c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x12c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d168      	bne.n	8001f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e246      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x76>
 8001e64:	4b80      	ldr	r3, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7f      	ldr	r2, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e02e      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a77      	ldr	r2, [pc, #476]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xbc>
 8001e9e:	4b72      	ldr	r3, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a71      	ldr	r2, [pc, #452]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6a      	ldr	r2, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fbf2 	bl	80016c0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fbee 	bl	80016c0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1fa      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe4>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fbde 	bl	80016c0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fbda 	bl	80016c0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1e6      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x10c>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1ba      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4939      	ldr	r1, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fb93 	bl	80016c0 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fb8f 	bl	80016c0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e19b      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fb72 	bl	80016c0 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fb6e 	bl	80016c0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e17a      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03a      	beq.n	8002080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff fb52 	bl	80016c0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fb4e 	bl	80016c0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e15a      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 fad8 	bl	80025f4 <RCC_Delay>
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7ff fb38 	bl	80016c0 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002052:	e00f      	b.n	8002074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff fb34 	bl	80016c0 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e140      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	42420000 	.word	0x42420000
 8002070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b9e      	ldr	r3, [pc, #632]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e9      	bne.n	8002054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a6 	beq.w	80021da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b97      	ldr	r3, [pc, #604]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a93      	ldr	r2, [pc, #588]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a8a      	ldr	r2, [pc, #552]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7ff faf5 	bl	80016c0 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff faf1 	bl	80016c0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0fd      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x312>
 8002100:	4b7b      	ldr	r3, [pc, #492]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a7a      	ldr	r2, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a75      	ldr	r2, [pc, #468]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x356>
 8002138:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a6c      	ldr	r2, [pc, #432]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff faa5 	bl	80016c0 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff faa1 	bl	80016c0 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0ab      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x37e>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff fa8f 	bl	80016c0 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff fa8b 	bl	80016c0 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e095      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8081 	beq.w	80022e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d146      	bne.n	8002286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fa5f 	bl	80016c0 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff fa5b 	bl	80016c0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e067      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	492d      	ldr	r1, [pc, #180]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a19      	ldr	r1, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	430b      	orrs	r3, r1
 8002252:	4927      	ldr	r1, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff fa2f 	bl	80016c0 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff fa2b 	bl	80016c0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e037      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x46a>
 8002284:	e02f      	b.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fa18 	bl	80016c0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff fa14 	bl	80016c0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e020      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x498>
 80022b2:	e018      	b.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420060 	.word	0x42420060

080022fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7ff f968 	bl	80016c0 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7ff f964 	bl	80016c0 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f8c6 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08003d64 	.word	0x08003d64
 80024c8:	20000024 	.word	0x20000024
 80024cc:	20000028 	.word	0x20000028

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b490      	push	{r4, r7}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024d8:	1d3c      	adds	r4, r7, #4
 80024da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e0:	f240 2301 	movw	r3, #513	; 0x201
 80024e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x40>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x46>
 800250e:	e02d      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002512:	623b      	str	r3, [r7, #32]
      break;
 8002514:	e02d      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002522:	4413      	add	r3, r2
 8002524:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002528:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	0c5b      	lsrs	r3, r3, #17
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002542:	4413      	add	r3, r2
 8002544:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002548:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254e:	fb02 f203 	mul.w	r2, r2, r3
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	e004      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	623b      	str	r3, [r7, #32]
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256e:	623b      	str	r3, [r7, #32]
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6a3b      	ldr	r3, [r7, #32]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc90      	pop	{r4, r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	08003d54 	.word	0x08003d54
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	003d0900 	.word	0x003d0900

08002590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000024 	.word	0x20000024

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff2 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08003d74 	.word	0x08003d74

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d0:	f7ff ffde 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08003d74 	.word	0x08003d74

080025f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <RCC_Delay+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <RCC_Delay+0x38>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002610:	bf00      	nop
  }
  while (Delay --);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60fa      	str	r2, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <RCC_Delay+0x1c>
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000024 	.word	0x20000024
 800262c:	10624dd3 	.word	0x10624dd3

08002630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e041      	b.n	80026c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fe5a 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f000 fc28 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e03a      	b.n	800275e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_TIM_Base_Start_IT+0x98>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00e      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x58>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d009      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x58>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <HAL_TIM_Base_Start_IT+0x9c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x58>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <HAL_TIM_Base_Start_IT+0xa0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d111      	bne.n	800274c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d010      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	e007      	b.n	800275c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800

08002774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e041      	b.n	800280a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f839 	bl	8002812 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 fb86 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_TIM_PWM_Start+0x24>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e022      	b.n	800288e <HAL_TIM_PWM_Start+0x6a>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d109      	bne.n	8002862 <HAL_TIM_PWM_Start+0x3e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e015      	b.n	800288e <HAL_TIM_PWM_Start+0x6a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d109      	bne.n	800287c <HAL_TIM_PWM_Start+0x58>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e008      	b.n	800288e <HAL_TIM_PWM_Start+0x6a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e05e      	b.n	8002954 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_PWM_Start+0x82>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a4:	e013      	b.n	80028ce <HAL_TIM_PWM_Start+0xaa>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_PWM_Start+0x92>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b4:	e00b      	b.n	80028ce <HAL_TIM_PWM_Start+0xaa>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_PWM_Start+0xa2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c4:	e003      	b.n	80028ce <HAL_TIM_PWM_Start+0xaa>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	6839      	ldr	r1, [r7, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fd74 	bl	80033c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_TIM_PWM_Start+0x138>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d107      	bne.n	80028f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_TIM_PWM_Start+0x138>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_TIM_PWM_Start+0xfa>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d009      	beq.n	800291e <HAL_TIM_PWM_Start+0xfa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_TIM_PWM_Start+0x13c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_TIM_PWM_Start+0xfa>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_TIM_PWM_Start+0x140>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d111      	bne.n	8002942 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b06      	cmp	r3, #6
 800292e:	d010      	beq.n	8002952 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	e007      	b.n	8002952 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0202 	mvn.w	r2, #2
 8002994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa6f 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa62 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fa71 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0204 	mvn.w	r2, #4
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa45 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa38 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa47 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0208 	mvn.w	r2, #8
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa1b 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa0e 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fa1d 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0210 	mvn.w	r2, #16
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2208      	movs	r2, #8
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9f1 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9e4 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f9f3 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0201 	mvn.w	r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fbce 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d107      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fce1 	bl	80034da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f9b7 	bl	8002eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0220 	mvn.w	r2, #32
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fcac 	bl	80034c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e0ac      	b.n	8002cec <HAL_TIM_PWM_ConfigChannel+0x174>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	f200 809f 	bhi.w	8002ce0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002ce1 	.word	0x08002ce1
 8002bb0:	08002ce1 	.word	0x08002ce1
 8002bb4:	08002ce1 	.word	0x08002ce1
 8002bb8:	08002c1d 	.word	0x08002c1d
 8002bbc:	08002ce1 	.word	0x08002ce1
 8002bc0:	08002ce1 	.word	0x08002ce1
 8002bc4:	08002ce1 	.word	0x08002ce1
 8002bc8:	08002c5f 	.word	0x08002c5f
 8002bcc:	08002ce1 	.word	0x08002ce1
 8002bd0:	08002ce1 	.word	0x08002ce1
 8002bd4:	08002ce1 	.word	0x08002ce1
 8002bd8:	08002c9f 	.word	0x08002c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f9d0 	bl	8002f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6999      	ldr	r1, [r3, #24]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	619a      	str	r2, [r3, #24]
      break;
 8002c1a:	e062      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fa16 	bl	8003054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6999      	ldr	r1, [r3, #24]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
      break;
 8002c5c:	e041      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa5f 	bl	8003128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0208 	orr.w	r2, r2, #8
 8002c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0204 	bic.w	r2, r2, #4
 8002c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
      break;
 8002c9c:	e021      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 faa9 	bl	80031fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69d9      	ldr	r1, [r3, #28]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	61da      	str	r2, [r3, #28]
      break;
 8002cde:	e000      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ce0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIM_ConfigClockSource+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0b3      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x180>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d44:	d03e      	beq.n	8002dc4 <HAL_TIM_ConfigClockSource+0xd0>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	f200 8087 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	f000 8085 	beq.w	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	d87f      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d5c:	2b70      	cmp	r3, #112	; 0x70
 8002d5e:	d01a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xa2>
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d87b      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d64:	2b60      	cmp	r3, #96	; 0x60
 8002d66:	d050      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x116>
 8002d68:	2b60      	cmp	r3, #96	; 0x60
 8002d6a:	d877      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d6c:	2b50      	cmp	r3, #80	; 0x50
 8002d6e:	d03c      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0xf6>
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d873      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d058      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x136>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d86f      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	d064      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x156>
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	d86b      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d060      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x156>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d867      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05c      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x156>
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d05a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d94:	e062      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f000 faee 	bl	8003386 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002db8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	609a      	str	r2, [r3, #8]
      break;
 8002dc2:	e04e      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f000 fad7 	bl	8003386 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de6:	609a      	str	r2, [r3, #8]
      break;
 8002de8:	e03b      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f000 fa4e 	bl	8003298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2150      	movs	r1, #80	; 0x50
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 faa5 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8002e08:	e02b      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 fa6c 	bl	80032f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2160      	movs	r1, #96	; 0x60
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fa95 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8002e28:	e01b      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 fa2e 	bl	8003298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fa85 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8002e48:	e00b      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f000 fa7c 	bl	8003352 <TIM_ITRx_SetConfig>
        break;
 8002e5a:	e002      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <TIM_Base_SetConfig+0xb8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <TIM_Base_SetConfig+0xbc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d108      	bne.n	8002f06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <TIM_Base_SetConfig+0xb8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <TIM_Base_SetConfig+0xbc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <TIM_Base_SetConfig+0xb8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800

08002f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0201 	bic.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 0302 	bic.w	r3, r3, #2
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <TIM_OC1_SetConfig+0xc8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10c      	bne.n	8002ffe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f023 0308 	bic.w	r3, r3, #8
 8002fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <TIM_OC1_SetConfig+0xc8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d111      	bne.n	800302a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40012c00 	.word	0x40012c00

08003054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0210 	bic.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0320 	bic.w	r3, r3, #32
 800309e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <TIM_OC2_SetConfig+0xd0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10d      	bne.n	80030d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a14      	ldr	r2, [pc, #80]	; (8003124 <TIM_OC2_SetConfig+0xd0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d113      	bne.n	8003100 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40012c00 	.word	0x40012c00

08003128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <TIM_OC3_SetConfig+0xd0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10d      	bne.n	80031a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800318c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <TIM_OC3_SetConfig+0xd0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40012c00 	.word	0x40012c00

080031fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <TIM_OC4_SetConfig+0x98>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d109      	bne.n	8003270 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40012c00 	.word	0x40012c00

08003298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0201 	bic.w	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 030a 	bic.w	r3, r3, #10
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f023 0210 	bic.w	r2, r3, #16
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800331e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	031b      	lsls	r3, r3, #12
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003330:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	f043 0307 	orr.w	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	021a      	lsls	r2, r3, #8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	609a      	str	r2, [r3, #8]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2201      	movs	r2, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	401a      	ands	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e046      	b.n	80034b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d009      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d10c      	bne.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4313      	orrs	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800

080034c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e03f      	b.n	800357e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd ff54 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	; 0x24
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fb49 	bl	8003bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_UART_IRQHandler+0x52>
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa4f 	bl	8003a76 <UART_Receive_IT>
      return;
 80035d8:	e17b      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80b1 	beq.w	8003744 <HAL_UART_IRQHandler+0x1bc>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_UART_IRQHandler+0x70>
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_UART_IRQHandler+0x90>
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_UART_IRQHandler+0xb0>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_UART_IRQHandler+0xd0>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00f      	beq.n	8003682 <HAL_UART_IRQHandler+0xfa>
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <HAL_UART_IRQHandler+0xee>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f043 0208 	orr.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 811e 	beq.w	80038c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_UART_IRQHandler+0x11e>
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f9e8 	bl	8003a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <HAL_UART_IRQHandler+0x146>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d031      	beq.n	8003732 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f92a 	bl	8003928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d023      	beq.n	800372a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	4a76      	ldr	r2, [pc, #472]	; (80038d8 <HAL_UART_IRQHandler+0x350>)
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe f92c 	bl	8001964 <HAL_DMA_Abort_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800371c:	4610      	mov	r0, r2
 800371e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00e      	b.n	8003740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8ec 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e00a      	b.n	8003740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8e8 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	e006      	b.n	8003740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8e4 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800373e:	e0c3      	b.n	80038c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	bf00      	nop
    return;
 8003742:	e0c1      	b.n	80038c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 80a1 	bne.w	8003890 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 809b 	beq.w	8003890 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8095 	beq.w	8003890 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04e      	beq.n	8003828 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003794:	8a3b      	ldrh	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8098 	beq.w	80038cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037a0:	8a3a      	ldrh	r2, [r7, #16]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	f080 8092 	bcs.w	80038cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8a3a      	ldrh	r2, [r7, #16]
 80037ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d02b      	beq.n	8003810 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0210 	bic.w	r2, r2, #16
 8003804:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe f86f 	bl	80018ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f876 	bl	8003912 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003826:	e051      	b.n	80038cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003830:	b29b      	uxth	r3, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d047      	beq.n	80038d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003840:	8a7b      	ldrh	r3, [r7, #18]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d044      	beq.n	80038d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003854:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0210 	bic.w	r2, r2, #16
 8003882:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003884:	8a7b      	ldrh	r3, [r7, #18]
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f842 	bl	8003912 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800388e:	e01f      	b.n	80038d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_UART_IRQHandler+0x324>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f87f 	bl	80039a8 <UART_Transmit_IT>
    return;
 80038aa:	e012      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_UART_IRQHandler+0x34a>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8c0 	bl	8003a46 <UART_EndTransmit_IT>
    return;
 80038c6:	e004      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80038c8:	bf00      	nop
 80038ca:	e002      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80038d0:	bf00      	nop
  }
}
 80038d2:	3728      	adds	r7, #40	; 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	08003981 	.word	0x08003981

080038dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800393e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0210 	bic.w	r2, r2, #16
 8003966:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ffb0 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b21      	cmp	r3, #33	; 0x21
 80039ba:	d13e      	bne.n	8003a3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c4:	d114      	bne.n	80039f0 <UART_Transmit_IT+0x48>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d110      	bne.n	80039f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	1c9a      	adds	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]
 80039ee:	e008      	b.n	8003a02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6211      	str	r1, [r2, #32]
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ff38 	bl	80038dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b22      	cmp	r3, #34	; 0x22
 8003a88:	f040 8099 	bne.w	8003bbe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a94:	d117      	bne.n	8003ac6 <UART_Receive_IT+0x50>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d113      	bne.n	8003ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac4:	e026      	b.n	8003b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	d007      	beq.n	8003aea <UART_Receive_IT+0x74>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <UART_Receive_IT+0x82>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e008      	b.n	8003b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4619      	mov	r1, r3
 8003b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d148      	bne.n	8003bba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0220 	bic.w	r2, r2, #32
 8003b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d123      	bne.n	8003bb0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0210 	bic.w	r2, r2, #16
 8003b7c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d10a      	bne.n	8003ba2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff feb2 	bl	8003912 <HAL_UARTEx_RxEventCallback>
 8003bae:	e002      	b.n	8003bb6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fe9c 	bl	80038ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e002      	b.n	8003bc0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
  }
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c02:	f023 030c 	bic.w	r3, r3, #12
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <UART_SetConfig+0x114>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d103      	bne.n	8003c38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c30:	f7fe fccc 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	e002      	b.n	8003c3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7fe fcb4 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003c3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009a      	lsls	r2, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	4a22      	ldr	r2, [pc, #136]	; (8003ce0 <UART_SetConfig+0x118>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	0119      	lsls	r1, r3, #4
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009a      	lsls	r2, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c74:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <UART_SetConfig+0x118>)
 8003c76:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2064      	movs	r0, #100	; 0x64
 8003c7e:	fb00 f303 	mul.w	r3, r0, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	3332      	adds	r3, #50	; 0x32
 8003c88:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <UART_SetConfig+0x118>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c94:	4419      	add	r1, r3
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009a      	lsls	r2, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <UART_SetConfig+0x118>)
 8003cae:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2064      	movs	r0, #100	; 0x64
 8003cb6:	fb00 f303 	mul.w	r3, r0, r3
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	3332      	adds	r3, #50	; 0x32
 8003cc0:	4a07      	ldr	r2, [pc, #28]	; (8003ce0 <UART_SetConfig+0x118>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	f003 020f 	and.w	r2, r3, #15
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	51eb851f 	.word	0x51eb851f

08003ce4 <__libc_init_array>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	4d0c      	ldr	r5, [pc, #48]	; (8003d1c <__libc_init_array+0x38>)
 8003cea:	4c0d      	ldr	r4, [pc, #52]	; (8003d20 <__libc_init_array+0x3c>)
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	42a6      	cmp	r6, r4
 8003cf2:	d109      	bne.n	8003d08 <__libc_init_array+0x24>
 8003cf4:	f000 f822 	bl	8003d3c <_init>
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	4d0a      	ldr	r5, [pc, #40]	; (8003d24 <__libc_init_array+0x40>)
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	; (8003d28 <__libc_init_array+0x44>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	42a6      	cmp	r6, r4
 8003d04:	d105      	bne.n	8003d12 <__libc_init_array+0x2e>
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0c:	4798      	blx	r3
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7ee      	b.n	8003cf0 <__libc_init_array+0xc>
 8003d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d16:	4798      	blx	r3
 8003d18:	3601      	adds	r6, #1
 8003d1a:	e7f2      	b.n	8003d02 <__libc_init_array+0x1e>
 8003d1c:	08003d7c 	.word	0x08003d7c
 8003d20:	08003d7c 	.word	0x08003d7c
 8003d24:	08003d7c 	.word	0x08003d7c
 8003d28:	08003d80 	.word	0x08003d80

08003d2c <memset>:
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4402      	add	r2, r0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d100      	bne.n	8003d36 <memset+0xa>
 8003d34:	4770      	bx	lr
 8003d36:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3a:	e7f9      	b.n	8003d30 <memset+0x4>

08003d3c <_init>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr

08003d48 <_fini>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr
