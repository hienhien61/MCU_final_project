
STM32_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af4  08004af4  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004af4  08004af4  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af4  08004af4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000094  08004b90  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004b90  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b02  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e50  00000000  00000000  00036bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0003a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c1d  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011add  00000000  00000000  0005500d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2b5  00000000  00000000  00066aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1d9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000f1df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a48 	.word	0x08004a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004a48 	.word	0x08004a48

0800014c <fsmHorLEDsRun>:
#include "LEDs_display.h"

int horizontal_status = MODE_INIT;
int vertical_status = MODE_INIT;

void fsmHorLEDsRun() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// FSM for horizontal LEDs

	switch (horizontal_status) {
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	d847      	bhi.n	80001e8 <fsmHorLEDsRun+0x9c>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsmHorLEDsRun+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000175 	.word	0x08000175
 8000164:	080001e9 	.word	0x080001e9
 8000168:	08000189 	.word	0x08000189
 800016c:	080001a9 	.word	0x080001a9
 8000170:	080001c9 	.word	0x080001c9
		case MODE_INIT:
			horizontal_status = AUTO_RED;
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000176:	2202      	movs	r2, #2
 8000178:	601a      	str	r2, [r3, #0]
			setTimer(0, RED_time);
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <fsmHorLEDsRun+0xb4>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4619      	mov	r1, r3
 8000180:	2000      	movs	r0, #0
 8000182:	f001 fa09 	bl	8001598 <setTimer>
			break;
 8000186:	e036      	b.n	80001f6 <fsmHorLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(0)) {
 8000188:	2000      	movs	r0, #0
 800018a:	f001 f9f1 	bl	8001570 <isTimerUp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d02b      	beq.n	80001ec <fsmHorLEDsRun+0xa0>
				horizontal_status = AUTO_GREEN;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000196:	2203      	movs	r2, #3
 8000198:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN_time);
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <fsmHorLEDsRun+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4619      	mov	r1, r3
 80001a0:	2000      	movs	r0, #0
 80001a2:	f001 f9f9 	bl	8001598 <setTimer>
			}
			break;
 80001a6:	e021      	b.n	80001ec <fsmHorLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(0)) {
 80001a8:	2000      	movs	r0, #0
 80001aa:	f001 f9e1 	bl	8001570 <isTimerUp>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d01d      	beq.n	80001f0 <fsmHorLEDsRun+0xa4>
				horizontal_status = AUTO_YELLOW;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	601a      	str	r2, [r3, #0]
				setTimer(0, YELLOW_time);
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <fsmHorLEDsRun+0xbc>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4619      	mov	r1, r3
 80001c0:	2000      	movs	r0, #0
 80001c2:	f001 f9e9 	bl	8001598 <setTimer>
			}
			break;
 80001c6:	e013      	b.n	80001f0 <fsmHorLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(0)) {
 80001c8:	2000      	movs	r0, #0
 80001ca:	f001 f9d1 	bl	8001570 <isTimerUp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00f      	beq.n	80001f4 <fsmHorLEDsRun+0xa8>
				horizontal_status = AUTO_RED;
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	601a      	str	r2, [r3, #0]
				setTimer(0, RED_time);
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fsmHorLEDsRun+0xb4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	2000      	movs	r0, #0
 80001e2:	f001 f9d9 	bl	8001598 <setTimer>
			}
			break;
 80001e6:	e005      	b.n	80001f4 <fsmHorLEDsRun+0xa8>

		default:
			break;
 80001e8:	bf00      	nop
 80001ea:	e004      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001ec:	bf00      	nop
 80001ee:	e002      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f0:	bf00      	nop
 80001f2:	e000      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000b0 	.word	0x200000b0
 8000200:	20000018 	.word	0x20000018
 8000204:	2000001c 	.word	0x2000001c
 8000208:	20000020 	.word	0x20000020

0800020c <fsmVerLEDsRun>:


void fsmVerLEDsRun() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// FSM for vertical LEDs

	switch (vertical_status) {
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d847      	bhi.n	80002a8 <fsmVerLEDsRun+0x9c>
 8000218:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsmVerLEDsRun+0x14>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000235 	.word	0x08000235
 8000224:	080002a9 	.word	0x080002a9
 8000228:	08000249 	.word	0x08000249
 800022c:	08000269 	.word	0x08000269
 8000230:	08000289 	.word	0x08000289
		case MODE_INIT:
			vertical_status = AUTO_GREEN;
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000236:	2203      	movs	r2, #3
 8000238:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN_time);
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2001      	movs	r0, #1
 8000242:	f001 f9a9 	bl	8001598 <setTimer>
			break;
 8000246:	e036      	b.n	80002b6 <fsmVerLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(1)) {
 8000248:	2001      	movs	r0, #1
 800024a:	f001 f991 	bl	8001570 <isTimerUp>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d02b      	beq.n	80002ac <fsmVerLEDsRun+0xa0>
				vertical_status = AUTO_GREEN;
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000256:	2203      	movs	r2, #3
 8000258:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN_time);
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	2001      	movs	r0, #1
 8000262:	f001 f999 	bl	8001598 <setTimer>
			}
			break;
 8000266:	e021      	b.n	80002ac <fsmVerLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(1)) {
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f981 	bl	8001570 <isTimerUp>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <fsmVerLEDsRun+0xa4>
				vertical_status = AUTO_YELLOW;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000276:	2204      	movs	r2, #4
 8000278:	601a      	str	r2, [r3, #0]
				setTimer(1, YELLOW_time);
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <fsmVerLEDsRun+0xb8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4619      	mov	r1, r3
 8000280:	2001      	movs	r0, #1
 8000282:	f001 f989 	bl	8001598 <setTimer>
			}
			break;
 8000286:	e013      	b.n	80002b0 <fsmVerLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(1)) {
 8000288:	2001      	movs	r0, #1
 800028a:	f001 f971 	bl	8001570 <isTimerUp>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <fsmVerLEDsRun+0xa8>
				vertical_status = AUTO_RED;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
				setTimer(1, RED_time);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <fsmVerLEDsRun+0xbc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	2001      	movs	r0, #1
 80002a2:	f001 f979 	bl	8001598 <setTimer>
			}
			break;
 80002a6:	e005      	b.n	80002b4 <fsmVerLEDsRun+0xa8>

		default:
			break;
 80002a8:	bf00      	nop
 80002aa:	e004      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b4:	bf00      	nop
	}
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000b4 	.word	0x200000b4
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	20000020 	.word	0x20000020
 80002c8:	20000018 	.word	0x20000018

080002cc <LEDsDisplay>:

void LEDsDisplay() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Display two ways LEDs

	fsmHorLEDsRun();
 80002d0:	f7ff ff3c 	bl	800014c <fsmHorLEDsRun>
	fsmVerLEDsRun();
 80002d4:	f7ff ff9a 	bl	800020c <fsmVerLEDsRun>

	switch (horizontal_status) {
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <LEDsDisplay+0xcc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d01e      	beq.n	800031e <LEDsDisplay+0x52>
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	dc28      	bgt.n	8000336 <LEDsDisplay+0x6a>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d002      	beq.n	80002ee <LEDsDisplay+0x22>
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d00c      	beq.n	8000306 <LEDsDisplay+0x3a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
			break;

		default:
			break;
 80002ec:	e023      	b.n	8000336 <LEDsDisplay+0x6a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4829      	ldr	r0, [pc, #164]	; (800039c <LEDsDisplay+0xd0>)
 80002f6:	f001 feb0 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4828      	ldr	r0, [pc, #160]	; (80003a0 <LEDsDisplay+0xd4>)
 8000300:	f001 feab 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8000304:	e018      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4823      	ldr	r0, [pc, #140]	; (800039c <LEDsDisplay+0xd0>)
 800030e:	f001 fea4 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4822      	ldr	r0, [pc, #136]	; (80003a0 <LEDsDisplay+0xd4>)
 8000318:	f001 fe9f 	bl	800205a <HAL_GPIO_WritePin>
			break;
 800031c:	e00c      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <LEDsDisplay+0xd0>)
 8000326:	f001 fe98 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 800032a:	2201      	movs	r2, #1
 800032c:	2108      	movs	r1, #8
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <LEDsDisplay+0xd4>)
 8000330:	f001 fe93 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8000334:	e000      	b.n	8000338 <LEDsDisplay+0x6c>
			break;
 8000336:	bf00      	nop
	}

	switch (vertical_status) {
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <LEDsDisplay+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d01c      	beq.n	800037a <LEDsDisplay+0xae>
 8000340:	2b04      	cmp	r3, #4
 8000342:	dc25      	bgt.n	8000390 <LEDsDisplay+0xc4>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d002      	beq.n	800034e <LEDsDisplay+0x82>
 8000348:	2b03      	cmp	r3, #3
 800034a:	d00b      	beq.n	8000364 <LEDsDisplay+0x98>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
			break;

		default:
			break;
 800034c:	e020      	b.n	8000390 <LEDsDisplay+0xc4>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	4813      	ldr	r0, [pc, #76]	; (80003a0 <LEDsDisplay+0xd4>)
 8000354:	f001 fe81 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <LEDsDisplay+0xd4>)
 800035e:	f001 fe7c 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8000362:	e016      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LEDsDisplay+0xd4>)
 800036a:	f001 fe76 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LEDsDisplay+0xd4>)
 8000374:	f001 fe71 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8000378:	e00b      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <LEDsDisplay+0xd4>)
 8000380:	f001 fe6b 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000384:	2201      	movs	r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LEDsDisplay+0xd4>)
 800038a:	f001 fe66 	bl	800205a <HAL_GPIO_WritePin>
			break;
 800038e:	e000      	b.n	8000392 <LEDsDisplay+0xc6>
			break;
 8000390:	bf00      	nop
	}
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000b0 	.word	0x200000b0
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	200000b4 	.word	0x200000b4

080003a8 <isButtonPressed>:
int button_flag[NO_OF_BUTTON];
int button_long_flag[NO_OF_BUTTON];
GPIO_PinState key_reg[NO_OF_BUTTON][4];
int counter_for_key_pressed[NO_OF_BUTTON];

int isButtonPressed(int button) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (button_flag[button]) {
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <isButtonPressed+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d006      	beq.n	80003ca <isButtonPressed+0x22>
		button_flag[button] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <isButtonPressed+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <isButtonPressed+0x24>
	}
	else return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	200000fc 	.word	0x200000fc

080003dc <isButtonLongPressed>:

int isButtonLongPressed(int button) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if (button_long_flag[button]) {
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <isButtonLongPressed+0x30>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <isButtonLongPressed+0x22>
		button_long_flag[button] = 0;
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <isButtonLongPressed+0x30>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2100      	movs	r1, #0
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <isButtonLongPressed+0x24>
	}
	else return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2000010c 	.word	0x2000010c

08000410 <subKeyProcess>:

void subKeyProcess(int button) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <subKeyProcess+0x1c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2101      	movs	r1, #1
 800041e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	200000fc 	.word	0x200000fc

08000430 <subKeyLongProcess>:

void subKeyLongProcess(int button) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	button_long_flag[button] = 1;
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <subKeyLongProcess+0x1c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2101      	movs	r1, #1
 800043e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	2000010c 	.word	0x2000010c

08000450 <resetKey>:

void resetKey(int button) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	button_flag[button] = 0;
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <resetKey+0x28>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_long_flag[button] = 0;
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <resetKey+0x2c>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2100      	movs	r1, #0
 8000468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000fc 	.word	0x200000fc
 800047c:	2000010c 	.word	0x2000010c

08000480 <setKeyTimer>:

void setKeyTimer(int button) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	counter_for_key_pressed[button] = timer_for_key_pressed / timer_cycle;
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <setKeyTimer+0x28>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <setKeyTimer+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	fb92 f2f3 	sdiv	r2, r2, r3
 8000494:	4906      	ldr	r1, [pc, #24]	; (80004b0 <setKeyTimer+0x30>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000014 	.word	0x20000014
 80004ac:	20000010 	.word	0x20000010
 80004b0:	200000dc 	.word	0x200000dc

080004b4 <getKeyInput>:

void getKeyInput() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e0b9      	b.n	8000634 <getKeyInput+0x180>
		key_reg[button][0] = key_reg[button][1];
 80004c0:	4a61      	ldr	r2, [pc, #388]	; (8000648 <getKeyInput+0x194>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	7859      	ldrb	r1, [r3, #1]
 80004ca:	4a5f      	ldr	r2, [pc, #380]	; (8000648 <getKeyInput+0x194>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		key_reg[button][1] = key_reg[button][2];
 80004d2:	4a5d      	ldr	r2, [pc, #372]	; (8000648 <getKeyInput+0x194>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	7899      	ldrb	r1, [r3, #2]
 80004dc:	4a5a      	ldr	r2, [pc, #360]	; (8000648 <getKeyInput+0x194>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	460a      	mov	r2, r1
 80004e6:	705a      	strb	r2, [r3, #1]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d83e      	bhi.n	800056c <getKeyInput+0xb8>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <getKeyInput+0x40>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000505 	.word	0x08000505
 80004f8:	0800051f 	.word	0x0800051f
 80004fc:	08000539 	.word	0x08000539
 8000500:	08000553 	.word	0x08000553
		switch (button) {
			case BUTTON_MODE:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000504:	2102      	movs	r1, #2
 8000506:	4851      	ldr	r0, [pc, #324]	; (800064c <getKeyInput+0x198>)
 8000508:	f001 fd90 	bl	800202c <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	4619      	mov	r1, r3
 8000510:	4a4d      	ldr	r2, [pc, #308]	; (8000648 <getKeyInput+0x194>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	709a      	strb	r2, [r3, #2]
				break;
 800051c:	e027      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_SET:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 800051e:	2110      	movs	r1, #16
 8000520:	484a      	ldr	r0, [pc, #296]	; (800064c <getKeyInput+0x198>)
 8000522:	f001 fd83 	bl	800202c <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	4619      	mov	r1, r3
 800052a:	4a47      	ldr	r2, [pc, #284]	; (8000648 <getKeyInput+0x194>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	460a      	mov	r2, r1
 8000534:	709a      	strb	r2, [r3, #2]
				break;
 8000536:	e01a      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_INC:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_INC_GPIO_Port, BUTTON_INC_Pin);
 8000538:	2101      	movs	r1, #1
 800053a:	4845      	ldr	r0, [pc, #276]	; (8000650 <getKeyInput+0x19c>)
 800053c:	f001 fd76 	bl	800202c <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	4619      	mov	r1, r3
 8000544:	4a40      	ldr	r2, [pc, #256]	; (8000648 <getKeyInput+0x194>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	460a      	mov	r2, r1
 800054e:	709a      	strb	r2, [r3, #2]
				break;
 8000550:	e00d      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_PED:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_PED_GPIO_Port, BUTTON_PED_Pin);
 8000552:	2101      	movs	r1, #1
 8000554:	483d      	ldr	r0, [pc, #244]	; (800064c <getKeyInput+0x198>)
 8000556:	f001 fd69 	bl	800202c <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	4619      	mov	r1, r3
 800055e:	4a3a      	ldr	r2, [pc, #232]	; (8000648 <getKeyInput+0x194>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	460a      	mov	r2, r1
 8000568:	709a      	strb	r2, [r3, #2]
				break;
 800056a:	e000      	b.n	800056e <getKeyInput+0xba>
			default:
				break;
 800056c:	bf00      	nop
		}

		if ((key_reg[button][0] == key_reg[button][1]) && (key_reg[button][1] == key_reg[button][2])) {
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <getKeyInput+0x194>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000576:	4934      	ldr	r1, [pc, #208]	; (8000648 <getKeyInput+0x194>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	429a      	cmp	r2, r3
 8000582:	d154      	bne.n	800062e <getKeyInput+0x17a>
 8000584:	4a30      	ldr	r2, [pc, #192]	; (8000648 <getKeyInput+0x194>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	492e      	ldr	r1, [pc, #184]	; (8000648 <getKeyInput+0x194>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	429a      	cmp	r2, r3
 800059a:	d148      	bne.n	800062e <getKeyInput+0x17a>

			// Press button, then release
			if (key_reg[button][3] != key_reg[button][2]) {
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <getKeyInput+0x194>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	78da      	ldrb	r2, [r3, #3]
 80005a6:	4928      	ldr	r1, [pc, #160]	; (8000648 <getKeyInput+0x194>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d01c      	beq.n	80005ee <getKeyInput+0x13a>
				key_reg[button][3] = key_reg[button][2];
 80005b4:	4a24      	ldr	r2, [pc, #144]	; (8000648 <getKeyInput+0x194>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	7899      	ldrb	r1, [r3, #2]
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <getKeyInput+0x194>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	460a      	mov	r2, r1
 80005c8:	70da      	strb	r2, [r3, #3]

				if (key_reg[button][2] == PRESSED_STATE) {
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <getKeyInput+0x194>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <getKeyInput+0x132>
					subKeyProcess(button);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff19 	bl	8000410 <subKeyProcess>
					setKeyTimer(button);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff4e 	bl	8000480 <setKeyTimer>
 80005e4:	e023      	b.n	800062e <getKeyInput+0x17a>
				}
				else resetKey(button);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ff32 	bl	8000450 <resetKey>
 80005ec:	e01f      	b.n	800062e <getKeyInput+0x17a>
			}
			// Press and hold button
			else {
				counter_for_key_pressed[button]--;
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getKeyInput+0x1a0>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <getKeyInput+0x1a0>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!counter_for_key_pressed[button]) {
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <getKeyInput+0x1a0>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <getKeyInput+0x17a>
					if (key_reg[button][2] == PRESSED_STATE) {
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <getKeyInput+0x194>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <getKeyInput+0x16e>
						subKeyLongProcess(button);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff08 	bl	8000430 <subKeyLongProcess>
 8000620:	e002      	b.n	8000628 <getKeyInput+0x174>
					}
					else resetKey(button);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff14 	bl	8000450 <resetKey>
					setKeyTimer(button);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff29 	bl	8000480 <setKeyTimer>
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b03      	cmp	r3, #3
 8000638:	f77f af42 	ble.w	80004c0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000ec 	.word	0x200000ec
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	200000dc 	.word	0x200000dc

08000658 <fsmAutoModeRun>:
#include "fsm_auto_mode.h"

void fsmAutoModeRun() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// FSM for AUTO MODE

	switch (mode) {
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <fsmAutoModeRun+0x3c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <fsmAutoModeRun+0x12>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d004      	beq.n	8000672 <fsmAutoModeRun+0x1a>
			sendTimerCounter();

			break;

		default:
			break;
 8000668:	e011      	b.n	800068e <fsmAutoModeRun+0x36>
			mode = AUTO_MODE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <fsmAutoModeRun+0x3c>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
			break;
 8000670:	e00d      	b.n	800068e <fsmAutoModeRun+0x36>
			if (isButtonPressed(BUTTON_MODE)) {
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fe98 	bl	80003a8 <isButtonPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <fsmAutoModeRun+0x2c>
				mode = MAN_MODE;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <fsmAutoModeRun+0x3c>)
 8000680:	2205      	movs	r2, #5
 8000682:	601a      	str	r2, [r3, #0]
			LEDsDisplay();
 8000684:	f7ff fe22 	bl	80002cc <LEDsDisplay>
			sendTimerCounter();
 8000688:	f000 ffd4 	bl	8001634 <sendTimerCounter>
			break;
 800068c:	bf00      	nop
	}
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000c0 	.word	0x200000c0

08000698 <fsmManualModeRun>:
#include "fsm_manual_mode.h"

void fsmManualModeRun()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// FSM for MANUAL MODE

	switch (mode)
 800069c:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <fsmManualModeRun+0x17c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b05      	subs	r3, #5
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	f200 80b3 	bhi.w	800080e <fsmManualModeRun+0x176>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <fsmManualModeRun+0x18>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006cd 	.word	0x080006cd
 80006b8:	08000735 	.word	0x08000735
 80006bc:	0800079d 	.word	0x0800079d
	{
	case MAN_MODE:
		sendTimeDuration();
 80006c0:	f001 f81e 	bl	8001700 <sendTimeDuration>
		mode = MAN_RED;
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <fsmManualModeRun+0x17c>)
 80006c6:	2206      	movs	r2, #6
 80006c8:	601a      	str	r2, [r3, #0]
		break;
 80006ca:	e0a0      	b.n	800080e <fsmManualModeRun+0x176>

	case MAN_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4851      	ldr	r0, [pc, #324]	; (8000818 <fsmManualModeRun+0x180>)
 80006d4:	f001 fcc1 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80006d8:	2200      	movs	r2, #0
 80006da:	2108      	movs	r1, #8
 80006dc:	484f      	ldr	r0, [pc, #316]	; (800081c <fsmManualModeRun+0x184>)
 80006de:	f001 fcbc 	bl	800205a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	484d      	ldr	r0, [pc, #308]	; (800081c <fsmManualModeRun+0x184>)
 80006e8:	f001 fcb7 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	484a      	ldr	r0, [pc, #296]	; (800081c <fsmManualModeRun+0x184>)
 80006f2:	f001 fcb2 	bl	800205a <HAL_GPIO_WritePin>

		sendTimeDuration();
 80006f6:	f001 f803 	bl	8001700 <sendTimeDuration>

		if (isButtonPressed(BUTTON_SET))
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fe54 	bl	80003a8 <isButtonPressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <fsmManualModeRun+0x74>
		{
			mode = MAN_GREEN;
 8000706:	4b43      	ldr	r3, [pc, #268]	; (8000814 <fsmManualModeRun+0x17c>)
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fe4b 	bl	80003a8 <isButtonPressed>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d075      	beq.n	8000804 <fsmManualModeRun+0x16c>
		{
			mode = INC_RED;
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <fsmManualModeRun+0x17c>)
 800071a:	2209      	movs	r2, #9
 800071c:	601a      	str	r2, [r3, #0]
			time_count = RED_time / 1000;
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <fsmManualModeRun+0x188>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a40      	ldr	r2, [pc, #256]	; (8000824 <fsmManualModeRun+0x18c>)
 8000724:	fb82 1203 	smull	r1, r2, r2, r3
 8000728:	1192      	asrs	r2, r2, #6
 800072a:	17db      	asrs	r3, r3, #31
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4a3e      	ldr	r2, [pc, #248]	; (8000828 <fsmManualModeRun+0x190>)
 8000730:	6013      	str	r3, [r2, #0]
		}

		break;
 8000732:	e067      	b.n	8000804 <fsmManualModeRun+0x16c>

	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4837      	ldr	r0, [pc, #220]	; (8000818 <fsmManualModeRun+0x180>)
 800073c:	f001 fc8d 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4835      	ldr	r0, [pc, #212]	; (800081c <fsmManualModeRun+0x184>)
 8000746:	f001 fc88 	bl	800205a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	4833      	ldr	r0, [pc, #204]	; (800081c <fsmManualModeRun+0x184>)
 8000750:	f001 fc83 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000754:	2201      	movs	r2, #1
 8000756:	2110      	movs	r1, #16
 8000758:	4830      	ldr	r0, [pc, #192]	; (800081c <fsmManualModeRun+0x184>)
 800075a:	f001 fc7e 	bl	800205a <HAL_GPIO_WritePin>

		sendTimeDuration();
 800075e:	f000 ffcf 	bl	8001700 <sendTimeDuration>

		if (isButtonPressed(BUTTON_SET))
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fe20 	bl	80003a8 <isButtonPressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d002      	beq.n	8000774 <fsmManualModeRun+0xdc>
		{
			mode = MAN_YELLOW;
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <fsmManualModeRun+0x17c>)
 8000770:	2208      	movs	r2, #8
 8000772:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fe17 	bl	80003a8 <isButtonPressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d043      	beq.n	8000808 <fsmManualModeRun+0x170>
		{
			mode = INC_GREEN;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <fsmManualModeRun+0x17c>)
 8000782:	220a      	movs	r2, #10
 8000784:	601a      	str	r2, [r3, #0]
			time_count = GREEN_time / 1000;
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <fsmManualModeRun+0x194>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a26      	ldr	r2, [pc, #152]	; (8000824 <fsmManualModeRun+0x18c>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	1192      	asrs	r2, r2, #6
 8000792:	17db      	asrs	r3, r3, #31
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <fsmManualModeRun+0x190>)
 8000798:	6013      	str	r3, [r2, #0]
		}

		break;
 800079a:	e035      	b.n	8000808 <fsmManualModeRun+0x170>

	case MAN_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a2:	481d      	ldr	r0, [pc, #116]	; (8000818 <fsmManualModeRun+0x180>)
 80007a4:	f001 fc59 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2108      	movs	r1, #8
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <fsmManualModeRun+0x184>)
 80007ae:	f001 fc54 	bl	800205a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	4819      	ldr	r0, [pc, #100]	; (800081c <fsmManualModeRun+0x184>)
 80007b8:	f001 fc4f 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	4816      	ldr	r0, [pc, #88]	; (800081c <fsmManualModeRun+0x184>)
 80007c2:	f001 fc4a 	bl	800205a <HAL_GPIO_WritePin>

		sendTimeDuration();
 80007c6:	f000 ff9b 	bl	8001700 <sendTimeDuration>

		if (isButtonPressed(BUTTON_SET))
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fdec 	bl	80003a8 <isButtonPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <fsmManualModeRun+0x144>
		{
			mode = MAN_RED;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <fsmManualModeRun+0x17c>)
 80007d8:	2206      	movs	r2, #6
 80007da:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fde3 	bl	80003a8 <isButtonPressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d011      	beq.n	800080c <fsmManualModeRun+0x174>
		{
			mode = INC_YELLOW;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <fsmManualModeRun+0x17c>)
 80007ea:	220b      	movs	r2, #11
 80007ec:	601a      	str	r2, [r3, #0]
			time_count = YELLOW_time / 1000;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <fsmManualModeRun+0x198>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <fsmManualModeRun+0x18c>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1192      	asrs	r2, r2, #6
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <fsmManualModeRun+0x190>)
 8000800:	6013      	str	r3, [r2, #0]
		}

		break;
 8000802:	e003      	b.n	800080c <fsmManualModeRun+0x174>
		break;
 8000804:	bf00      	nop
 8000806:	e002      	b.n	800080e <fsmManualModeRun+0x176>
		break;
 8000808:	bf00      	nop
 800080a:	e000      	b.n	800080e <fsmManualModeRun+0x176>
		break;
 800080c:	bf00      	nop
	}
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000c0 	.word	0x200000c0
 8000818:	40010800 	.word	0x40010800
 800081c:	40010c00 	.word	0x40010c00
 8000820:	20000018 	.word	0x20000018
 8000824:	10624dd3 	.word	0x10624dd3
 8000828:	200000bc 	.word	0x200000bc
 800082c:	2000001c 	.word	0x2000001c
 8000830:	20000020 	.word	0x20000020

08000834 <fsmVerPedRun>:
int hor_ped = PED_OFF;
int buzzer_time = BUZZER_time;
int pul = BUZZER_pul;
int state = 0;

void fsmVerPedRun(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	switch(ver_ped){
 8000838:	4b53      	ldr	r3, [pc, #332]	; (8000988 <fsmVerPedRun+0x154>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3b0c      	subs	r3, #12
 800083e:	2b04      	cmp	r3, #4
 8000840:	f200 8094 	bhi.w	800096c <fsmVerPedRun+0x138>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <fsmVerPedRun+0x18>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	08000861 	.word	0x08000861
 8000850:	08000891 	.word	0x08000891
 8000854:	080008cf 	.word	0x080008cf
 8000858:	08000907 	.word	0x08000907
 800085c:	08000945 	.word	0x08000945
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 8000860:	4b4a      	ldr	r3, [pc, #296]	; (800098c <fsmVerPedRun+0x158>)
 8000862:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000866:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 8000868:	4b49      	ldr	r3, [pc, #292]	; (8000990 <fsmVerPedRun+0x15c>)
 800086a:	f240 2226 	movw	r2, #550	; 0x226
 800086e:	601a      	str	r2, [r3, #0]
			state = 0;
 8000870:	4b48      	ldr	r3, [pc, #288]	; (8000994 <fsmVerPedRun+0x160>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
			//Bat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff fd96 	bl	80003a8 <isButtonPressed>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d076      	beq.n	8000970 <fsmVerPedRun+0x13c>
				ver_ped = PED_ON;
 8000882:	4b41      	ldr	r3, [pc, #260]	; (8000988 <fsmVerPedRun+0x154>)
 8000884:	220d      	movs	r2, #13
 8000886:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 8000888:	4b43      	ldr	r3, [pc, #268]	; (8000998 <fsmVerPedRun+0x164>)
 800088a:	220d      	movs	r2, #13
 800088c:	601a      	str	r2, [r3, #0]
			}
			break;
 800088e:	e06f      	b.n	8000970 <fsmVerPedRun+0x13c>
		case PED_ON:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 8000890:	2003      	movs	r0, #3
 8000892:	f7ff fd89 	bl	80003a8 <isButtonPressed>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <fsmVerPedRun+0x74>
				ver_ped = PED_OFF;
 800089c:	4b3a      	ldr	r3, [pc, #232]	; (8000988 <fsmVerPedRun+0x154>)
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <fsmVerPedRun+0x164>)
 80008a4:	220c      	movs	r2, #12
 80008a6:	601a      	str	r2, [r3, #0]
			}
			//Cho phep di
			if(vertical_status == AUTO_RED){
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <fsmVerPedRun+0x168>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d102      	bne.n	80008b6 <fsmVerPedRun+0x82>
				ver_ped = WALK_ALLOW;
 80008b0:	4b35      	ldr	r3, [pc, #212]	; (8000988 <fsmVerPedRun+0x154>)
 80008b2:	220e      	movs	r2, #14
 80008b4:	601a      	str	r2, [r3, #0]
			}
			//Dung lai
			if((vertical_status == AUTO_GREEN) || (vertical_status == AUTO_YELLOW)){
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <fsmVerPedRun+0x168>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d003      	beq.n	80008c6 <fsmVerPedRun+0x92>
 80008be:	4b37      	ldr	r3, [pc, #220]	; (800099c <fsmVerPedRun+0x168>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d156      	bne.n	8000974 <fsmVerPedRun+0x140>
				ver_ped = WALK_STOP;
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <fsmVerPedRun+0x154>)
 80008c8:	2210      	movs	r2, #16
 80008ca:	601a      	str	r2, [r3, #0]
			}
			break;
 80008cc:	e052      	b.n	8000974 <fsmVerPedRun+0x140>
		case WALK_ALLOW:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 80008ce:	2003      	movs	r0, #3
 80008d0:	f7ff fd6a 	bl	80003a8 <isButtonPressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <fsmVerPedRun+0xb2>
				ver_ped = PED_OFF;
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <fsmVerPedRun+0x154>)
 80008dc:	220c      	movs	r2, #12
 80008de:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <fsmVerPedRun+0x164>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
			}
			//Thoi gian con 3s -> Bat buzzer
			if(currentCounter(1) <= 3000){
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fe32 	bl	8001550 <currentCounter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008f2:	4293      	cmp	r3, r2
 80008f4:	dc40      	bgt.n	8000978 <fsmVerPedRun+0x144>
				ver_ped = BUZZER_ON;
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <fsmVerPedRun+0x154>)
 80008f8:	220f      	movs	r2, #15
 80008fa:	601a      	str	r2, [r3, #0]
				setTimer(3, 100);
 80008fc:	2164      	movs	r1, #100	; 0x64
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 fe4a 	bl	8001598 <setTimer>
			}
			break;
 8000904:	e038      	b.n	8000978 <fsmVerPedRun+0x144>
		case BUZZER_ON:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 8000906:	2003      	movs	r0, #3
 8000908:	f7ff fd4e 	bl	80003a8 <isButtonPressed>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <fsmVerPedRun+0xea>
				ver_ped = PED_OFF;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <fsmVerPedRun+0x154>)
 8000914:	220c      	movs	r2, #12
 8000916:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <fsmVerPedRun+0x164>)
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
			}
			//Dung lai
			if(vertical_status == AUTO_GREEN){
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <fsmVerPedRun+0x168>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d12a      	bne.n	800097c <fsmVerPedRun+0x148>
				ver_ped = WALK_STOP;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <fsmVerPedRun+0x154>)
 8000928:	2210      	movs	r2, #16
 800092a:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <fsmVerPedRun+0x158>)
 800092e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000932:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <fsmVerPedRun+0x15c>)
 8000936:	f240 2226 	movw	r2, #550	; 0x226
 800093a:	601a      	str	r2, [r3, #0]
				state = 0;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <fsmVerPedRun+0x160>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
			}
			break;
 8000942:	e01b      	b.n	800097c <fsmVerPedRun+0x148>
		case WALK_STOP:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 8000944:	2003      	movs	r0, #3
 8000946:	f7ff fd2f 	bl	80003a8 <isButtonPressed>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d005      	beq.n	800095c <fsmVerPedRun+0x128>
				ver_ped = PED_OFF;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <fsmVerPedRun+0x154>)
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <fsmVerPedRun+0x164>)
 8000958:	220c      	movs	r2, #12
 800095a:	601a      	str	r2, [r3, #0]
			}
			//Cho phep di
			if(vertical_status == AUTO_RED){
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <fsmVerPedRun+0x168>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d10d      	bne.n	8000980 <fsmVerPedRun+0x14c>
				ver_ped = WALK_ALLOW;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <fsmVerPedRun+0x154>)
 8000966:	220e      	movs	r2, #14
 8000968:	601a      	str	r2, [r3, #0]
			}
			break;
 800096a:	e009      	b.n	8000980 <fsmVerPedRun+0x14c>
		default:
			break;
 800096c:	bf00      	nop
 800096e:	e008      	b.n	8000982 <fsmVerPedRun+0x14e>
			break;
 8000970:	bf00      	nop
 8000972:	e006      	b.n	8000982 <fsmVerPedRun+0x14e>
			break;
 8000974:	bf00      	nop
 8000976:	e004      	b.n	8000982 <fsmVerPedRun+0x14e>
			break;
 8000978:	bf00      	nop
 800097a:	e002      	b.n	8000982 <fsmVerPedRun+0x14e>
			break;
 800097c:	bf00      	nop
 800097e:	e000      	b.n	8000982 <fsmVerPedRun+0x14e>
			break;
 8000980:	bf00      	nop
	}
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	2000000c 	.word	0x2000000c
 8000994:	200000b8 	.word	0x200000b8
 8000998:	20000004 	.word	0x20000004
 800099c:	200000b4 	.word	0x200000b4

080009a0 <fsmHorPedRun>:

void fsmHorPedRun(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	switch(hor_ped){
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <fsmHorPedRun+0x154>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	3b0c      	subs	r3, #12
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	f200 8094 	bhi.w	8000ad8 <fsmHorPedRun+0x138>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <fsmHorPedRun+0x18>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009cd 	.word	0x080009cd
 80009bc:	080009fd 	.word	0x080009fd
 80009c0:	08000a3b 	.word	0x08000a3b
 80009c4:	08000a73 	.word	0x08000a73
 80009c8:	08000ab1 	.word	0x08000ab1
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 80009cc:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <fsmHorPedRun+0x158>)
 80009ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009d2:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 80009d4:	4b49      	ldr	r3, [pc, #292]	; (8000afc <fsmHorPedRun+0x15c>)
 80009d6:	f240 2226 	movw	r2, #550	; 0x226
 80009da:	601a      	str	r2, [r3, #0]
			state = 0;
 80009dc:	4b48      	ldr	r3, [pc, #288]	; (8000b00 <fsmHorPedRun+0x160>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
			//Bat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 80009e2:	2003      	movs	r0, #3
 80009e4:	f7ff fce0 	bl	80003a8 <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d076      	beq.n	8000adc <fsmHorPedRun+0x13c>
				ver_ped = PED_ON;
 80009ee:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <fsmHorPedRun+0x164>)
 80009f0:	220d      	movs	r2, #13
 80009f2:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 80009f4:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <fsmHorPedRun+0x154>)
 80009f6:	220d      	movs	r2, #13
 80009f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80009fa:	e06f      	b.n	8000adc <fsmHorPedRun+0x13c>
		case PED_ON:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 80009fc:	2003      	movs	r0, #3
 80009fe:	f7ff fcd3 	bl	80003a8 <isButtonPressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d005      	beq.n	8000a14 <fsmHorPedRun+0x74>
				ver_ped = PED_OFF;
 8000a08:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <fsmHorPedRun+0x164>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <fsmHorPedRun+0x154>)
 8000a10:	220c      	movs	r2, #12
 8000a12:	601a      	str	r2, [r3, #0]
			}
			//Cho phep di
			if(horizontal_status == AUTO_RED){
 8000a14:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <fsmHorPedRun+0x168>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d102      	bne.n	8000a22 <fsmHorPedRun+0x82>
				hor_ped = WALK_ALLOW;
 8000a1c:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <fsmHorPedRun+0x154>)
 8000a1e:	220e      	movs	r2, #14
 8000a20:	601a      	str	r2, [r3, #0]
			}
			//Dung lai
			if((horizontal_status == AUTO_GREEN) || (horizontal_status == AUTO_YELLOW)){
 8000a22:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <fsmHorPedRun+0x168>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d003      	beq.n	8000a32 <fsmHorPedRun+0x92>
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <fsmHorPedRun+0x168>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d156      	bne.n	8000ae0 <fsmHorPedRun+0x140>
				hor_ped = WALK_STOP;
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <fsmHorPedRun+0x154>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a38:	e052      	b.n	8000ae0 <fsmHorPedRun+0x140>
		case WALK_ALLOW:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff fcb4 	bl	80003a8 <isButtonPressed>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d005      	beq.n	8000a52 <fsmHorPedRun+0xb2>
				ver_ped = PED_OFF;
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <fsmHorPedRun+0x164>)
 8000a48:	220c      	movs	r2, #12
 8000a4a:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <fsmHorPedRun+0x154>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
			}
			//Thoi gian con 3s -> Bat buzzer
			if(currentCounter(0) <= 3000){
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fd7c 	bl	8001550 <currentCounter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	dc40      	bgt.n	8000ae4 <fsmHorPedRun+0x144>
				hor_ped = BUZZER_ON;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <fsmHorPedRun+0x154>)
 8000a64:	220f      	movs	r2, #15
 8000a66:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f000 fd94 	bl	8001598 <setTimer>
			}
			break;
 8000a70:	e038      	b.n	8000ae4 <fsmHorPedRun+0x144>
		case BUZZER_ON:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 8000a72:	2003      	movs	r0, #3
 8000a74:	f7ff fc98 	bl	80003a8 <isButtonPressed>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d005      	beq.n	8000a8a <fsmHorPedRun+0xea>
				ver_ped = PED_OFF;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <fsmHorPedRun+0x164>)
 8000a80:	220c      	movs	r2, #12
 8000a82:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <fsmHorPedRun+0x154>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
			}
			//Dung lai
			if(horizontal_status == AUTO_GREEN){
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <fsmHorPedRun+0x168>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d12a      	bne.n	8000ae8 <fsmHorPedRun+0x148>
				hor_ped = WALK_STOP;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <fsmHorPedRun+0x154>)
 8000a94:	2210      	movs	r2, #16
 8000a96:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <fsmHorPedRun+0x158>)
 8000a9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a9e:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <fsmHorPedRun+0x15c>)
 8000aa2:	f240 2226 	movw	r2, #550	; 0x226
 8000aa6:	601a      	str	r2, [r3, #0]
				state = 0;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <fsmHorPedRun+0x160>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
			}
			break;
 8000aae:	e01b      	b.n	8000ae8 <fsmHorPedRun+0x148>
		case WALK_STOP:
			//Tat che do nguoi di bo
			if(isButtonPressed(BUTTON_PED)){
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f7ff fc79 	bl	80003a8 <isButtonPressed>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <fsmHorPedRun+0x128>
				ver_ped = PED_OFF;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <fsmHorPedRun+0x164>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <fsmHorPedRun+0x154>)
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	601a      	str	r2, [r3, #0]
			}
			//Cho phep di
			if(horizontal_status == AUTO_RED){
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <fsmHorPedRun+0x168>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d10d      	bne.n	8000aec <fsmHorPedRun+0x14c>
				hor_ped = WALK_ALLOW;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <fsmHorPedRun+0x154>)
 8000ad2:	220e      	movs	r2, #14
 8000ad4:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ad6:	e009      	b.n	8000aec <fsmHorPedRun+0x14c>
		default:
			break;
 8000ad8:	bf00      	nop
 8000ada:	e008      	b.n	8000aee <fsmHorPedRun+0x14e>
			break;
 8000adc:	bf00      	nop
 8000ade:	e006      	b.n	8000aee <fsmHorPedRun+0x14e>
			break;
 8000ae0:	bf00      	nop
 8000ae2:	e004      	b.n	8000aee <fsmHorPedRun+0x14e>
			break;
 8000ae4:	bf00      	nop
 8000ae6:	e002      	b.n	8000aee <fsmHorPedRun+0x14e>
			break;
 8000ae8:	bf00      	nop
 8000aea:	e000      	b.n	8000aee <fsmHorPedRun+0x14e>
			break;
 8000aec:	bf00      	nop
	}
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000004 	.word	0x20000004
 8000af8:	20000008 	.word	0x20000008
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	200000b8 	.word	0x200000b8
 8000b04:	20000000 	.word	0x20000000
 8000b08:	200000b0 	.word	0x200000b0

08000b0c <fsmPedestrianModeRun>:

void fsmPedestrianModeRun() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	fsmVerPedRun();
 8000b10:	f7ff fe90 	bl	8000834 <fsmVerPedRun>
	fsmHorPedRun();
 8000b14:	f7ff ff44 	bl	80009a0 <fsmHorPedRun>

	switch(ver_ped){
 8000b18:	4ba2      	ldr	r3, [pc, #648]	; (8000da4 <fsmPedestrianModeRun+0x298>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3b0c      	subs	r3, #12
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	f200 8098 	bhi.w	8000c54 <fsmPedestrianModeRun+0x148>
 8000b24:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <fsmPedestrianModeRun+0x20>)
 8000b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2a:	bf00      	nop
 8000b2c:	08000b41 	.word	0x08000b41
 8000b30:	08000c55 	.word	0x08000c55
 8000b34:	08000b61 	.word	0x08000b61
 8000b38:	08000b79 	.word	0x08000b79
 8000b3c:	08000c35 	.word	0x08000c35
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2104      	movs	r1, #4
 8000b44:	4898      	ldr	r0, [pc, #608]	; (8000da8 <fsmPedestrianModeRun+0x29c>)
 8000b46:	f001 fa88 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	4896      	ldr	r0, [pc, #600]	; (8000dac <fsmPedestrianModeRun+0x2a0>)
 8000b52:	f001 fa82 	bl	800205a <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, 0);
 8000b56:	4b96      	ldr	r3, [pc, #600]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000b5e:	e07c      	b.n	8000c5a <fsmPedestrianModeRun+0x14e>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	4890      	ldr	r0, [pc, #576]	; (8000da8 <fsmPedestrianModeRun+0x29c>)
 8000b66:	f001 fa78 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_ON);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	488e      	ldr	r0, [pc, #568]	; (8000dac <fsmPedestrianModeRun+0x2a0>)
 8000b72:	f001 fa72 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8000b76:	e070      	b.n	8000c5a <fsmPedestrianModeRun+0x14e>
		case BUZZER_ON:
			//Buzzer se to dan va nhanh hon khi thoi gian gan het
			if(isTimerUp(3) && state == 1){
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 fcf9 	bl	8001570 <isTimerUp>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d028      	beq.n	8000bd6 <fsmPedestrianModeRun+0xca>
 8000b84:	4b8b      	ldr	r3, [pc, #556]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d124      	bne.n	8000bd6 <fsmPedestrianModeRun+0xca>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, pul);
 8000b8c:	4b8a      	ldr	r3, [pc, #552]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b87      	ldr	r3, [pc, #540]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(3, buzzer_time);
 8000b96:	4b89      	ldr	r3, [pc, #548]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 fcfb 	bl	8001598 <setTimer>
				state = 1 - state;
 8000ba2:	4b84      	ldr	r3, [pc, #528]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f1c3 0301 	rsb	r3, r3, #1
 8000baa:	4a82      	ldr	r2, [pc, #520]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000bac:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000bae:	4b82      	ldr	r3, [pc, #520]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	dc04      	bgt.n	8000bc4 <fsmPedestrianModeRun+0xb8>
 8000bba:	4b7f      	ldr	r3, [pc, #508]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3364      	adds	r3, #100	; 0x64
 8000bc0:	4a7d      	ldr	r2, [pc, #500]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000bc2:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000bc4:	4b7d      	ldr	r3, [pc, #500]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b64      	cmp	r3, #100	; 0x64
 8000bca:	dd04      	ble.n	8000bd6 <fsmPedestrianModeRun+0xca>
 8000bcc:	4b7b      	ldr	r3, [pc, #492]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3b64      	subs	r3, #100	; 0x64
 8000bd2:	4a7a      	ldr	r2, [pc, #488]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000bd4:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(3) && state == 0){
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f000 fcca 	bl	8001570 <isTimerUp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d03a      	beq.n	8000c58 <fsmPedestrianModeRun+0x14c>
 8000be2:	4b74      	ldr	r3, [pc, #464]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d136      	bne.n	8000c58 <fsmPedestrianModeRun+0x14c>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, 0);
 8000bea:	4b71      	ldr	r3, [pc, #452]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(3, buzzer_time);
 8000bf2:	4b72      	ldr	r3, [pc, #456]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fccd 	bl	8001598 <setTimer>
				state = 1 - state;
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f1c3 0301 	rsb	r3, r3, #1
 8000c06:	4a6b      	ldr	r2, [pc, #428]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000c08:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000c0a:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000c12:	4293      	cmp	r3, r2
 8000c14:	dc04      	bgt.n	8000c20 <fsmPedestrianModeRun+0x114>
 8000c16:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3364      	adds	r3, #100	; 0x64
 8000c1c:	4a66      	ldr	r2, [pc, #408]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000c1e:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000c20:	4b66      	ldr	r3, [pc, #408]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b64      	cmp	r3, #100	; 0x64
 8000c26:	dd17      	ble.n	8000c58 <fsmPedestrianModeRun+0x14c>
 8000c28:	4b64      	ldr	r3, [pc, #400]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3b64      	subs	r3, #100	; 0x64
 8000c2e:	4a63      	ldr	r2, [pc, #396]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000c30:	6013      	str	r3, [r2, #0]
			}
			break;
 8000c32:	e011      	b.n	8000c58 <fsmPedestrianModeRun+0x14c>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_ON);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2104      	movs	r1, #4
 8000c38:	485b      	ldr	r0, [pc, #364]	; (8000da8 <fsmPedestrianModeRun+0x29c>)
 8000c3a:	f001 fa0e 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <fsmPedestrianModeRun+0x2a0>)
 8000c46:	f001 fa08 	bl	800205a <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, 0);
 8000c4a:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000c52:	e002      	b.n	8000c5a <fsmPedestrianModeRun+0x14e>
		default:
			break;
 8000c54:	bf00      	nop
 8000c56:	e000      	b.n	8000c5a <fsmPedestrianModeRun+0x14e>
			break;
 8000c58:	bf00      	nop
	}

	switch(hor_ped){
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <fsmPedestrianModeRun+0x2b4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3b0c      	subs	r3, #12
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	f200 809a 	bhi.w	8000d9a <fsmPedestrianModeRun+0x28e>
 8000c66:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <fsmPedestrianModeRun+0x160>)
 8000c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6c:	08000c81 	.word	0x08000c81
 8000c70:	08000d9b 	.word	0x08000d9b
 8000c74:	08000ca3 	.word	0x08000ca3
 8000c78:	08000cbd 	.word	0x08000cbd
 8000c7c:	08000d79 	.word	0x08000d79
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c86:	4848      	ldr	r0, [pc, #288]	; (8000da8 <fsmPedestrianModeRun+0x29c>)
 8000c88:	f001 f9e7 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c92:	4846      	ldr	r0, [pc, #280]	; (8000dac <fsmPedestrianModeRun+0x2a0>)
 8000c94:	f001 f9e1 	bl	800205a <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8000c98:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000ca0:	e07e      	b.n	8000da0 <fsmPedestrianModeRun+0x294>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	483f      	ldr	r0, [pc, #252]	; (8000da8 <fsmPedestrianModeRun+0x29c>)
 8000caa:	f001 f9d6 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_ON);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	483d      	ldr	r0, [pc, #244]	; (8000dac <fsmPedestrianModeRun+0x2a0>)
 8000cb6:	f001 f9d0 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8000cba:	e071      	b.n	8000da0 <fsmPedestrianModeRun+0x294>
		case BUZZER_ON:
			//Buzzer se to dan va nhanh hon khi thoi gian gan het
			if(isTimerUp(2) && state == 1){
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f000 fc57 	bl	8001570 <isTimerUp>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d028      	beq.n	8000d1a <fsmPedestrianModeRun+0x20e>
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d124      	bne.n	8000d1a <fsmPedestrianModeRun+0x20e>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, pul);
 8000cd0:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f000 fc59 	bl	8001598 <setTimer>
				state = 1 - state;
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1c3 0301 	rsb	r3, r3, #1
 8000cee:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000cf0:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	dc04      	bgt.n	8000d08 <fsmPedestrianModeRun+0x1fc>
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3364      	adds	r3, #100	; 0x64
 8000d04:	4a2c      	ldr	r2, [pc, #176]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000d06:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b64      	cmp	r3, #100	; 0x64
 8000d0e:	dd04      	ble.n	8000d1a <fsmPedestrianModeRun+0x20e>
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b64      	subs	r3, #100	; 0x64
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000d18:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 fc28 	bl	8001570 <isTimerUp>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d03b      	beq.n	8000d9e <fsmPedestrianModeRun+0x292>
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d137      	bne.n	8000d9e <fsmPedestrianModeRun+0x292>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 fc2b 	bl	8001598 <setTimer>
				state = 1 - state;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f1c3 0301 	rsb	r3, r3, #1
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <fsmPedestrianModeRun+0x2a8>)
 8000d4c:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000d56:	4293      	cmp	r3, r2
 8000d58:	dc04      	bgt.n	8000d64 <fsmPedestrianModeRun+0x258>
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3364      	adds	r3, #100	; 0x64
 8000d60:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <fsmPedestrianModeRun+0x2ac>)
 8000d62:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b64      	cmp	r3, #100	; 0x64
 8000d6a:	dd18      	ble.n	8000d9e <fsmPedestrianModeRun+0x292>
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b64      	subs	r3, #100	; 0x64
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <fsmPedestrianModeRun+0x2b0>)
 8000d74:	6013      	str	r3, [r2, #0]
			}
			break;
 8000d76:	e012      	b.n	8000d9e <fsmPedestrianModeRun+0x292>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_ON);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7e:	480a      	ldr	r0, [pc, #40]	; (8000da8 <fsmPedestrianModeRun+0x29c>)
 8000d80:	f001 f96b 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <fsmPedestrianModeRun+0x2a0>)
 8000d8c:	f001 f965 	bl	800205a <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <fsmPedestrianModeRun+0x2a4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000d98:	e002      	b.n	8000da0 <fsmPedestrianModeRun+0x294>
		default:
			break;
 8000d9a:	bf00      	nop
 8000d9c:	e000      	b.n	8000da0 <fsmPedestrianModeRun+0x294>
			break;
 8000d9e:	bf00      	nop
	}


}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40010800 	.word	0x40010800
 8000db0:	2000011c 	.word	0x2000011c
 8000db4:	200000b8 	.word	0x200000b8
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <fsmTuningModeRun>:
#include "fsm_tuning_mode.h"

int time_count = 0;

void fsmTuningModeRun() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	// FSM for TUNING MODE

	switch (mode) {
 8000dc8:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <fsmTuningModeRun+0x154>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b0b      	cmp	r3, #11
 8000dce:	d06d      	beq.n	8000eac <fsmTuningModeRun+0xe8>
 8000dd0:	2b0b      	cmp	r3, #11
 8000dd2:	f300 809e 	bgt.w	8000f12 <fsmTuningModeRun+0x14e>
 8000dd6:	2b09      	cmp	r3, #9
 8000dd8:	d002      	beq.n	8000de0 <fsmTuningModeRun+0x1c>
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	d033      	beq.n	8000e46 <fsmTuningModeRun+0x82>
			sendTimeInc();

			break;

		default:
			break;
 8000dde:	e098      	b.n	8000f12 <fsmTuningModeRun+0x14e>
			if (isButtonPressed(BUTTON_MODE)) {
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fae1 	bl	80003a8 <isButtonPressed>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <fsmTuningModeRun+0x2e>
				mode = AUTO_MODE;
 8000dec:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <fsmTuningModeRun+0x154>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff fad8 	bl	80003a8 <isButtonPressed>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d007      	beq.n	8000e0e <fsmTuningModeRun+0x4a>
				RED_time = time_count * 1000;
 8000dfe:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <fsmTuningModeRun+0x15c>)
 8000e0c:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff faca 	bl	80003a8 <isButtonPressed>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <fsmTuningModeRun+0x62>
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff fade 	bl	80003dc <isButtonLongPressed>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00c      	beq.n	8000e40 <fsmTuningModeRun+0x7c>
				if (time_count >= 99) time_count = 5;
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b62      	cmp	r3, #98	; 0x62
 8000e2c:	dd03      	ble.n	8000e36 <fsmTuningModeRun+0x72>
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e30:	2205      	movs	r2, #5
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e004      	b.n	8000e40 <fsmTuningModeRun+0x7c>
				else time_count++;
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4a37      	ldr	r2, [pc, #220]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e3e:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000e40:	f000 fd04 	bl	800184c <sendTimeInc>
			break;
 8000e44:	e066      	b.n	8000f14 <fsmTuningModeRun+0x150>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff faae 	bl	80003a8 <isButtonPressed>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <fsmTuningModeRun+0x94>
				mode = AUTO_MODE;
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <fsmTuningModeRun+0x154>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff faa5 	bl	80003a8 <isButtonPressed>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d007      	beq.n	8000e74 <fsmTuningModeRun+0xb0>
				GREEN_time = time_count * 1000;
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4a2c      	ldr	r2, [pc, #176]	; (8000f24 <fsmTuningModeRun+0x160>)
 8000e72:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000e74:	2002      	movs	r0, #2
 8000e76:	f7ff fa97 	bl	80003a8 <isButtonPressed>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d105      	bne.n	8000e8c <fsmTuningModeRun+0xc8>
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff faab 	bl	80003dc <isButtonLongPressed>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00c      	beq.n	8000ea6 <fsmTuningModeRun+0xe2>
				if (time_count >= 89) time_count = 3;
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b58      	cmp	r3, #88	; 0x58
 8000e92:	dd03      	ble.n	8000e9c <fsmTuningModeRun+0xd8>
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e004      	b.n	8000ea6 <fsmTuningModeRun+0xe2>
				else time_count++;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000ea4:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000ea6:	f000 fcd1 	bl	800184c <sendTimeInc>
			break;
 8000eaa:	e033      	b.n	8000f14 <fsmTuningModeRun+0x150>
			if (isButtonPressed(BUTTON_MODE)) {
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fa7b 	bl	80003a8 <isButtonPressed>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <fsmTuningModeRun+0xfa>
				mode = AUTO_MODE;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <fsmTuningModeRun+0x154>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fa72 	bl	80003a8 <isButtonPressed>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <fsmTuningModeRun+0x116>
				YELLOW_time = time_count * 1000;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <fsmTuningModeRun+0x164>)
 8000ed8:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000eda:	2002      	movs	r0, #2
 8000edc:	f7ff fa64 	bl	80003a8 <isButtonPressed>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d105      	bne.n	8000ef2 <fsmTuningModeRun+0x12e>
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff fa78 	bl	80003dc <isButtonLongPressed>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00c      	beq.n	8000f0c <fsmTuningModeRun+0x148>
				if (time_count >= 10) time_count = 2;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	dd03      	ble.n	8000f02 <fsmTuningModeRun+0x13e>
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000efc:	2202      	movs	r2, #2
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e004      	b.n	8000f0c <fsmTuningModeRun+0x148>
				else time_count++;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <fsmTuningModeRun+0x158>)
 8000f0a:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000f0c:	f000 fc9e 	bl	800184c <sendTimeInc>
			break;
 8000f10:	e000      	b.n	8000f14 <fsmTuningModeRun+0x150>
			break;
 8000f12:	bf00      	nop
	}
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000c0 	.word	0x200000c0
 8000f1c:	200000bc 	.word	0x200000bc
 8000f20:	20000018 	.word	0x20000018
 8000f24:	2000001c 	.word	0x2000001c
 8000f28:	20000020 	.word	0x20000020

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fcd8 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f81c 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 f908 	bl	800114c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3c:	f000 f8dc 	bl	80010f8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f40:	f000 f858 	bl	8000ff4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <main+0x40>)
 8000f46:	f001 fd2d 	bl	80029a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <main+0x40>)
 8000f4e:	f001 fdd3 	bl	8002af8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f52:	2104      	movs	r1, #4
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <main+0x40>)
 8000f56:	f001 fdcf 	bl	8002af8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsmAutoModeRun();
 8000f5a:	f7ff fb7d 	bl	8000658 <fsmAutoModeRun>
	  fsmManualModeRun();
 8000f5e:	f7ff fb9b 	bl	8000698 <fsmManualModeRun>
	  fsmTuningModeRun();
 8000f62:	f7ff ff2f 	bl	8000dc4 <fsmTuningModeRun>
	  fsmPedestrianModeRun();
 8000f66:	f7ff fdd1 	bl	8000b0c <fsmPedestrianModeRun>
	  fsmAutoModeRun();
 8000f6a:	e7f6      	b.n	8000f5a <main+0x2e>
 8000f6c:	2000011c 	.word	0x2000011c

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b090      	sub	sp, #64	; 0x40
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0318 	add.w	r3, r7, #24
 8000f7a:	2228      	movs	r2, #40	; 0x28
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 f920 	bl	80041c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f96:	2301      	movs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fa6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 f88d 	bl	80020d0 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fbc:	f000 f972 	bl	80012a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 faf8 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fe6:	f000 f95d 	bl	80012a4 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3740      	adds	r7, #64	; 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001026:	4a33      	ldr	r2, [pc, #204]	; (80010f4 <MX_TIM3_Init+0x100>)
 8001028:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <MX_TIM3_Init+0xfc>)
 800102c:	223f      	movs	r2, #63	; 0x3f
 800102e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800103c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800104a:	4829      	ldr	r0, [pc, #164]	; (80010f0 <MX_TIM3_Init+0xfc>)
 800104c:	f001 fc5a 	bl	8002904 <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001056:	f000 f925 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001064:	4619      	mov	r1, r3
 8001066:	4822      	ldr	r0, [pc, #136]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001068:	f001 ffae 	bl	8002fc8 <HAL_TIM_ConfigClockSource>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001072:	f000 f917 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001078:	f001 fce6 	bl	8002a48 <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 f90f 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	4619      	mov	r1, r3
 8001094:	4816      	ldr	r0, [pc, #88]	; (80010f0 <MX_TIM3_Init+0xfc>)
 8001096:	f002 fb23 	bl	80036e0 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010a0:	f000 f900 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM3_Init+0xfc>)
 80010bc:	f001 fec6 	bl	8002e4c <HAL_TIM_PWM_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010c6:	f000 f8ed 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2204      	movs	r2, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_TIM3_Init+0xfc>)
 80010d2:	f001 febb 	bl	8002e4c <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010dc:	f000 f8e2 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <MX_TIM3_Init+0xfc>)
 80010e2:	f000 f93d 	bl	8001360 <HAL_TIM_MspPostInit>

}
 80010e6:	bf00      	nop
 80010e8:	3738      	adds	r7, #56	; 0x38
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000011c 	.word	0x2000011c
 80010f4:	40000400 	.word	0x40000400

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001130:	f002 fb46 	bl	80037c0 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800113a:	f000 f8b3 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000184 	.word	0x20000184
 8001148:	40004400 	.word	0x40004400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	4b45      	ldr	r3, [pc, #276]	; (8001278 <MX_GPIO_Init+0x12c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a44      	ldr	r2, [pc, #272]	; (8001278 <MX_GPIO_Init+0x12c>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <MX_GPIO_Init+0x12c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <MX_GPIO_Init+0x12c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a3e      	ldr	r2, [pc, #248]	; (8001278 <MX_GPIO_Init+0x12c>)
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <MX_GPIO_Init+0x12c>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <MX_GPIO_Init+0x12c>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a38      	ldr	r2, [pc, #224]	; (8001278 <MX_GPIO_Init+0x12c>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <MX_GPIO_Init+0x12c>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MX_GPIO_Init+0x12c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a32      	ldr	r2, [pc, #200]	; (8001278 <MX_GPIO_Init+0x12c>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_GPIO_Init+0x12c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80011c6:	482d      	ldr	r0, [pc, #180]	; (800127c <MX_GPIO_Init+0x130>)
 80011c8:	f000 ff47 	bl	800205a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 80011cc:	2200      	movs	r2, #0
 80011ce:	f240 413c 	movw	r1, #1084	; 0x43c
 80011d2:	482b      	ldr	r0, [pc, #172]	; (8001280 <MX_GPIO_Init+0x134>)
 80011d4:	f000 ff41 	bl	800205a <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <MX_GPIO_Init+0x138>)
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	4826      	ldr	r0, [pc, #152]	; (8001288 <MX_GPIO_Init+0x13c>)
 80011ee:	f000 fd99 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_PED_Pin BUTTON_MODE_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_PED_Pin|BUTTON_MODE_Pin|BUTTON_SET_Pin;
 80011f2:	2313      	movs	r3, #19
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	481d      	ldr	r0, [pc, #116]	; (800127c <MX_GPIO_Init+0x130>)
 8001206:	f000 fd8d 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_GREEN_P1_Pin LED_GREEN_P2_Pin LED_RED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin;
 800120a:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2302      	movs	r3, #2
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4816      	ldr	r0, [pc, #88]	; (800127c <MX_GPIO_Init+0x130>)
 8001224:	f000 fd7e 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INC_Pin */
  GPIO_InitStruct.Pin = BUTTON_INC_Pin;
 8001228:	2301      	movs	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INC_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_GPIO_Init+0x134>)
 800123c:	f000 fd72 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_P2_Pin LED_RED_P1_Pin LED_GREEN_1_Pin LED_GREEN_2_Pin
                           LED_RED_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 8001240:	f240 433c 	movw	r3, #1084	; 0x43c
 8001244:	613b      	str	r3, [r7, #16]
                          |LED_RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2302      	movs	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <MX_GPIO_Init+0x134>)
 800125a:	f000 fd63 	bl	8001d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2028      	movs	r0, #40	; 0x28
 8001264:	f000 fc77 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001268:	2028      	movs	r0, #40	; 0x28
 800126a:	f000 fc90 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40010800 	.word	0x40010800
 8001280:	40010c00 	.word	0x40010c00
 8001284:	10110000 	.word	0x10110000
 8001288:	40011000 	.word	0x40011000

0800128c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	timerRun();
 8001294:	f000 f99e 	bl	80015d4 <timerRun>
	getKeyInput();
 8001298:	f7ff f90c 	bl	80004b4 <getKeyInput>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_MspInit+0x5c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_MspInit+0x5c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_MspInit+0x60>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_MspInit+0x60>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_TIM_Base_MspInit+0x44>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d113      	bne.n	800134e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_TIM_Base_MspInit+0x48>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <HAL_TIM_Base_MspInit+0x48>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_TIM_Base_MspInit+0x48>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	201d      	movs	r0, #29
 8001344:	f000 fc07 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001348:	201d      	movs	r0, #29
 800134a:	f000 fc20 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40000400 	.word	0x40000400
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_TIM_MspPostInit+0x58>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d117      	bne.n	80013b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_TIM_MspPostInit+0x5c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_TIM_MspPostInit+0x5c>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_TIM_MspPostInit+0x5c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001398:	23c0      	movs	r3, #192	; 0xc0
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_TIM_MspPostInit+0x60>)
 80013ac:	f000 fcba 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40000400 	.word	0x40000400
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_UART_MspInit+0x80>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d12b      	bne.n	800143c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_UART_MspInit+0x84>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_UART_MspInit+0x84>)
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ee:	61d3      	str	r3, [r2, #28]
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_UART_MspInit+0x84>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_UART_MspInit+0x84>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_UART_MspInit+0x84>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_UART_MspInit+0x84>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001414:	230c      	movs	r3, #12
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <HAL_UART_MspInit+0x88>)
 8001428:	f000 fc7c 	bl	8001d24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2026      	movs	r0, #38	; 0x26
 8001432:	f000 fb90 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001436:	2026      	movs	r0, #38	; 0x26
 8001438:	f000 fba9 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40004400 	.word	0x40004400
 8001448:	40021000 	.word	0x40021000
 800144c:	40010800 	.word	0x40010800

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 fa6b 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM3_IRQHandler+0x10>)
 80014a6:	f001 fbc9 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000011c 	.word	0x2000011c

080014b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <USART2_IRQHandler+0x10>)
 80014ba:	f002 fa61 	bl	8003980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000184 	.word	0x20000184

080014c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014d0:	f000 fddc 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f002 fe32 	bl	8004170 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20005000 	.word	0x20005000
 8001538:	00000400 	.word	0x00000400
 800153c:	200000c4 	.word	0x200000c4
 8001540:	20000210 	.word	0x20000210

08001544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <currentCounter>:
#include "timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

int currentCounter(int timer) {
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <currentCounter+0x1c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000164 	.word	0x20000164

08001570 <isTimerUp>:

int isTimerUp(int timer) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <isTimerUp+0x24>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	2b01      	cmp	r3, #1
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000174 	.word	0x20000174

08001598 <setTimer>:

void setTimer(int timer, int duration){
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration / timer_cycle;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <setTimer+0x30>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <setTimer+0x34>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <setTimer+0x38>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2100      	movs	r1, #0
 80015ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	20000010 	.word	0x20000010
 80015cc:	20000164 	.word	0x20000164
 80015d0:	20000174 	.word	0x20000174

080015d4 <timerRun>:
void timerRun(){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	e01c      	b.n	800161a <timerRun+0x46>
		if(timer_counter[timer] > 0){
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <timerRun+0x58>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	dd13      	ble.n	8001614 <timerRun+0x40>
			timer_counter[timer]--;
 80015ec:	4a0f      	ldr	r2, [pc, #60]	; (800162c <timerRun+0x58>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	490d      	ldr	r1, [pc, #52]	; (800162c <timerRun+0x58>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0) {
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <timerRun+0x58>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d104      	bne.n	8001614 <timerRun+0x40>
				timer_flag[timer] = 1;
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <timerRun+0x5c>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2101      	movs	r1, #1
 8001610:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b03      	cmp	r3, #3
 800161e:	dddf      	ble.n	80015e0 <timerRun+0xc>
			}
		}
	}
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000164 	.word	0x20000164
 8001630:	20000174 	.word	0x20000174

08001634 <sendTimerCounter>:
int count1 = 0;
int count2 = 0;
char str[50];
UART_HandleTypeDef huart2;

void sendTimerCounter() {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	if (count1 != currentCounter(0) / 100) {
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff ff89 	bl	8001550 <currentCounter>
 800163e:	4603      	mov	r3, r0
 8001640:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <sendTimerCounter+0xac>)
 8001642:	fb82 1203 	smull	r1, r2, r2, r3
 8001646:	1152      	asrs	r2, r2, #5
 8001648:	17db      	asrs	r3, r3, #31
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <sendTimerCounter+0xb0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d01a      	beq.n	800168a <sendTimerCounter+0x56>
	  count1 = currentCounter(0) / 100;
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff ff7b 	bl	8001550 <currentCounter>
 800165a:	4603      	mov	r3, r0
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <sendTimerCounter+0xac>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1152      	asrs	r2, r2, #5
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <sendTimerCounter+0xb0>)
 800166a:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "H: ", count1), 100);
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <sendTimerCounter+0xb0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <sendTimerCounter+0xb4>)
 8001672:	491e      	ldr	r1, [pc, #120]	; (80016ec <sendTimerCounter+0xb8>)
 8001674:	481e      	ldr	r0, [pc, #120]	; (80016f0 <sendTimerCounter+0xbc>)
 8001676:	f002 fdad 	bl	80041d4 <siprintf>
 800167a:	4603      	mov	r3, r0
 800167c:	b29a      	uxth	r2, r3
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	491b      	ldr	r1, [pc, #108]	; (80016f0 <sendTimerCounter+0xbc>)
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <sendTimerCounter+0xc0>)
 8001684:	f002 f8e9 	bl	800385a <HAL_UART_Transmit>

	else if (count2 != currentCounter(1) / 100) {
	  count2 = currentCounter(1) / 100;
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "V: ", count2), 100);
	}
}
 8001688:	e027      	b.n	80016da <sendTimerCounter+0xa6>
	else if (count2 != currentCounter(1) / 100) {
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff ff60 	bl	8001550 <currentCounter>
 8001690:	4603      	mov	r3, r0
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <sendTimerCounter+0xac>)
 8001694:	fb82 1203 	smull	r1, r2, r2, r3
 8001698:	1152      	asrs	r2, r2, #5
 800169a:	17db      	asrs	r3, r3, #31
 800169c:	1ad2      	subs	r2, r2, r3
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <sendTimerCounter+0xc4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d019      	beq.n	80016da <sendTimerCounter+0xa6>
	  count2 = currentCounter(1) / 100;
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff ff52 	bl	8001550 <currentCounter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <sendTimerCounter+0xac>)
 80016b0:	fb82 1203 	smull	r1, r2, r2, r3
 80016b4:	1152      	asrs	r2, r2, #5
 80016b6:	17db      	asrs	r3, r3, #31
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <sendTimerCounter+0xc4>)
 80016bc:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "V: ", count2), 100);
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <sendTimerCounter+0xc4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <sendTimerCounter+0xc8>)
 80016c4:	4909      	ldr	r1, [pc, #36]	; (80016ec <sendTimerCounter+0xb8>)
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <sendTimerCounter+0xbc>)
 80016c8:	f002 fd84 	bl	80041d4 <siprintf>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	4907      	ldr	r1, [pc, #28]	; (80016f0 <sendTimerCounter+0xbc>)
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <sendTimerCounter+0xc0>)
 80016d6:	f002 f8c0 	bl	800385a <HAL_UART_Transmit>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	51eb851f 	.word	0x51eb851f
 80016e4:	200000cc 	.word	0x200000cc
 80016e8:	08004a60 	.word	0x08004a60
 80016ec:	08004a64 	.word	0x08004a64
 80016f0:	200001c8 	.word	0x200001c8
 80016f4:	20000184 	.word	0x20000184
 80016f8:	200000d0 	.word	0x200000d0
 80016fc:	08004a6c 	.word	0x08004a6c

08001700 <sendTimeDuration>:

void sendTimeDuration() {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	switch (mode) {
 8001704:	4b45      	ldr	r3, [pc, #276]	; (800181c <sendTimeDuration+0x11c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3b05      	subs	r3, #5
 800170a:	2b03      	cmp	r3, #3
 800170c:	d87d      	bhi.n	800180a <sendTimeDuration+0x10a>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <sendTimeDuration+0x14>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001725 	.word	0x08001725
 8001718:	0800172d 	.word	0x0800172d
 800171c:	08001777 	.word	0x08001777
 8001720:	080017c1 	.word	0x080017c1
		case MAN_MODE:
			count = 0;
 8001724:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <sendTimeDuration+0x120>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
			break;
 800172a:	e075      	b.n	8001818 <sendTimeDuration+0x118>

		case MAN_RED:
			if (count != RED_time / 1000) {
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <sendTimeDuration+0x124>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a3d      	ldr	r2, [pc, #244]	; (8001828 <sendTimeDuration+0x128>)
 8001732:	fb82 1203 	smull	r1, r2, r2, r3
 8001736:	1192      	asrs	r2, r2, #6
 8001738:	17db      	asrs	r3, r3, #31
 800173a:	1ad2      	subs	r2, r2, r3
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <sendTimeDuration+0x120>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d064      	beq.n	800180e <sendTimeDuration+0x10e>
				count = RED_time / 1000;
 8001744:	4b37      	ldr	r3, [pc, #220]	; (8001824 <sendTimeDuration+0x124>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a37      	ldr	r2, [pc, #220]	; (8001828 <sendTimeDuration+0x128>)
 800174a:	fb82 1203 	smull	r1, r2, r2, r3
 800174e:	1192      	asrs	r2, r2, #6
 8001750:	17db      	asrs	r3, r3, #31
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a32      	ldr	r2, [pc, #200]	; (8001820 <sendTimeDuration+0x120>)
 8001756:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Red = ", count), 100);
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <sendTimeDuration+0x120>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a33      	ldr	r2, [pc, #204]	; (800182c <sendTimeDuration+0x12c>)
 800175e:	4934      	ldr	r1, [pc, #208]	; (8001830 <sendTimeDuration+0x130>)
 8001760:	4834      	ldr	r0, [pc, #208]	; (8001834 <sendTimeDuration+0x134>)
 8001762:	f002 fd37 	bl	80041d4 <siprintf>
 8001766:	4603      	mov	r3, r0
 8001768:	b29a      	uxth	r2, r3
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	4931      	ldr	r1, [pc, #196]	; (8001834 <sendTimeDuration+0x134>)
 800176e:	4832      	ldr	r0, [pc, #200]	; (8001838 <sendTimeDuration+0x138>)
 8001770:	f002 f873 	bl	800385a <HAL_UART_Transmit>
			}
			break;
 8001774:	e04b      	b.n	800180e <sendTimeDuration+0x10e>

		case MAN_GREEN:
			if (count != GREEN_time / 1000) {
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <sendTimeDuration+0x13c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <sendTimeDuration+0x128>)
 800177c:	fb82 1203 	smull	r1, r2, r2, r3
 8001780:	1192      	asrs	r2, r2, #6
 8001782:	17db      	asrs	r3, r3, #31
 8001784:	1ad2      	subs	r2, r2, r3
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <sendTimeDuration+0x120>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d041      	beq.n	8001812 <sendTimeDuration+0x112>
				count = GREEN_time / 1000;
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <sendTimeDuration+0x13c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a25      	ldr	r2, [pc, #148]	; (8001828 <sendTimeDuration+0x128>)
 8001794:	fb82 1203 	smull	r1, r2, r2, r3
 8001798:	1192      	asrs	r2, r2, #6
 800179a:	17db      	asrs	r3, r3, #31
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a20      	ldr	r2, [pc, #128]	; (8001820 <sendTimeDuration+0x120>)
 80017a0:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Green = ", count), 100);
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <sendTimeDuration+0x120>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <sendTimeDuration+0x140>)
 80017a8:	4921      	ldr	r1, [pc, #132]	; (8001830 <sendTimeDuration+0x130>)
 80017aa:	4822      	ldr	r0, [pc, #136]	; (8001834 <sendTimeDuration+0x134>)
 80017ac:	f002 fd12 	bl	80041d4 <siprintf>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	2364      	movs	r3, #100	; 0x64
 80017b6:	491f      	ldr	r1, [pc, #124]	; (8001834 <sendTimeDuration+0x134>)
 80017b8:	481f      	ldr	r0, [pc, #124]	; (8001838 <sendTimeDuration+0x138>)
 80017ba:	f002 f84e 	bl	800385a <HAL_UART_Transmit>
			}
			break;
 80017be:	e028      	b.n	8001812 <sendTimeDuration+0x112>

		case MAN_YELLOW:
			if (count != YELLOW_time / 1000) {
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <sendTimeDuration+0x144>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <sendTimeDuration+0x128>)
 80017c6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ca:	1192      	asrs	r2, r2, #6
 80017cc:	17db      	asrs	r3, r3, #31
 80017ce:	1ad2      	subs	r2, r2, r3
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <sendTimeDuration+0x120>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d01e      	beq.n	8001816 <sendTimeDuration+0x116>
				count = YELLOW_time / 1000;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <sendTimeDuration+0x144>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <sendTimeDuration+0x128>)
 80017de:	fb82 1203 	smull	r1, r2, r2, r3
 80017e2:	1192      	asrs	r2, r2, #6
 80017e4:	17db      	asrs	r3, r3, #31
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <sendTimeDuration+0x120>)
 80017ea:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Yellow = ", count), 100);
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <sendTimeDuration+0x120>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <sendTimeDuration+0x148>)
 80017f2:	490f      	ldr	r1, [pc, #60]	; (8001830 <sendTimeDuration+0x130>)
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <sendTimeDuration+0x134>)
 80017f6:	f002 fced 	bl	80041d4 <siprintf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <sendTimeDuration+0x134>)
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <sendTimeDuration+0x138>)
 8001804:	f002 f829 	bl	800385a <HAL_UART_Transmit>
			}
			break;
 8001808:	e005      	b.n	8001816 <sendTimeDuration+0x116>

		default:
			break;
 800180a:	bf00      	nop
 800180c:	e004      	b.n	8001818 <sendTimeDuration+0x118>
			break;
 800180e:	bf00      	nop
 8001810:	e002      	b.n	8001818 <sendTimeDuration+0x118>
			break;
 8001812:	bf00      	nop
 8001814:	e000      	b.n	8001818 <sendTimeDuration+0x118>
			break;
 8001816:	bf00      	nop
	}
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200000c0 	.word	0x200000c0
 8001820:	200000c8 	.word	0x200000c8
 8001824:	20000018 	.word	0x20000018
 8001828:	10624dd3 	.word	0x10624dd3
 800182c:	08004a70 	.word	0x08004a70
 8001830:	08004a64 	.word	0x08004a64
 8001834:	200001c8 	.word	0x200001c8
 8001838:	20000184 	.word	0x20000184
 800183c:	2000001c 	.word	0x2000001c
 8001840:	08004a78 	.word	0x08004a78
 8001844:	20000020 	.word	0x20000020
 8001848:	08004a84 	.word	0x08004a84

0800184c <sendTimeInc>:

void sendTimeInc() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	if (count != time_count) {
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <sendTimeInc+0x38>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <sendTimeInc+0x3c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d011      	beq.n	8001880 <sendTimeInc+0x34>
		count = time_count;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <sendTimeInc+0x3c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <sendTimeInc+0x38>)
 8001862:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, str, sprintf(str, "%d\r\n", count), 100);
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <sendTimeInc+0x38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <sendTimeInc+0x40>)
 800186c:	4808      	ldr	r0, [pc, #32]	; (8001890 <sendTimeInc+0x44>)
 800186e:	f002 fcb1 	bl	80041d4 <siprintf>
 8001872:	4603      	mov	r3, r0
 8001874:	b29a      	uxth	r2, r3
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	4905      	ldr	r1, [pc, #20]	; (8001890 <sendTimeInc+0x44>)
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <sendTimeInc+0x48>)
 800187c:	f001 ffed 	bl	800385a <HAL_UART_Transmit>
	}
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200000c8 	.word	0x200000c8
 8001888:	200000bc 	.word	0x200000bc
 800188c:	08004a90 	.word	0x08004a90
 8001890:	200001c8 	.word	0x200001c8
 8001894:	20000184 	.word	0x20000184

08001898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	; (80018d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	; (80018dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018be:	f7ff fe41 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f002 fc5b 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018c6:	f7ff fb31 	bl	8000f2c <main>
  bx lr
 80018ca:	4770      	bx	lr
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80018d4:	08004afc 	.word	0x08004afc
  ldr r2, =_sbss
 80018d8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80018dc:	20000210 	.word	0x20000210

080018e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC1_2_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_Init+0x28>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_Init+0x28>)
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 f923 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f808 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001900:	f7ff fcd6 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x54>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x58>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f93b 	bl	8001baa <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f000 f903 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_InitTick+0x5c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000024 	.word	0x20000024
 8001968:	2000002c 	.word	0x2000002c
 800196c:	20000028 	.word	0x20000028

08001970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_IncTick+0x1c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_IncTick+0x20>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a03      	ldr	r2, [pc, #12]	; (8001990 <HAL_IncTick+0x20>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	2000002c 	.word	0x2000002c
 8001990:	200001fc 	.word	0x200001fc

08001994 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <HAL_GetTick+0x10>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	200001fc 	.word	0x200001fc

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4906      	ldr	r1, [pc, #24]	; (8001a40 <__NVIC_EnableIRQ+0x34>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff90 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff2d 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff42 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff90 	bl	8001a98 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5f 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff35 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d008      	beq.n	8001bea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e020      	b.n	8001c2c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 020e 	bic.w	r2, r2, #14
 8001bf8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d005      	beq.n	8001c5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2204      	movs	r2, #4
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e051      	b.n	8001cfe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 020e 	bic.w	r2, r2, #14
 8001c68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <HAL_DMA_Abort_IT+0xd0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d029      	beq.n	8001cd8 <HAL_DMA_Abort_IT+0xa0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <HAL_DMA_Abort_IT+0xd4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d022      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x9c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_DMA_Abort_IT+0xd8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d01a      	beq.n	8001cce <HAL_DMA_Abort_IT+0x96>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_DMA_Abort_IT+0xdc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d012      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x90>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_DMA_Abort_IT+0xe0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00a      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x8a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_DMA_Abort_IT+0xe4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d102      	bne.n	8001cbc <HAL_DMA_Abort_IT+0x84>
 8001cb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cba:	e00e      	b.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc0:	e00b      	b.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc6:	e008      	b.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	e005      	b.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd2:	e002      	b.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	e000      	b.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	4a11      	ldr	r2, [pc, #68]	; (8001d20 <HAL_DMA_Abort_IT+0xe8>)
 8001cdc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
    } 
  }
  return status;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40020008 	.word	0x40020008
 8001d0c:	4002001c 	.word	0x4002001c
 8001d10:	40020030 	.word	0x40020030
 8001d14:	40020044 	.word	0x40020044
 8001d18:	40020058 	.word	0x40020058
 8001d1c:	4002006c 	.word	0x4002006c
 8001d20:	40020000 	.word	0x40020000

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e169      	b.n	800200c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8158 	bne.w	8002006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a9a      	ldr	r2, [pc, #616]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d60:	4a98      	ldr	r2, [pc, #608]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d875      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d66:	4a98      	ldr	r2, [pc, #608]	; (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d058      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d6c:	4a96      	ldr	r2, [pc, #600]	; (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d86f      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d72:	4a96      	ldr	r2, [pc, #600]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d052      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d78:	4a94      	ldr	r2, [pc, #592]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d869      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a94      	ldr	r2, [pc, #592]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04c      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d84:	4a92      	ldr	r2, [pc, #584]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d863      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a92      	ldr	r2, [pc, #584]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d046      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d90:	4a90      	ldr	r2, [pc, #576]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d85d      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d82a      	bhi.n	8001df0 <HAL_GPIO_Init+0xcc>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d859      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_GPIO_Init+0x80>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001df9 	.word	0x08001df9
 8001dac:	08001e0b 	.word	0x08001e0b
 8001db0:	08001e4d 	.word	0x08001e4d
 8001db4:	08001e53 	.word	0x08001e53
 8001db8:	08001e53 	.word	0x08001e53
 8001dbc:	08001e53 	.word	0x08001e53
 8001dc0:	08001e53 	.word	0x08001e53
 8001dc4:	08001e53 	.word	0x08001e53
 8001dc8:	08001e53 	.word	0x08001e53
 8001dcc:	08001e53 	.word	0x08001e53
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001e53 	.word	0x08001e53
 8001dd8:	08001e53 	.word	0x08001e53
 8001ddc:	08001e53 	.word	0x08001e53
 8001de0:	08001e53 	.word	0x08001e53
 8001de4:	08001e53 	.word	0x08001e53
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e15 	.word	0x08001e15
 8001df0:	4a79      	ldr	r2, [pc, #484]	; (8001fd8 <HAL_GPIO_Init+0x2b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001df6:	e02c      	b.n	8001e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e029      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e024      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e01f      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e01a      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e26:	2304      	movs	r3, #4
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e013      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	611a      	str	r2, [r3, #16]
          break;
 8001e3e:	e009      	b.n	8001e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	615a      	str	r2, [r3, #20]
          break;
 8001e4a:	e003      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          break;
 8001e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d801      	bhi.n	8001e5e <HAL_GPIO_Init+0x13a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_Init+0x13e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d802      	bhi.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x152>
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3b08      	subs	r3, #8
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80b1 	beq.w	8002006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ebc:	4a48      	ldr	r2, [pc, #288]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <HAL_GPIO_Init+0x2c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3f      	ldr	r2, [pc, #252]	; (8001fe8 <HAL_GPIO_Init+0x2c4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1e8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1e4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3d      	ldr	r2, [pc, #244]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1e0>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f04:	2304      	movs	r3, #4
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f10:	2300      	movs	r3, #0
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f22:	492f      	ldr	r1, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	492c      	ldr	r1, [pc, #176]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4928      	ldr	r1, [pc, #160]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4922      	ldr	r1, [pc, #136]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	491e      	ldr	r1, [pc, #120]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4914      	ldr	r1, [pc, #80]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
 8001fc0:	e021      	b.n	8002006 <HAL_GPIO_Init+0x2e2>
 8001fc2:	bf00      	nop
 8001fc4:	10320000 	.word	0x10320000
 8001fc8:	10310000 	.word	0x10310000
 8001fcc:	10220000 	.word	0x10220000
 8001fd0:	10210000 	.word	0x10210000
 8001fd4:	10120000 	.word	0x10120000
 8001fd8:	10110000 	.word	0x10110000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40011400 	.word	0x40011400
 8001ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4909      	ldr	r1, [pc, #36]	; (8002028 <HAL_GPIO_Init+0x304>)
 8002002:	4013      	ands	r3, r2
 8002004:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	3301      	adds	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f ae8e 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	372c      	adds	r7, #44	; 0x2c
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40010400 	.word	0x40010400

0800202c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e001      	b.n	800204e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206a:	787b      	ldrb	r3, [r7, #1]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002076:	e003      	b.n	8002080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f806 	bl	80020bc <HAL_GPIO_EXTI_Callback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e26c      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fc:	4b8f      	ldr	r3, [pc, #572]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
 8002108:	4b8c      	ldr	r3, [pc, #560]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b89      	ldr	r3, [pc, #548]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x12c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e246      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x76>
 8002138:	4b80      	ldr	r3, [pc, #512]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a7f      	ldr	r2, [pc, #508]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x98>
 800214e:	4b7b      	ldr	r3, [pc, #492]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7a      	ldr	r2, [pc, #488]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b78      	ldr	r3, [pc, #480]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a77      	ldr	r2, [pc, #476]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xbc>
 8002172:	4b72      	ldr	r3, [pc, #456]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a71      	ldr	r2, [pc, #452]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 800218c:	4b6b      	ldr	r3, [pc, #428]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6a      	ldr	r2, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b68      	ldr	r3, [pc, #416]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a67      	ldr	r2, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fbf2 	bl	8001994 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fbee 	bl	8001994 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1fa      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe4>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fbde 	bl	8001994 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fbda 	bl	8001994 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1e6      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x10c>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b4c      	ldr	r3, [pc, #304]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002216:	4b49      	ldr	r3, [pc, #292]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
 8002222:	4b46      	ldr	r3, [pc, #280]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1ba      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4939      	ldr	r1, [pc, #228]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_RCC_OscConfig+0x270>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fb93 	bl	8001994 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff fb8f 	bl	8001994 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e19b      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4927      	ldr	r1, [pc, #156]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCC_OscConfig+0x270>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fb72 	bl	8001994 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff fb6e 	bl	8001994 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e17a      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03a      	beq.n	8002354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fb52 	bl	8001994 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fb4e 	bl	8001994 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e15a      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 fad8 	bl	80028c8 <RCC_Delay>
 8002318:	e01c      	b.n	8002354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff fb38 	bl	8001994 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002326:	e00f      	b.n	8002348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff fb34 	bl	8001994 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d908      	bls.n	8002348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e140      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	42420000 	.word	0x42420000
 8002344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b9e      	ldr	r3, [pc, #632]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e9      	bne.n	8002328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a6 	beq.w	80024ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b97      	ldr	r3, [pc, #604]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b94      	ldr	r3, [pc, #592]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a93      	ldr	r2, [pc, #588]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b91      	ldr	r3, [pc, #580]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b8e      	ldr	r3, [pc, #568]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a8a      	ldr	r2, [pc, #552]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7ff faf5 	bl	8001994 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7ff faf1 	bl	8001994 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0fd      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b81      	ldr	r3, [pc, #516]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x312>
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a7a      	ldr	r2, [pc, #488]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e02d      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x334>
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a72      	ldr	r2, [pc, #456]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x356>
 800240c:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a69      	ldr	r2, [pc, #420]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a66      	ldr	r2, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff faa5 	bl	8001994 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff faa1 	bl	8001994 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0ab      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x37e>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff fa8f 	bl	8001994 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fa8b 	bl	8001994 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e095      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8081 	beq.w	80025ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d061      	beq.n	8002588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d146      	bne.n	800255a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <HAL_RCC_OscConfig+0x4fc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fa5f 	bl	8001994 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fa5b 	bl	8001994 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e067      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d108      	bne.n	8002514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	492d      	ldr	r1, [pc, #180]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a19      	ldr	r1, [r3, #32]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	430b      	orrs	r3, r1
 8002526:	4927      	ldr	r1, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x4fc>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7ff fa2f 	bl	8001994 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff fa2b 	bl	8001994 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e037      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x46a>
 8002558:	e02f      	b.n	80025ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_RCC_OscConfig+0x4fc>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fa18 	bl	8001994 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7ff fa14 	bl	8001994 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e020      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x498>
 8002586:	e018      	b.n	80025ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42420060 	.word	0x42420060

080025d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d0      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4965      	ldr	r1, [pc, #404]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800264e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d040      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e073      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4936      	ldr	r1, [pc, #216]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7ff f968 	bl	8001994 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7ff f964 	bl	8001994 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e053      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d210      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4922      	ldr	r1, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1cc>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1d0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f8c6 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	08004aa8 	.word	0x08004aa8
 800279c:	20000024 	.word	0x20000024
 80027a0:	20000028 	.word	0x20000028

080027a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b490      	push	{r4, r7}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027ac:	1d3c      	adds	r4, r7, #4
 80027ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027b4:	f240 2301 	movw	r3, #513	; 0x201
 80027b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x40>
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x46>
 80027e2:	e02d      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e6:	623b      	str	r3, [r7, #32]
      break;
 80027e8:	e02d      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	0c9b      	lsrs	r3, r3, #18
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027f6:	4413      	add	r3, r2
 80027f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0c5b      	lsrs	r3, r3, #17
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002816:	4413      	add	r3, r2
 8002818:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800281c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002822:	fb02 f203 	mul.w	r2, r2, r3
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	e004      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	623b      	str	r3, [r7, #32]
      break;
 800283e:	e002      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002842:	623b      	str	r3, [r7, #32]
      break;
 8002844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002846:	6a3b      	ldr	r3, [r7, #32]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bc90      	pop	{r4, r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	08004a98 	.word	0x08004a98
 8002858:	40021000 	.word	0x40021000
 800285c:	007a1200 	.word	0x007a1200
 8002860:	003d0900 	.word	0x003d0900

08002864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <HAL_RCC_GetHCLKFreq+0x10>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000024 	.word	0x20000024

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800287c:	f7ff fff2 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	08004ab8 	.word	0x08004ab8

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a4:	f7ff ffde 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0adb      	lsrs	r3, r3, #11
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08004ab8 	.word	0x08004ab8

080028c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCC_Delay+0x34>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <RCC_Delay+0x38>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a5b      	lsrs	r3, r3, #9
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e4:	bf00      	nop
  }
  while (Delay --);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	60fa      	str	r2, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <RCC_Delay+0x1c>
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	20000024 	.word	0x20000024
 8002900:	10624dd3 	.word	0x10624dd3

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e041      	b.n	800299a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fcf2 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 fc28 	bl	8003198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d001      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e03a      	b.n	8002a32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_TIM_Base_Start_IT+0x98>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x58>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d009      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x58>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x58>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d111      	bne.n	8002a20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d010      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1e:	e007      	b.n	8002a30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800

08002a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e041      	b.n	8002ade <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f839 	bl	8002ae6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 fb86 	bl	8003198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_TIM_PWM_Start+0x24>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e022      	b.n	8002b62 <HAL_TIM_PWM_Start+0x6a>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d109      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x3e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	e015      	b.n	8002b62 <HAL_TIM_PWM_Start+0x6a>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d109      	bne.n	8002b50 <HAL_TIM_PWM_Start+0x58>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e008      	b.n	8002b62 <HAL_TIM_PWM_Start+0x6a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e05e      	b.n	8002c28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d104      	bne.n	8002b7a <HAL_TIM_PWM_Start+0x82>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b78:	e013      	b.n	8002ba2 <HAL_TIM_PWM_Start+0xaa>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d104      	bne.n	8002b8a <HAL_TIM_PWM_Start+0x92>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	e00b      	b.n	8002ba2 <HAL_TIM_PWM_Start+0xaa>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0xa2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b98:	e003      	b.n	8002ba2 <HAL_TIM_PWM_Start+0xaa>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	6839      	ldr	r1, [r7, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fd74 	bl	8003698 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <HAL_TIM_PWM_Start+0x138>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d107      	bne.n	8002bca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_TIM_PWM_Start+0x138>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0xfa>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0xfa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <HAL_TIM_PWM_Start+0x13c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0xfa>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_TIM_PWM_Start+0x140>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d010      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c14:	e007      	b.n	8002c26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800

08002c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa6f 	bl	8003162 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fa62 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fa71 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0204 	mvn.w	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa45 	bl	8003162 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa38 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fa47 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0208 	mvn.w	r2, #8
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa1b 	bl	8003162 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa0e 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fa1d 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0210 	mvn.w	r2, #16
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9f1 	bl	8003162 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f9e4 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f9f3 	bl	8003174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0201 	mvn.w	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fa66 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fce1 	bl	80037ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9b7 	bl	8003186 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fcac 	bl	800379c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0ac      	b.n	8002fc0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	f200 809f 	bhi.w	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002eb1 	.word	0x08002eb1
 8002e80:	08002fb5 	.word	0x08002fb5
 8002e84:	08002fb5 	.word	0x08002fb5
 8002e88:	08002fb5 	.word	0x08002fb5
 8002e8c:	08002ef1 	.word	0x08002ef1
 8002e90:	08002fb5 	.word	0x08002fb5
 8002e94:	08002fb5 	.word	0x08002fb5
 8002e98:	08002fb5 	.word	0x08002fb5
 8002e9c:	08002f33 	.word	0x08002f33
 8002ea0:	08002fb5 	.word	0x08002fb5
 8002ea4:	08002fb5 	.word	0x08002fb5
 8002ea8:	08002fb5 	.word	0x08002fb5
 8002eac:	08002f73 	.word	0x08002f73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f9d0 	bl	800325c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0208 	orr.w	r2, r2, #8
 8002eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0204 	bic.w	r2, r2, #4
 8002eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6999      	ldr	r1, [r3, #24]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	619a      	str	r2, [r3, #24]
      break;
 8002eee:	e062      	b.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fa16 	bl	8003328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6999      	ldr	r1, [r3, #24]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	021a      	lsls	r2, r3, #8
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	619a      	str	r2, [r3, #24]
      break;
 8002f30:	e041      	b.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fa5f 	bl	80033fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0208 	orr.w	r2, r2, #8
 8002f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0204 	bic.w	r2, r2, #4
 8002f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69d9      	ldr	r1, [r3, #28]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	61da      	str	r2, [r3, #28]
      break;
 8002f70:	e021      	b.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 faa9 	bl	80034d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69d9      	ldr	r1, [r3, #28]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	021a      	lsls	r2, r3, #8
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	61da      	str	r2, [r3, #28]
      break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002fb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_TIM_ConfigClockSource+0x18>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0b3      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x180>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003006:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003018:	d03e      	beq.n	8003098 <HAL_TIM_ConfigClockSource+0xd0>
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301e:	f200 8087 	bhi.w	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	f000 8085 	beq.w	8003134 <HAL_TIM_ConfigClockSource+0x16c>
 800302a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302e:	d87f      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003030:	2b70      	cmp	r3, #112	; 0x70
 8003032:	d01a      	beq.n	800306a <HAL_TIM_ConfigClockSource+0xa2>
 8003034:	2b70      	cmp	r3, #112	; 0x70
 8003036:	d87b      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d050      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x116>
 800303c:	2b60      	cmp	r3, #96	; 0x60
 800303e:	d877      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003040:	2b50      	cmp	r3, #80	; 0x50
 8003042:	d03c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0xf6>
 8003044:	2b50      	cmp	r3, #80	; 0x50
 8003046:	d873      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d058      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x136>
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d86f      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003050:	2b30      	cmp	r3, #48	; 0x30
 8003052:	d064      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x156>
 8003054:	2b30      	cmp	r3, #48	; 0x30
 8003056:	d86b      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d060      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x156>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d867      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d05c      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x156>
 8003064:	2b10      	cmp	r3, #16
 8003066:	d05a      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003068:	e062      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6899      	ldr	r1, [r3, #8]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f000 faee 	bl	800365a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800308c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	609a      	str	r2, [r3, #8]
      break;
 8003096:	e04e      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6899      	ldr	r1, [r3, #8]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f000 fad7 	bl	800365a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ba:	609a      	str	r2, [r3, #8]
      break;
 80030bc:	e03b      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f000 fa4e 	bl	800356c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2150      	movs	r1, #80	; 0x50
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 faa5 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 80030dc:	e02b      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 fa6c 	bl	80035c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2160      	movs	r1, #96	; 0x60
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fa95 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 80030fc:	e01b      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	461a      	mov	r2, r3
 800310c:	f000 fa2e 	bl	800356c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa85 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 800311c:	e00b      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f000 fa7c 	bl	8003626 <TIM_ITRx_SetConfig>
        break;
 800312e:	e002      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003130:	bf00      	nop
 8003132:	e000      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003134:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a29      	ldr	r2, [pc, #164]	; (8003250 <TIM_Base_SetConfig+0xb8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <TIM_Base_SetConfig+0x30>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b6:	d007      	beq.n	80031c8 <TIM_Base_SetConfig+0x30>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a26      	ldr	r2, [pc, #152]	; (8003254 <TIM_Base_SetConfig+0xbc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0x30>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a25      	ldr	r2, [pc, #148]	; (8003258 <TIM_Base_SetConfig+0xc0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <TIM_Base_SetConfig+0xb8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0x62>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <TIM_Base_SetConfig+0xbc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0x62>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <TIM_Base_SetConfig+0xc0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <TIM_Base_SetConfig+0xb8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	615a      	str	r2, [r3, #20]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800

0800325c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f023 0201 	bic.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 0302 	bic.w	r3, r3, #2
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <TIM_OC1_SetConfig+0xc8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d10c      	bne.n	80032d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f023 0308 	bic.w	r3, r3, #8
 80032be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a13      	ldr	r2, [pc, #76]	; (8003324 <TIM_OC1_SetConfig+0xc8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d111      	bne.n	80032fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00

08003328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f023 0210 	bic.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0320 	bic.w	r3, r3, #32
 8003372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <TIM_OC2_SetConfig+0xd0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10d      	bne.n	80033a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <TIM_OC2_SetConfig+0xd0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d113      	bne.n	80033d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00

080033fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <TIM_OC3_SetConfig+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10d      	bne.n	8003476 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <TIM_OC3_SetConfig+0xd0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d113      	bne.n	80034a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800348c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	621a      	str	r2, [r3, #32]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40012c00 	.word	0x40012c00

080034d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	031b      	lsls	r3, r3, #12
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <TIM_OC4_SetConfig+0x98>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d109      	bne.n	8003544 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00

0800356c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 030a 	bic.w	r3, r3, #10
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 0210 	bic.w	r2, r3, #16
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	031b      	lsls	r3, r3, #12
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003604:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	f043 0307 	orr.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b087      	sub	sp, #28
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003674:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	021a      	lsls	r2, r3, #8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	431a      	orrs	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4313      	orrs	r3, r2
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2201      	movs	r2, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1a      	ldr	r2, [r3, #32]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	401a      	ands	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e046      	b.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00e      	beq.n	800375a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003744:	d009      	beq.n	800375a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a10      	ldr	r2, [pc, #64]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10c      	bne.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	4313      	orrs	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800

0800379c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e03f      	b.n	8003852 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fdec 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	; 0x24
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fc25 	bl	8004054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b08a      	sub	sp, #40	; 0x28
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	d17c      	bne.n	8003974 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_Transmit+0x2c>
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e075      	b.n	8003976 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_UART_Transmit+0x3e>
 8003894:	2302      	movs	r3, #2
 8003896:	e06e      	b.n	8003976 <HAL_UART_Transmit+0x11c>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2221      	movs	r2, #33	; 0x21
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ae:	f7fe f871 	bl	8001994 <HAL_GetTick>
 80038b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	88fa      	ldrh	r2, [r7, #6]
 80038be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d108      	bne.n	80038dc <HAL_UART_Transmit+0x82>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	e003      	b.n	80038e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038ec:	e02a      	b.n	8003944 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fa11 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e036      	b.n	8003976 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800391c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	3302      	adds	r3, #2
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e007      	b.n	8003936 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3301      	adds	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1cf      	bne.n	80038ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	2140      	movs	r1, #64	; 0x40
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f9e1 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10d      	bne.n	80039d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_UART_IRQHandler+0x52>
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa99 	bl	8003f02 <UART_Receive_IT>
      return;
 80039d0:	e17b      	b.n	8003cca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80b1 	beq.w	8003b3c <HAL_UART_IRQHandler+0x1bc>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <HAL_UART_IRQHandler+0x70>
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80a6 	beq.w	8003b3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_UART_IRQHandler+0x90>
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_UART_IRQHandler+0xb0>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0202 	orr.w	r2, r3, #2
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_UART_IRQHandler+0xd0>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	f043 0204 	orr.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00f      	beq.n	8003a7a <HAL_UART_IRQHandler+0xfa>
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_UART_IRQHandler+0xee>
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f043 0208 	orr.w	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 811e 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_UART_IRQHandler+0x11e>
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa32 	bl	8003f02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x146>
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d031      	beq.n	8003b2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f974 	bl	8003db4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d023      	beq.n	8003b22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d013      	beq.n	8003b1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	4a76      	ldr	r2, [pc, #472]	; (8003cd0 <HAL_UART_IRQHandler+0x350>)
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe f89a 	bl	8001c38 <HAL_DMA_Abort_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b14:	4610      	mov	r0, r2
 8003b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	e00e      	b.n	8003b38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8ec 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	e00a      	b.n	8003b38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8e8 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e006      	b.n	8003b38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8e4 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b36:	e0c3      	b.n	8003cc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	bf00      	nop
    return;
 8003b3a:	e0c1      	b.n	8003cc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 80a1 	bne.w	8003c88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 809b 	beq.w	8003c88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8095 	beq.w	8003c88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04e      	beq.n	8003c20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b8c:	8a3b      	ldrh	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8098 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b98:	8a3a      	ldrh	r2, [r7, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	f080 8092 	bcs.w	8003cc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8a3a      	ldrh	r2, [r7, #16]
 8003ba4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d02b      	beq.n	8003c08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bbe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bde:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0210 	bic.w	r2, r2, #16
 8003bfc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd ffdd 	bl	8001bc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f876 	bl	8003d0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c1e:	e051      	b.n	8003cc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d047      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c38:	8a7b      	ldrh	r3, [r7, #18]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d044      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0210 	bic.w	r2, r2, #16
 8003c7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c7c:	8a7b      	ldrh	r3, [r7, #18]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f842 	bl	8003d0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c86:	e01f      	b.n	8003cc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x324>
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8c9 	bl	8003e34 <UART_Transmit_IT>
    return;
 8003ca2:	e012      	b.n	8003cca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <HAL_UART_IRQHandler+0x34a>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f90a 	bl	8003ed2 <UART_EndTransmit_IT>
    return;
 8003cbe:	e004      	b.n	8003cca <HAL_UART_IRQHandler+0x34a>
    return;
 8003cc0:	bf00      	nop
 8003cc2:	e002      	b.n	8003cca <HAL_UART_IRQHandler+0x34a>
      return;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <HAL_UART_IRQHandler+0x34a>
      return;
 8003cc8:	bf00      	nop
  }
}
 8003cca:	3728      	adds	r7, #40	; 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08003e0d 	.word	0x08003e0d

08003cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d30:	e02c      	b.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d028      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d40:	f7fd fe28 	bl	8001994 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d21d      	bcs.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00f      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d0c3      	beq.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0210 	bic.w	r2, r2, #16
 8003df2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff ff66 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b21      	cmp	r3, #33	; 0x21
 8003e46:	d13e      	bne.n	8003ec6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d114      	bne.n	8003e7c <UART_Transmit_IT+0x48>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d110      	bne.n	8003e7c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]
 8003e7a:	e008      	b.n	8003e8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	1c59      	adds	r1, r3, #1
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6211      	str	r1, [r2, #32]
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ec0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff feee 	bl	8003cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b22      	cmp	r3, #34	; 0x22
 8003f14:	f040 8099 	bne.w	800404a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d117      	bne.n	8003f52 <UART_Receive_IT+0x50>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	1c9a      	adds	r2, r3, #2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f50:	e026      	b.n	8003fa0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d007      	beq.n	8003f76 <UART_Receive_IT+0x74>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <UART_Receive_IT+0x82>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e008      	b.n	8003f96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4619      	mov	r1, r3
 8003fae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d148      	bne.n	8004046 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0220 	bic.w	r2, r2, #32
 8003fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d123      	bne.n	800403c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0210 	bic.w	r2, r2, #16
 8004008:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b10      	cmp	r3, #16
 8004016:	d10a      	bne.n	800402e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff fe68 	bl	8003d0a <HAL_UARTEx_RxEventCallback>
 800403a:	e002      	b.n	8004042 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fe52 	bl	8003ce6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e002      	b.n	800404c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800408e:	f023 030c 	bic.w	r3, r3, #12
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	430b      	orrs	r3, r1
 800409a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <UART_SetConfig+0x114>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7fe fbf0 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	e002      	b.n	80040ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe fbd8 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80040c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <UART_SetConfig+0x118>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	0119      	lsls	r1, r3, #4
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <UART_SetConfig+0x118>)
 8004102:	fba3 0302 	umull	r0, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2064      	movs	r0, #100	; 0x64
 800410a:	fb00 f303 	mul.w	r3, r0, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	; 0x32
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <UART_SetConfig+0x118>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004120:	4419      	add	r1, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009a      	lsls	r2, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	fbb2 f2f3 	udiv	r2, r2, r3
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <UART_SetConfig+0x118>)
 800413a:	fba3 0302 	umull	r0, r3, r3, r2
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2064      	movs	r0, #100	; 0x64
 8004142:	fb00 f303 	mul.w	r3, r0, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	3332      	adds	r3, #50	; 0x32
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <UART_SetConfig+0x118>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	440a      	add	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40013800 	.word	0x40013800
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <__errno>:
 8004170:	4b01      	ldr	r3, [pc, #4]	; (8004178 <__errno+0x8>)
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000030 	.word	0x20000030

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	2600      	movs	r6, #0
 8004180:	4d0c      	ldr	r5, [pc, #48]	; (80041b4 <__libc_init_array+0x38>)
 8004182:	4c0d      	ldr	r4, [pc, #52]	; (80041b8 <__libc_init_array+0x3c>)
 8004184:	1b64      	subs	r4, r4, r5
 8004186:	10a4      	asrs	r4, r4, #2
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	f000 fc5c 	bl	8004a48 <_init>
 8004190:	2600      	movs	r6, #0
 8004192:	4d0a      	ldr	r5, [pc, #40]	; (80041bc <__libc_init_array+0x40>)
 8004194:	4c0a      	ldr	r4, [pc, #40]	; (80041c0 <__libc_init_array+0x44>)
 8004196:	1b64      	subs	r4, r4, r5
 8004198:	10a4      	asrs	r4, r4, #2
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	08004af4 	.word	0x08004af4
 80041b8:	08004af4 	.word	0x08004af4
 80041bc:	08004af4 	.word	0x08004af4
 80041c0:	08004af8 	.word	0x08004af8

080041c4 <memset>:
 80041c4:	4603      	mov	r3, r0
 80041c6:	4402      	add	r2, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d100      	bne.n	80041ce <memset+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f803 1b01 	strb.w	r1, [r3], #1
 80041d2:	e7f9      	b.n	80041c8 <memset+0x4>

080041d4 <siprintf>:
 80041d4:	b40e      	push	{r1, r2, r3}
 80041d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041da:	b500      	push	{lr}
 80041dc:	b09c      	sub	sp, #112	; 0x70
 80041de:	ab1d      	add	r3, sp, #116	; 0x74
 80041e0:	9002      	str	r0, [sp, #8]
 80041e2:	9006      	str	r0, [sp, #24]
 80041e4:	9107      	str	r1, [sp, #28]
 80041e6:	9104      	str	r1, [sp, #16]
 80041e8:	4808      	ldr	r0, [pc, #32]	; (800420c <siprintf+0x38>)
 80041ea:	4909      	ldr	r1, [pc, #36]	; (8004210 <siprintf+0x3c>)
 80041ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80041f0:	9105      	str	r1, [sp, #20]
 80041f2:	6800      	ldr	r0, [r0, #0]
 80041f4:	a902      	add	r1, sp, #8
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	f000 f868 	bl	80042cc <_svfiprintf_r>
 80041fc:	2200      	movs	r2, #0
 80041fe:	9b02      	ldr	r3, [sp, #8]
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	b01c      	add	sp, #112	; 0x70
 8004204:	f85d eb04 	ldr.w	lr, [sp], #4
 8004208:	b003      	add	sp, #12
 800420a:	4770      	bx	lr
 800420c:	20000030 	.word	0x20000030
 8004210:	ffff0208 	.word	0xffff0208

08004214 <__ssputs_r>:
 8004214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	688e      	ldr	r6, [r1, #8]
 800421a:	4682      	mov	sl, r0
 800421c:	429e      	cmp	r6, r3
 800421e:	460c      	mov	r4, r1
 8004220:	4690      	mov	r8, r2
 8004222:	461f      	mov	r7, r3
 8004224:	d838      	bhi.n	8004298 <__ssputs_r+0x84>
 8004226:	898a      	ldrh	r2, [r1, #12]
 8004228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800422c:	d032      	beq.n	8004294 <__ssputs_r+0x80>
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	6909      	ldr	r1, [r1, #16]
 8004232:	3301      	adds	r3, #1
 8004234:	eba5 0901 	sub.w	r9, r5, r1
 8004238:	6965      	ldr	r5, [r4, #20]
 800423a:	444b      	add	r3, r9
 800423c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004244:	106d      	asrs	r5, r5, #1
 8004246:	429d      	cmp	r5, r3
 8004248:	bf38      	it	cc
 800424a:	461d      	movcc	r5, r3
 800424c:	0553      	lsls	r3, r2, #21
 800424e:	d531      	bpl.n	80042b4 <__ssputs_r+0xa0>
 8004250:	4629      	mov	r1, r5
 8004252:	f000 fb53 	bl	80048fc <_malloc_r>
 8004256:	4606      	mov	r6, r0
 8004258:	b950      	cbnz	r0, 8004270 <__ssputs_r+0x5c>
 800425a:	230c      	movs	r3, #12
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	f8ca 3000 	str.w	r3, [sl]
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004270:	464a      	mov	r2, r9
 8004272:	6921      	ldr	r1, [r4, #16]
 8004274:	f000 face 	bl	8004814 <memcpy>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	6126      	str	r6, [r4, #16]
 8004286:	444e      	add	r6, r9
 8004288:	6026      	str	r6, [r4, #0]
 800428a:	463e      	mov	r6, r7
 800428c:	6165      	str	r5, [r4, #20]
 800428e:	eba5 0509 	sub.w	r5, r5, r9
 8004292:	60a5      	str	r5, [r4, #8]
 8004294:	42be      	cmp	r6, r7
 8004296:	d900      	bls.n	800429a <__ssputs_r+0x86>
 8004298:	463e      	mov	r6, r7
 800429a:	4632      	mov	r2, r6
 800429c:	4641      	mov	r1, r8
 800429e:	6820      	ldr	r0, [r4, #0]
 80042a0:	f000 fac6 	bl	8004830 <memmove>
 80042a4:	68a3      	ldr	r3, [r4, #8]
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	1b9b      	subs	r3, r3, r6
 80042aa:	4432      	add	r2, r6
 80042ac:	2000      	movs	r0, #0
 80042ae:	60a3      	str	r3, [r4, #8]
 80042b0:	6022      	str	r2, [r4, #0]
 80042b2:	e7db      	b.n	800426c <__ssputs_r+0x58>
 80042b4:	462a      	mov	r2, r5
 80042b6:	f000 fb7b 	bl	80049b0 <_realloc_r>
 80042ba:	4606      	mov	r6, r0
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1e1      	bne.n	8004284 <__ssputs_r+0x70>
 80042c0:	4650      	mov	r0, sl
 80042c2:	6921      	ldr	r1, [r4, #16]
 80042c4:	f000 face 	bl	8004864 <_free_r>
 80042c8:	e7c7      	b.n	800425a <__ssputs_r+0x46>
	...

080042cc <_svfiprintf_r>:
 80042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	4698      	mov	r8, r3
 80042d2:	898b      	ldrh	r3, [r1, #12]
 80042d4:	4607      	mov	r7, r0
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	460d      	mov	r5, r1
 80042da:	4614      	mov	r4, r2
 80042dc:	b09d      	sub	sp, #116	; 0x74
 80042de:	d50e      	bpl.n	80042fe <_svfiprintf_r+0x32>
 80042e0:	690b      	ldr	r3, [r1, #16]
 80042e2:	b963      	cbnz	r3, 80042fe <_svfiprintf_r+0x32>
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	f000 fb09 	bl	80048fc <_malloc_r>
 80042ea:	6028      	str	r0, [r5, #0]
 80042ec:	6128      	str	r0, [r5, #16]
 80042ee:	b920      	cbnz	r0, 80042fa <_svfiprintf_r+0x2e>
 80042f0:	230c      	movs	r3, #12
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	e0d1      	b.n	800449e <_svfiprintf_r+0x1d2>
 80042fa:	2340      	movs	r3, #64	; 0x40
 80042fc:	616b      	str	r3, [r5, #20]
 80042fe:	2300      	movs	r3, #0
 8004300:	9309      	str	r3, [sp, #36]	; 0x24
 8004302:	2320      	movs	r3, #32
 8004304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004308:	2330      	movs	r3, #48	; 0x30
 800430a:	f04f 0901 	mov.w	r9, #1
 800430e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004312:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044b8 <_svfiprintf_r+0x1ec>
 8004316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800431a:	4623      	mov	r3, r4
 800431c:	469a      	mov	sl, r3
 800431e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004322:	b10a      	cbz	r2, 8004328 <_svfiprintf_r+0x5c>
 8004324:	2a25      	cmp	r2, #37	; 0x25
 8004326:	d1f9      	bne.n	800431c <_svfiprintf_r+0x50>
 8004328:	ebba 0b04 	subs.w	fp, sl, r4
 800432c:	d00b      	beq.n	8004346 <_svfiprintf_r+0x7a>
 800432e:	465b      	mov	r3, fp
 8004330:	4622      	mov	r2, r4
 8004332:	4629      	mov	r1, r5
 8004334:	4638      	mov	r0, r7
 8004336:	f7ff ff6d 	bl	8004214 <__ssputs_r>
 800433a:	3001      	adds	r0, #1
 800433c:	f000 80aa 	beq.w	8004494 <_svfiprintf_r+0x1c8>
 8004340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004342:	445a      	add	r2, fp
 8004344:	9209      	str	r2, [sp, #36]	; 0x24
 8004346:	f89a 3000 	ldrb.w	r3, [sl]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a2 	beq.w	8004494 <_svfiprintf_r+0x1c8>
 8004350:	2300      	movs	r3, #0
 8004352:	f04f 32ff 	mov.w	r2, #4294967295
 8004356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800435a:	f10a 0a01 	add.w	sl, sl, #1
 800435e:	9304      	str	r3, [sp, #16]
 8004360:	9307      	str	r3, [sp, #28]
 8004362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004366:	931a      	str	r3, [sp, #104]	; 0x68
 8004368:	4654      	mov	r4, sl
 800436a:	2205      	movs	r2, #5
 800436c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004370:	4851      	ldr	r0, [pc, #324]	; (80044b8 <_svfiprintf_r+0x1ec>)
 8004372:	f000 fa41 	bl	80047f8 <memchr>
 8004376:	9a04      	ldr	r2, [sp, #16]
 8004378:	b9d8      	cbnz	r0, 80043b2 <_svfiprintf_r+0xe6>
 800437a:	06d0      	lsls	r0, r2, #27
 800437c:	bf44      	itt	mi
 800437e:	2320      	movmi	r3, #32
 8004380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004384:	0711      	lsls	r1, r2, #28
 8004386:	bf44      	itt	mi
 8004388:	232b      	movmi	r3, #43	; 0x2b
 800438a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800438e:	f89a 3000 	ldrb.w	r3, [sl]
 8004392:	2b2a      	cmp	r3, #42	; 0x2a
 8004394:	d015      	beq.n	80043c2 <_svfiprintf_r+0xf6>
 8004396:	4654      	mov	r4, sl
 8004398:	2000      	movs	r0, #0
 800439a:	f04f 0c0a 	mov.w	ip, #10
 800439e:	9a07      	ldr	r2, [sp, #28]
 80043a0:	4621      	mov	r1, r4
 80043a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043a6:	3b30      	subs	r3, #48	; 0x30
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	d94e      	bls.n	800444a <_svfiprintf_r+0x17e>
 80043ac:	b1b0      	cbz	r0, 80043dc <_svfiprintf_r+0x110>
 80043ae:	9207      	str	r2, [sp, #28]
 80043b0:	e014      	b.n	80043dc <_svfiprintf_r+0x110>
 80043b2:	eba0 0308 	sub.w	r3, r0, r8
 80043b6:	fa09 f303 	lsl.w	r3, r9, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	46a2      	mov	sl, r4
 80043be:	9304      	str	r3, [sp, #16]
 80043c0:	e7d2      	b.n	8004368 <_svfiprintf_r+0x9c>
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	1d19      	adds	r1, r3, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	9103      	str	r1, [sp, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bfbb      	ittet	lt
 80043ce:	425b      	neglt	r3, r3
 80043d0:	f042 0202 	orrlt.w	r2, r2, #2
 80043d4:	9307      	strge	r3, [sp, #28]
 80043d6:	9307      	strlt	r3, [sp, #28]
 80043d8:	bfb8      	it	lt
 80043da:	9204      	strlt	r2, [sp, #16]
 80043dc:	7823      	ldrb	r3, [r4, #0]
 80043de:	2b2e      	cmp	r3, #46	; 0x2e
 80043e0:	d10c      	bne.n	80043fc <_svfiprintf_r+0x130>
 80043e2:	7863      	ldrb	r3, [r4, #1]
 80043e4:	2b2a      	cmp	r3, #42	; 0x2a
 80043e6:	d135      	bne.n	8004454 <_svfiprintf_r+0x188>
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	3402      	adds	r4, #2
 80043ec:	1d1a      	adds	r2, r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	9203      	str	r2, [sp, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bfb8      	it	lt
 80043f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80043fa:	9305      	str	r3, [sp, #20]
 80043fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044c8 <_svfiprintf_r+0x1fc>
 8004400:	2203      	movs	r2, #3
 8004402:	4650      	mov	r0, sl
 8004404:	7821      	ldrb	r1, [r4, #0]
 8004406:	f000 f9f7 	bl	80047f8 <memchr>
 800440a:	b140      	cbz	r0, 800441e <_svfiprintf_r+0x152>
 800440c:	2340      	movs	r3, #64	; 0x40
 800440e:	eba0 000a 	sub.w	r0, r0, sl
 8004412:	fa03 f000 	lsl.w	r0, r3, r0
 8004416:	9b04      	ldr	r3, [sp, #16]
 8004418:	3401      	adds	r4, #1
 800441a:	4303      	orrs	r3, r0
 800441c:	9304      	str	r3, [sp, #16]
 800441e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004422:	2206      	movs	r2, #6
 8004424:	4825      	ldr	r0, [pc, #148]	; (80044bc <_svfiprintf_r+0x1f0>)
 8004426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800442a:	f000 f9e5 	bl	80047f8 <memchr>
 800442e:	2800      	cmp	r0, #0
 8004430:	d038      	beq.n	80044a4 <_svfiprintf_r+0x1d8>
 8004432:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <_svfiprintf_r+0x1f4>)
 8004434:	bb1b      	cbnz	r3, 800447e <_svfiprintf_r+0x1b2>
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	3307      	adds	r3, #7
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	3308      	adds	r3, #8
 8004440:	9303      	str	r3, [sp, #12]
 8004442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004444:	4433      	add	r3, r6
 8004446:	9309      	str	r3, [sp, #36]	; 0x24
 8004448:	e767      	b.n	800431a <_svfiprintf_r+0x4e>
 800444a:	460c      	mov	r4, r1
 800444c:	2001      	movs	r0, #1
 800444e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004452:	e7a5      	b.n	80043a0 <_svfiprintf_r+0xd4>
 8004454:	2300      	movs	r3, #0
 8004456:	f04f 0c0a 	mov.w	ip, #10
 800445a:	4619      	mov	r1, r3
 800445c:	3401      	adds	r4, #1
 800445e:	9305      	str	r3, [sp, #20]
 8004460:	4620      	mov	r0, r4
 8004462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004466:	3a30      	subs	r2, #48	; 0x30
 8004468:	2a09      	cmp	r2, #9
 800446a:	d903      	bls.n	8004474 <_svfiprintf_r+0x1a8>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0c5      	beq.n	80043fc <_svfiprintf_r+0x130>
 8004470:	9105      	str	r1, [sp, #20]
 8004472:	e7c3      	b.n	80043fc <_svfiprintf_r+0x130>
 8004474:	4604      	mov	r4, r0
 8004476:	2301      	movs	r3, #1
 8004478:	fb0c 2101 	mla	r1, ip, r1, r2
 800447c:	e7f0      	b.n	8004460 <_svfiprintf_r+0x194>
 800447e:	ab03      	add	r3, sp, #12
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	462a      	mov	r2, r5
 8004484:	4638      	mov	r0, r7
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <_svfiprintf_r+0x1f8>)
 8004488:	a904      	add	r1, sp, #16
 800448a:	f3af 8000 	nop.w
 800448e:	1c42      	adds	r2, r0, #1
 8004490:	4606      	mov	r6, r0
 8004492:	d1d6      	bne.n	8004442 <_svfiprintf_r+0x176>
 8004494:	89ab      	ldrh	r3, [r5, #12]
 8004496:	065b      	lsls	r3, r3, #25
 8004498:	f53f af2c 	bmi.w	80042f4 <_svfiprintf_r+0x28>
 800449c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800449e:	b01d      	add	sp, #116	; 0x74
 80044a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a4:	ab03      	add	r3, sp, #12
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	462a      	mov	r2, r5
 80044aa:	4638      	mov	r0, r7
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_svfiprintf_r+0x1f8>)
 80044ae:	a904      	add	r1, sp, #16
 80044b0:	f000 f87c 	bl	80045ac <_printf_i>
 80044b4:	e7eb      	b.n	800448e <_svfiprintf_r+0x1c2>
 80044b6:	bf00      	nop
 80044b8:	08004ac0 	.word	0x08004ac0
 80044bc:	08004aca 	.word	0x08004aca
 80044c0:	00000000 	.word	0x00000000
 80044c4:	08004215 	.word	0x08004215
 80044c8:	08004ac6 	.word	0x08004ac6

080044cc <_printf_common>:
 80044cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	4616      	mov	r6, r2
 80044d2:	4699      	mov	r9, r3
 80044d4:	688a      	ldr	r2, [r1, #8]
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	4607      	mov	r7, r0
 80044da:	4293      	cmp	r3, r2
 80044dc:	bfb8      	it	lt
 80044de:	4613      	movlt	r3, r2
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e6:	460c      	mov	r4, r1
 80044e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ec:	b10a      	cbz	r2, 80044f2 <_printf_common+0x26>
 80044ee:	3301      	adds	r3, #1
 80044f0:	6033      	str	r3, [r6, #0]
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	0699      	lsls	r1, r3, #26
 80044f6:	bf42      	ittt	mi
 80044f8:	6833      	ldrmi	r3, [r6, #0]
 80044fa:	3302      	addmi	r3, #2
 80044fc:	6033      	strmi	r3, [r6, #0]
 80044fe:	6825      	ldr	r5, [r4, #0]
 8004500:	f015 0506 	ands.w	r5, r5, #6
 8004504:	d106      	bne.n	8004514 <_printf_common+0x48>
 8004506:	f104 0a19 	add.w	sl, r4, #25
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	6832      	ldr	r2, [r6, #0]
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	42ab      	cmp	r3, r5
 8004512:	dc28      	bgt.n	8004566 <_printf_common+0x9a>
 8004514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004518:	1e13      	subs	r3, r2, #0
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	bf18      	it	ne
 800451e:	2301      	movne	r3, #1
 8004520:	0692      	lsls	r2, r2, #26
 8004522:	d42d      	bmi.n	8004580 <_printf_common+0xb4>
 8004524:	4649      	mov	r1, r9
 8004526:	4638      	mov	r0, r7
 8004528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800452c:	47c0      	blx	r8
 800452e:	3001      	adds	r0, #1
 8004530:	d020      	beq.n	8004574 <_printf_common+0xa8>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	68e5      	ldr	r5, [r4, #12]
 8004536:	f003 0306 	and.w	r3, r3, #6
 800453a:	2b04      	cmp	r3, #4
 800453c:	bf18      	it	ne
 800453e:	2500      	movne	r5, #0
 8004540:	6832      	ldr	r2, [r6, #0]
 8004542:	f04f 0600 	mov.w	r6, #0
 8004546:	68a3      	ldr	r3, [r4, #8]
 8004548:	bf08      	it	eq
 800454a:	1aad      	subeq	r5, r5, r2
 800454c:	6922      	ldr	r2, [r4, #16]
 800454e:	bf08      	it	eq
 8004550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004554:	4293      	cmp	r3, r2
 8004556:	bfc4      	itt	gt
 8004558:	1a9b      	subgt	r3, r3, r2
 800455a:	18ed      	addgt	r5, r5, r3
 800455c:	341a      	adds	r4, #26
 800455e:	42b5      	cmp	r5, r6
 8004560:	d11a      	bne.n	8004598 <_printf_common+0xcc>
 8004562:	2000      	movs	r0, #0
 8004564:	e008      	b.n	8004578 <_printf_common+0xac>
 8004566:	2301      	movs	r3, #1
 8004568:	4652      	mov	r2, sl
 800456a:	4649      	mov	r1, r9
 800456c:	4638      	mov	r0, r7
 800456e:	47c0      	blx	r8
 8004570:	3001      	adds	r0, #1
 8004572:	d103      	bne.n	800457c <_printf_common+0xb0>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	3501      	adds	r5, #1
 800457e:	e7c4      	b.n	800450a <_printf_common+0x3e>
 8004580:	2030      	movs	r0, #48	; 0x30
 8004582:	18e1      	adds	r1, r4, r3
 8004584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800458e:	4422      	add	r2, r4
 8004590:	3302      	adds	r3, #2
 8004592:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004596:	e7c5      	b.n	8004524 <_printf_common+0x58>
 8004598:	2301      	movs	r3, #1
 800459a:	4622      	mov	r2, r4
 800459c:	4649      	mov	r1, r9
 800459e:	4638      	mov	r0, r7
 80045a0:	47c0      	blx	r8
 80045a2:	3001      	adds	r0, #1
 80045a4:	d0e6      	beq.n	8004574 <_printf_common+0xa8>
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7d9      	b.n	800455e <_printf_common+0x92>
	...

080045ac <_printf_i>:
 80045ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	460c      	mov	r4, r1
 80045b2:	7e27      	ldrb	r7, [r4, #24]
 80045b4:	4691      	mov	r9, r2
 80045b6:	2f78      	cmp	r7, #120	; 0x78
 80045b8:	4680      	mov	r8, r0
 80045ba:	469a      	mov	sl, r3
 80045bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c2:	d807      	bhi.n	80045d4 <_printf_i+0x28>
 80045c4:	2f62      	cmp	r7, #98	; 0x62
 80045c6:	d80a      	bhi.n	80045de <_printf_i+0x32>
 80045c8:	2f00      	cmp	r7, #0
 80045ca:	f000 80d9 	beq.w	8004780 <_printf_i+0x1d4>
 80045ce:	2f58      	cmp	r7, #88	; 0x58
 80045d0:	f000 80a4 	beq.w	800471c <_printf_i+0x170>
 80045d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045dc:	e03a      	b.n	8004654 <_printf_i+0xa8>
 80045de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045e2:	2b15      	cmp	r3, #21
 80045e4:	d8f6      	bhi.n	80045d4 <_printf_i+0x28>
 80045e6:	a001      	add	r0, pc, #4	; (adr r0, 80045ec <_printf_i+0x40>)
 80045e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004659 	.word	0x08004659
 80045f4:	080045d5 	.word	0x080045d5
 80045f8:	080045d5 	.word	0x080045d5
 80045fc:	080045d5 	.word	0x080045d5
 8004600:	080045d5 	.word	0x080045d5
 8004604:	08004659 	.word	0x08004659
 8004608:	080045d5 	.word	0x080045d5
 800460c:	080045d5 	.word	0x080045d5
 8004610:	080045d5 	.word	0x080045d5
 8004614:	080045d5 	.word	0x080045d5
 8004618:	08004767 	.word	0x08004767
 800461c:	08004689 	.word	0x08004689
 8004620:	08004749 	.word	0x08004749
 8004624:	080045d5 	.word	0x080045d5
 8004628:	080045d5 	.word	0x080045d5
 800462c:	08004789 	.word	0x08004789
 8004630:	080045d5 	.word	0x080045d5
 8004634:	08004689 	.word	0x08004689
 8004638:	080045d5 	.word	0x080045d5
 800463c:	080045d5 	.word	0x080045d5
 8004640:	08004751 	.word	0x08004751
 8004644:	680b      	ldr	r3, [r1, #0]
 8004646:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800464a:	1d1a      	adds	r2, r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	600a      	str	r2, [r1, #0]
 8004650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004654:	2301      	movs	r3, #1
 8004656:	e0a4      	b.n	80047a2 <_printf_i+0x1f6>
 8004658:	6825      	ldr	r5, [r4, #0]
 800465a:	6808      	ldr	r0, [r1, #0]
 800465c:	062e      	lsls	r6, r5, #24
 800465e:	f100 0304 	add.w	r3, r0, #4
 8004662:	d50a      	bpl.n	800467a <_printf_i+0xce>
 8004664:	6805      	ldr	r5, [r0, #0]
 8004666:	600b      	str	r3, [r1, #0]
 8004668:	2d00      	cmp	r5, #0
 800466a:	da03      	bge.n	8004674 <_printf_i+0xc8>
 800466c:	232d      	movs	r3, #45	; 0x2d
 800466e:	426d      	negs	r5, r5
 8004670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004674:	230a      	movs	r3, #10
 8004676:	485e      	ldr	r0, [pc, #376]	; (80047f0 <_printf_i+0x244>)
 8004678:	e019      	b.n	80046ae <_printf_i+0x102>
 800467a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800467e:	6805      	ldr	r5, [r0, #0]
 8004680:	600b      	str	r3, [r1, #0]
 8004682:	bf18      	it	ne
 8004684:	b22d      	sxthne	r5, r5
 8004686:	e7ef      	b.n	8004668 <_printf_i+0xbc>
 8004688:	680b      	ldr	r3, [r1, #0]
 800468a:	6825      	ldr	r5, [r4, #0]
 800468c:	1d18      	adds	r0, r3, #4
 800468e:	6008      	str	r0, [r1, #0]
 8004690:	0628      	lsls	r0, r5, #24
 8004692:	d501      	bpl.n	8004698 <_printf_i+0xec>
 8004694:	681d      	ldr	r5, [r3, #0]
 8004696:	e002      	b.n	800469e <_printf_i+0xf2>
 8004698:	0669      	lsls	r1, r5, #25
 800469a:	d5fb      	bpl.n	8004694 <_printf_i+0xe8>
 800469c:	881d      	ldrh	r5, [r3, #0]
 800469e:	2f6f      	cmp	r7, #111	; 0x6f
 80046a0:	bf0c      	ite	eq
 80046a2:	2308      	moveq	r3, #8
 80046a4:	230a      	movne	r3, #10
 80046a6:	4852      	ldr	r0, [pc, #328]	; (80047f0 <_printf_i+0x244>)
 80046a8:	2100      	movs	r1, #0
 80046aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ae:	6866      	ldr	r6, [r4, #4]
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	bfa8      	it	ge
 80046b4:	6821      	ldrge	r1, [r4, #0]
 80046b6:	60a6      	str	r6, [r4, #8]
 80046b8:	bfa4      	itt	ge
 80046ba:	f021 0104 	bicge.w	r1, r1, #4
 80046be:	6021      	strge	r1, [r4, #0]
 80046c0:	b90d      	cbnz	r5, 80046c6 <_printf_i+0x11a>
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	d04d      	beq.n	8004762 <_printf_i+0x1b6>
 80046c6:	4616      	mov	r6, r2
 80046c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80046cc:	fb03 5711 	mls	r7, r3, r1, r5
 80046d0:	5dc7      	ldrb	r7, [r0, r7]
 80046d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046d6:	462f      	mov	r7, r5
 80046d8:	42bb      	cmp	r3, r7
 80046da:	460d      	mov	r5, r1
 80046dc:	d9f4      	bls.n	80046c8 <_printf_i+0x11c>
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d10b      	bne.n	80046fa <_printf_i+0x14e>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	07df      	lsls	r7, r3, #31
 80046e6:	d508      	bpl.n	80046fa <_printf_i+0x14e>
 80046e8:	6923      	ldr	r3, [r4, #16]
 80046ea:	6861      	ldr	r1, [r4, #4]
 80046ec:	4299      	cmp	r1, r3
 80046ee:	bfde      	ittt	le
 80046f0:	2330      	movle	r3, #48	; 0x30
 80046f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046fa:	1b92      	subs	r2, r2, r6
 80046fc:	6122      	str	r2, [r4, #16]
 80046fe:	464b      	mov	r3, r9
 8004700:	4621      	mov	r1, r4
 8004702:	4640      	mov	r0, r8
 8004704:	f8cd a000 	str.w	sl, [sp]
 8004708:	aa03      	add	r2, sp, #12
 800470a:	f7ff fedf 	bl	80044cc <_printf_common>
 800470e:	3001      	adds	r0, #1
 8004710:	d14c      	bne.n	80047ac <_printf_i+0x200>
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	b004      	add	sp, #16
 8004718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471c:	4834      	ldr	r0, [pc, #208]	; (80047f0 <_printf_i+0x244>)
 800471e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004722:	680e      	ldr	r6, [r1, #0]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	f856 5b04 	ldr.w	r5, [r6], #4
 800472a:	061f      	lsls	r7, r3, #24
 800472c:	600e      	str	r6, [r1, #0]
 800472e:	d514      	bpl.n	800475a <_printf_i+0x1ae>
 8004730:	07d9      	lsls	r1, r3, #31
 8004732:	bf44      	itt	mi
 8004734:	f043 0320 	orrmi.w	r3, r3, #32
 8004738:	6023      	strmi	r3, [r4, #0]
 800473a:	b91d      	cbnz	r5, 8004744 <_printf_i+0x198>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	f023 0320 	bic.w	r3, r3, #32
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	2310      	movs	r3, #16
 8004746:	e7af      	b.n	80046a8 <_printf_i+0xfc>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	f043 0320 	orr.w	r3, r3, #32
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	2378      	movs	r3, #120	; 0x78
 8004752:	4828      	ldr	r0, [pc, #160]	; (80047f4 <_printf_i+0x248>)
 8004754:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004758:	e7e3      	b.n	8004722 <_printf_i+0x176>
 800475a:	065e      	lsls	r6, r3, #25
 800475c:	bf48      	it	mi
 800475e:	b2ad      	uxthmi	r5, r5
 8004760:	e7e6      	b.n	8004730 <_printf_i+0x184>
 8004762:	4616      	mov	r6, r2
 8004764:	e7bb      	b.n	80046de <_printf_i+0x132>
 8004766:	680b      	ldr	r3, [r1, #0]
 8004768:	6826      	ldr	r6, [r4, #0]
 800476a:	1d1d      	adds	r5, r3, #4
 800476c:	6960      	ldr	r0, [r4, #20]
 800476e:	600d      	str	r5, [r1, #0]
 8004770:	0635      	lsls	r5, r6, #24
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	d501      	bpl.n	800477a <_printf_i+0x1ce>
 8004776:	6018      	str	r0, [r3, #0]
 8004778:	e002      	b.n	8004780 <_printf_i+0x1d4>
 800477a:	0671      	lsls	r1, r6, #25
 800477c:	d5fb      	bpl.n	8004776 <_printf_i+0x1ca>
 800477e:	8018      	strh	r0, [r3, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	4616      	mov	r6, r2
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	e7ba      	b.n	80046fe <_printf_i+0x152>
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	600a      	str	r2, [r1, #0]
 800478e:	681e      	ldr	r6, [r3, #0]
 8004790:	2100      	movs	r1, #0
 8004792:	4630      	mov	r0, r6
 8004794:	6862      	ldr	r2, [r4, #4]
 8004796:	f000 f82f 	bl	80047f8 <memchr>
 800479a:	b108      	cbz	r0, 80047a0 <_printf_i+0x1f4>
 800479c:	1b80      	subs	r0, r0, r6
 800479e:	6060      	str	r0, [r4, #4]
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	2300      	movs	r3, #0
 80047a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047aa:	e7a8      	b.n	80046fe <_printf_i+0x152>
 80047ac:	4632      	mov	r2, r6
 80047ae:	4649      	mov	r1, r9
 80047b0:	4640      	mov	r0, r8
 80047b2:	6923      	ldr	r3, [r4, #16]
 80047b4:	47d0      	blx	sl
 80047b6:	3001      	adds	r0, #1
 80047b8:	d0ab      	beq.n	8004712 <_printf_i+0x166>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	079b      	lsls	r3, r3, #30
 80047be:	d413      	bmi.n	80047e8 <_printf_i+0x23c>
 80047c0:	68e0      	ldr	r0, [r4, #12]
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	4298      	cmp	r0, r3
 80047c6:	bfb8      	it	lt
 80047c8:	4618      	movlt	r0, r3
 80047ca:	e7a4      	b.n	8004716 <_printf_i+0x16a>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4632      	mov	r2, r6
 80047d0:	4649      	mov	r1, r9
 80047d2:	4640      	mov	r0, r8
 80047d4:	47d0      	blx	sl
 80047d6:	3001      	adds	r0, #1
 80047d8:	d09b      	beq.n	8004712 <_printf_i+0x166>
 80047da:	3501      	adds	r5, #1
 80047dc:	68e3      	ldr	r3, [r4, #12]
 80047de:	9903      	ldr	r1, [sp, #12]
 80047e0:	1a5b      	subs	r3, r3, r1
 80047e2:	42ab      	cmp	r3, r5
 80047e4:	dcf2      	bgt.n	80047cc <_printf_i+0x220>
 80047e6:	e7eb      	b.n	80047c0 <_printf_i+0x214>
 80047e8:	2500      	movs	r5, #0
 80047ea:	f104 0619 	add.w	r6, r4, #25
 80047ee:	e7f5      	b.n	80047dc <_printf_i+0x230>
 80047f0:	08004ad1 	.word	0x08004ad1
 80047f4:	08004ae2 	.word	0x08004ae2

080047f8 <memchr>:
 80047f8:	4603      	mov	r3, r0
 80047fa:	b510      	push	{r4, lr}
 80047fc:	b2c9      	uxtb	r1, r1
 80047fe:	4402      	add	r2, r0
 8004800:	4293      	cmp	r3, r2
 8004802:	4618      	mov	r0, r3
 8004804:	d101      	bne.n	800480a <memchr+0x12>
 8004806:	2000      	movs	r0, #0
 8004808:	e003      	b.n	8004812 <memchr+0x1a>
 800480a:	7804      	ldrb	r4, [r0, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	428c      	cmp	r4, r1
 8004810:	d1f6      	bne.n	8004800 <memchr+0x8>
 8004812:	bd10      	pop	{r4, pc}

08004814 <memcpy>:
 8004814:	440a      	add	r2, r1
 8004816:	4291      	cmp	r1, r2
 8004818:	f100 33ff 	add.w	r3, r0, #4294967295
 800481c:	d100      	bne.n	8004820 <memcpy+0xc>
 800481e:	4770      	bx	lr
 8004820:	b510      	push	{r4, lr}
 8004822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004826:	4291      	cmp	r1, r2
 8004828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800482c:	d1f9      	bne.n	8004822 <memcpy+0xe>
 800482e:	bd10      	pop	{r4, pc}

08004830 <memmove>:
 8004830:	4288      	cmp	r0, r1
 8004832:	b510      	push	{r4, lr}
 8004834:	eb01 0402 	add.w	r4, r1, r2
 8004838:	d902      	bls.n	8004840 <memmove+0x10>
 800483a:	4284      	cmp	r4, r0
 800483c:	4623      	mov	r3, r4
 800483e:	d807      	bhi.n	8004850 <memmove+0x20>
 8004840:	1e43      	subs	r3, r0, #1
 8004842:	42a1      	cmp	r1, r4
 8004844:	d008      	beq.n	8004858 <memmove+0x28>
 8004846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800484a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800484e:	e7f8      	b.n	8004842 <memmove+0x12>
 8004850:	4601      	mov	r1, r0
 8004852:	4402      	add	r2, r0
 8004854:	428a      	cmp	r2, r1
 8004856:	d100      	bne.n	800485a <memmove+0x2a>
 8004858:	bd10      	pop	{r4, pc}
 800485a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800485e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004862:	e7f7      	b.n	8004854 <memmove+0x24>

08004864 <_free_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4605      	mov	r5, r0
 8004868:	2900      	cmp	r1, #0
 800486a:	d043      	beq.n	80048f4 <_free_r+0x90>
 800486c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004870:	1f0c      	subs	r4, r1, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	bfb8      	it	lt
 8004876:	18e4      	addlt	r4, r4, r3
 8004878:	f000 f8d0 	bl	8004a1c <__malloc_lock>
 800487c:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <_free_r+0x94>)
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	4610      	mov	r0, r2
 8004882:	b933      	cbnz	r3, 8004892 <_free_r+0x2e>
 8004884:	6063      	str	r3, [r4, #4]
 8004886:	6014      	str	r4, [r2, #0]
 8004888:	4628      	mov	r0, r5
 800488a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800488e:	f000 b8cb 	b.w	8004a28 <__malloc_unlock>
 8004892:	42a3      	cmp	r3, r4
 8004894:	d90a      	bls.n	80048ac <_free_r+0x48>
 8004896:	6821      	ldr	r1, [r4, #0]
 8004898:	1862      	adds	r2, r4, r1
 800489a:	4293      	cmp	r3, r2
 800489c:	bf01      	itttt	eq
 800489e:	681a      	ldreq	r2, [r3, #0]
 80048a0:	685b      	ldreq	r3, [r3, #4]
 80048a2:	1852      	addeq	r2, r2, r1
 80048a4:	6022      	streq	r2, [r4, #0]
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	6004      	str	r4, [r0, #0]
 80048aa:	e7ed      	b.n	8004888 <_free_r+0x24>
 80048ac:	461a      	mov	r2, r3
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	b10b      	cbz	r3, 80048b6 <_free_r+0x52>
 80048b2:	42a3      	cmp	r3, r4
 80048b4:	d9fa      	bls.n	80048ac <_free_r+0x48>
 80048b6:	6811      	ldr	r1, [r2, #0]
 80048b8:	1850      	adds	r0, r2, r1
 80048ba:	42a0      	cmp	r0, r4
 80048bc:	d10b      	bne.n	80048d6 <_free_r+0x72>
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	4401      	add	r1, r0
 80048c2:	1850      	adds	r0, r2, r1
 80048c4:	4283      	cmp	r3, r0
 80048c6:	6011      	str	r1, [r2, #0]
 80048c8:	d1de      	bne.n	8004888 <_free_r+0x24>
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4401      	add	r1, r0
 80048d0:	6011      	str	r1, [r2, #0]
 80048d2:	6053      	str	r3, [r2, #4]
 80048d4:	e7d8      	b.n	8004888 <_free_r+0x24>
 80048d6:	d902      	bls.n	80048de <_free_r+0x7a>
 80048d8:	230c      	movs	r3, #12
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	e7d4      	b.n	8004888 <_free_r+0x24>
 80048de:	6820      	ldr	r0, [r4, #0]
 80048e0:	1821      	adds	r1, r4, r0
 80048e2:	428b      	cmp	r3, r1
 80048e4:	bf01      	itttt	eq
 80048e6:	6819      	ldreq	r1, [r3, #0]
 80048e8:	685b      	ldreq	r3, [r3, #4]
 80048ea:	1809      	addeq	r1, r1, r0
 80048ec:	6021      	streq	r1, [r4, #0]
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	6054      	str	r4, [r2, #4]
 80048f2:	e7c9      	b.n	8004888 <_free_r+0x24>
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
 80048f6:	bf00      	nop
 80048f8:	200000d4 	.word	0x200000d4

080048fc <_malloc_r>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	1ccd      	adds	r5, r1, #3
 8004900:	f025 0503 	bic.w	r5, r5, #3
 8004904:	3508      	adds	r5, #8
 8004906:	2d0c      	cmp	r5, #12
 8004908:	bf38      	it	cc
 800490a:	250c      	movcc	r5, #12
 800490c:	2d00      	cmp	r5, #0
 800490e:	4606      	mov	r6, r0
 8004910:	db01      	blt.n	8004916 <_malloc_r+0x1a>
 8004912:	42a9      	cmp	r1, r5
 8004914:	d903      	bls.n	800491e <_malloc_r+0x22>
 8004916:	230c      	movs	r3, #12
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	2000      	movs	r0, #0
 800491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491e:	f000 f87d 	bl	8004a1c <__malloc_lock>
 8004922:	4921      	ldr	r1, [pc, #132]	; (80049a8 <_malloc_r+0xac>)
 8004924:	680a      	ldr	r2, [r1, #0]
 8004926:	4614      	mov	r4, r2
 8004928:	b99c      	cbnz	r4, 8004952 <_malloc_r+0x56>
 800492a:	4f20      	ldr	r7, [pc, #128]	; (80049ac <_malloc_r+0xb0>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b923      	cbnz	r3, 800493a <_malloc_r+0x3e>
 8004930:	4621      	mov	r1, r4
 8004932:	4630      	mov	r0, r6
 8004934:	f000 f862 	bl	80049fc <_sbrk_r>
 8004938:	6038      	str	r0, [r7, #0]
 800493a:	4629      	mov	r1, r5
 800493c:	4630      	mov	r0, r6
 800493e:	f000 f85d 	bl	80049fc <_sbrk_r>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d123      	bne.n	800498e <_malloc_r+0x92>
 8004946:	230c      	movs	r3, #12
 8004948:	4630      	mov	r0, r6
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	f000 f86c 	bl	8004a28 <__malloc_unlock>
 8004950:	e7e3      	b.n	800491a <_malloc_r+0x1e>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	1b5b      	subs	r3, r3, r5
 8004956:	d417      	bmi.n	8004988 <_malloc_r+0x8c>
 8004958:	2b0b      	cmp	r3, #11
 800495a:	d903      	bls.n	8004964 <_malloc_r+0x68>
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	441c      	add	r4, r3
 8004960:	6025      	str	r5, [r4, #0]
 8004962:	e004      	b.n	800496e <_malloc_r+0x72>
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	42a2      	cmp	r2, r4
 8004968:	bf0c      	ite	eq
 800496a:	600b      	streq	r3, [r1, #0]
 800496c:	6053      	strne	r3, [r2, #4]
 800496e:	4630      	mov	r0, r6
 8004970:	f000 f85a 	bl	8004a28 <__malloc_unlock>
 8004974:	f104 000b 	add.w	r0, r4, #11
 8004978:	1d23      	adds	r3, r4, #4
 800497a:	f020 0007 	bic.w	r0, r0, #7
 800497e:	1ac2      	subs	r2, r0, r3
 8004980:	d0cc      	beq.n	800491c <_malloc_r+0x20>
 8004982:	1a1b      	subs	r3, r3, r0
 8004984:	50a3      	str	r3, [r4, r2]
 8004986:	e7c9      	b.n	800491c <_malloc_r+0x20>
 8004988:	4622      	mov	r2, r4
 800498a:	6864      	ldr	r4, [r4, #4]
 800498c:	e7cc      	b.n	8004928 <_malloc_r+0x2c>
 800498e:	1cc4      	adds	r4, r0, #3
 8004990:	f024 0403 	bic.w	r4, r4, #3
 8004994:	42a0      	cmp	r0, r4
 8004996:	d0e3      	beq.n	8004960 <_malloc_r+0x64>
 8004998:	1a21      	subs	r1, r4, r0
 800499a:	4630      	mov	r0, r6
 800499c:	f000 f82e 	bl	80049fc <_sbrk_r>
 80049a0:	3001      	adds	r0, #1
 80049a2:	d1dd      	bne.n	8004960 <_malloc_r+0x64>
 80049a4:	e7cf      	b.n	8004946 <_malloc_r+0x4a>
 80049a6:	bf00      	nop
 80049a8:	200000d4 	.word	0x200000d4
 80049ac:	200000d8 	.word	0x200000d8

080049b0 <_realloc_r>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	4607      	mov	r7, r0
 80049b4:	4614      	mov	r4, r2
 80049b6:	460e      	mov	r6, r1
 80049b8:	b921      	cbnz	r1, 80049c4 <_realloc_r+0x14>
 80049ba:	4611      	mov	r1, r2
 80049bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049c0:	f7ff bf9c 	b.w	80048fc <_malloc_r>
 80049c4:	b922      	cbnz	r2, 80049d0 <_realloc_r+0x20>
 80049c6:	f7ff ff4d 	bl	8004864 <_free_r>
 80049ca:	4625      	mov	r5, r4
 80049cc:	4628      	mov	r0, r5
 80049ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d0:	f000 f830 	bl	8004a34 <_malloc_usable_size_r>
 80049d4:	42a0      	cmp	r0, r4
 80049d6:	d20f      	bcs.n	80049f8 <_realloc_r+0x48>
 80049d8:	4621      	mov	r1, r4
 80049da:	4638      	mov	r0, r7
 80049dc:	f7ff ff8e 	bl	80048fc <_malloc_r>
 80049e0:	4605      	mov	r5, r0
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d0f2      	beq.n	80049cc <_realloc_r+0x1c>
 80049e6:	4631      	mov	r1, r6
 80049e8:	4622      	mov	r2, r4
 80049ea:	f7ff ff13 	bl	8004814 <memcpy>
 80049ee:	4631      	mov	r1, r6
 80049f0:	4638      	mov	r0, r7
 80049f2:	f7ff ff37 	bl	8004864 <_free_r>
 80049f6:	e7e9      	b.n	80049cc <_realloc_r+0x1c>
 80049f8:	4635      	mov	r5, r6
 80049fa:	e7e7      	b.n	80049cc <_realloc_r+0x1c>

080049fc <_sbrk_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	2300      	movs	r3, #0
 8004a00:	4d05      	ldr	r5, [pc, #20]	; (8004a18 <_sbrk_r+0x1c>)
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	f7fc fd66 	bl	80014d8 <_sbrk>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_sbrk_r+0x1a>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_sbrk_r+0x1a>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	20000200 	.word	0x20000200

08004a1c <__malloc_lock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <__malloc_lock+0x8>)
 8004a1e:	f000 b811 	b.w	8004a44 <__retarget_lock_acquire_recursive>
 8004a22:	bf00      	nop
 8004a24:	20000208 	.word	0x20000208

08004a28 <__malloc_unlock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_unlock+0x8>)
 8004a2a:	f000 b80c 	b.w	8004a46 <__retarget_lock_release_recursive>
 8004a2e:	bf00      	nop
 8004a30:	20000208 	.word	0x20000208

08004a34 <_malloc_usable_size_r>:
 8004a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a38:	1f18      	subs	r0, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bfbc      	itt	lt
 8004a3e:	580b      	ldrlt	r3, [r1, r0]
 8004a40:	18c0      	addlt	r0, r0, r3
 8004a42:	4770      	bx	lr

08004a44 <__retarget_lock_acquire_recursive>:
 8004a44:	4770      	bx	lr

08004a46 <__retarget_lock_release_recursive>:
 8004a46:	4770      	bx	lr

08004a48 <_init>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr

08004a54 <_fini>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr
