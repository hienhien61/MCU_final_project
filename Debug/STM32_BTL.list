
STM32_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae0  08004ae0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004ae0  08004ae0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ae0  08004ae0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae4  08004ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000094  08004b7c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004b7c  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b02  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e50  00000000  00000000  00036bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0003a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c1d  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ab0  00000000  00000000  0005500d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2b9  00000000  00000000  00066abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1d76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000f1dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a34 	.word	0x08004a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004a34 	.word	0x08004a34

0800014c <fsmHorLEDsRun>:
#include "LEDs_display.h"

int horizontal_status = MODE_INIT;
int vertical_status = MODE_INIT;

void fsmHorLEDsRun() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// FSM for horizontal LEDs

	switch (horizontal_status) {
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	d847      	bhi.n	80001e8 <fsmHorLEDsRun+0x9c>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsmHorLEDsRun+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000175 	.word	0x08000175
 8000164:	080001e9 	.word	0x080001e9
 8000168:	08000189 	.word	0x08000189
 800016c:	080001a9 	.word	0x080001a9
 8000170:	080001c9 	.word	0x080001c9
		case MODE_INIT:
			horizontal_status = AUTO_RED;
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000176:	2202      	movs	r2, #2
 8000178:	601a      	str	r2, [r3, #0]
			setTimer(0, RED_time);
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <fsmHorLEDsRun+0xb4>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4619      	mov	r1, r3
 8000180:	2000      	movs	r0, #0
 8000182:	f001 fa07 	bl	8001594 <setTimer>
			break;
 8000186:	e036      	b.n	80001f6 <fsmHorLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(0)) {
 8000188:	2000      	movs	r0, #0
 800018a:	f001 f9ef 	bl	800156c <isTimerUp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d02b      	beq.n	80001ec <fsmHorLEDsRun+0xa0>
				horizontal_status = AUTO_GREEN;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000196:	2203      	movs	r2, #3
 8000198:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN_time);
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <fsmHorLEDsRun+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4619      	mov	r1, r3
 80001a0:	2000      	movs	r0, #0
 80001a2:	f001 f9f7 	bl	8001594 <setTimer>
			}
			break;
 80001a6:	e021      	b.n	80001ec <fsmHorLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(0)) {
 80001a8:	2000      	movs	r0, #0
 80001aa:	f001 f9df 	bl	800156c <isTimerUp>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d01d      	beq.n	80001f0 <fsmHorLEDsRun+0xa4>
				horizontal_status = AUTO_YELLOW;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	601a      	str	r2, [r3, #0]
				setTimer(0, YELLOW_time);
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <fsmHorLEDsRun+0xbc>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4619      	mov	r1, r3
 80001c0:	2000      	movs	r0, #0
 80001c2:	f001 f9e7 	bl	8001594 <setTimer>
			}
			break;
 80001c6:	e013      	b.n	80001f0 <fsmHorLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(0)) {
 80001c8:	2000      	movs	r0, #0
 80001ca:	f001 f9cf 	bl	800156c <isTimerUp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00f      	beq.n	80001f4 <fsmHorLEDsRun+0xa8>
				horizontal_status = AUTO_RED;
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	601a      	str	r2, [r3, #0]
				setTimer(0, RED_time);
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fsmHorLEDsRun+0xb4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	2000      	movs	r0, #0
 80001e2:	f001 f9d7 	bl	8001594 <setTimer>
			}
			break;
 80001e6:	e005      	b.n	80001f4 <fsmHorLEDsRun+0xa8>

		default:
			break;
 80001e8:	bf00      	nop
 80001ea:	e004      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001ec:	bf00      	nop
 80001ee:	e002      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f0:	bf00      	nop
 80001f2:	e000      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000b0 	.word	0x200000b0
 8000200:	20000018 	.word	0x20000018
 8000204:	2000001c 	.word	0x2000001c
 8000208:	20000020 	.word	0x20000020

0800020c <fsmVerLEDsRun>:


void fsmVerLEDsRun() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// FSM for vertical LEDs

	switch (vertical_status) {
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d847      	bhi.n	80002a8 <fsmVerLEDsRun+0x9c>
 8000218:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsmVerLEDsRun+0x14>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000235 	.word	0x08000235
 8000224:	080002a9 	.word	0x080002a9
 8000228:	08000249 	.word	0x08000249
 800022c:	08000269 	.word	0x08000269
 8000230:	08000289 	.word	0x08000289
		case MODE_INIT:
			vertical_status = AUTO_GREEN;
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000236:	2203      	movs	r2, #3
 8000238:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN_time);
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2001      	movs	r0, #1
 8000242:	f001 f9a7 	bl	8001594 <setTimer>
			break;
 8000246:	e036      	b.n	80002b6 <fsmVerLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(1)) {
 8000248:	2001      	movs	r0, #1
 800024a:	f001 f98f 	bl	800156c <isTimerUp>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d02b      	beq.n	80002ac <fsmVerLEDsRun+0xa0>
				vertical_status = AUTO_GREEN;
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000256:	2203      	movs	r2, #3
 8000258:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN_time);
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	2001      	movs	r0, #1
 8000262:	f001 f997 	bl	8001594 <setTimer>
			}
			break;
 8000266:	e021      	b.n	80002ac <fsmVerLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(1)) {
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f97f 	bl	800156c <isTimerUp>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <fsmVerLEDsRun+0xa4>
				vertical_status = AUTO_YELLOW;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000276:	2204      	movs	r2, #4
 8000278:	601a      	str	r2, [r3, #0]
				setTimer(1, YELLOW_time);
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <fsmVerLEDsRun+0xb8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4619      	mov	r1, r3
 8000280:	2001      	movs	r0, #1
 8000282:	f001 f987 	bl	8001594 <setTimer>
			}
			break;
 8000286:	e013      	b.n	80002b0 <fsmVerLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(1)) {
 8000288:	2001      	movs	r0, #1
 800028a:	f001 f96f 	bl	800156c <isTimerUp>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <fsmVerLEDsRun+0xa8>
				vertical_status = AUTO_RED;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
				setTimer(1, RED_time);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <fsmVerLEDsRun+0xbc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	2001      	movs	r0, #1
 80002a2:	f001 f977 	bl	8001594 <setTimer>
			}
			break;
 80002a6:	e005      	b.n	80002b4 <fsmVerLEDsRun+0xa8>

		default:
			break;
 80002a8:	bf00      	nop
 80002aa:	e004      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b4:	bf00      	nop
	}
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000b4 	.word	0x200000b4
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	20000020 	.word	0x20000020
 80002c8:	20000018 	.word	0x20000018

080002cc <LEDsDisplay>:

void LEDsDisplay() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Display two ways LEDs

	fsmHorLEDsRun();
 80002d0:	f7ff ff3c 	bl	800014c <fsmHorLEDsRun>
	fsmVerLEDsRun();
 80002d4:	f7ff ff9a 	bl	800020c <fsmVerLEDsRun>

	switch (horizontal_status) {
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <LEDsDisplay+0xcc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d01e      	beq.n	800031e <LEDsDisplay+0x52>
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	dc28      	bgt.n	8000336 <LEDsDisplay+0x6a>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d002      	beq.n	80002ee <LEDsDisplay+0x22>
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d00c      	beq.n	8000306 <LEDsDisplay+0x3a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
			break;

		default:
			break;
 80002ec:	e023      	b.n	8000336 <LEDsDisplay+0x6a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4829      	ldr	r0, [pc, #164]	; (800039c <LEDsDisplay+0xd0>)
 80002f6:	f001 fea6 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4828      	ldr	r0, [pc, #160]	; (80003a0 <LEDsDisplay+0xd4>)
 8000300:	f001 fea1 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000304:	e018      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4823      	ldr	r0, [pc, #140]	; (800039c <LEDsDisplay+0xd0>)
 800030e:	f001 fe9a 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4822      	ldr	r0, [pc, #136]	; (80003a0 <LEDsDisplay+0xd4>)
 8000318:	f001 fe95 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 800031c:	e00c      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <LEDsDisplay+0xd0>)
 8000326:	f001 fe8e 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 800032a:	2201      	movs	r2, #1
 800032c:	2108      	movs	r1, #8
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <LEDsDisplay+0xd4>)
 8000330:	f001 fe89 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000334:	e000      	b.n	8000338 <LEDsDisplay+0x6c>
			break;
 8000336:	bf00      	nop
	}

	switch (vertical_status) {
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <LEDsDisplay+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d01c      	beq.n	800037a <LEDsDisplay+0xae>
 8000340:	2b04      	cmp	r3, #4
 8000342:	dc25      	bgt.n	8000390 <LEDsDisplay+0xc4>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d002      	beq.n	800034e <LEDsDisplay+0x82>
 8000348:	2b03      	cmp	r3, #3
 800034a:	d00b      	beq.n	8000364 <LEDsDisplay+0x98>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
			break;

		default:
			break;
 800034c:	e020      	b.n	8000390 <LEDsDisplay+0xc4>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	4813      	ldr	r0, [pc, #76]	; (80003a0 <LEDsDisplay+0xd4>)
 8000354:	f001 fe77 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <LEDsDisplay+0xd4>)
 800035e:	f001 fe72 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000362:	e016      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LEDsDisplay+0xd4>)
 800036a:	f001 fe6c 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LEDsDisplay+0xd4>)
 8000374:	f001 fe67 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000378:	e00b      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <LEDsDisplay+0xd4>)
 8000380:	f001 fe61 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000384:	2201      	movs	r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LEDsDisplay+0xd4>)
 800038a:	f001 fe5c 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 800038e:	e000      	b.n	8000392 <LEDsDisplay+0xc6>
			break;
 8000390:	bf00      	nop
	}
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000b0 	.word	0x200000b0
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	200000b4 	.word	0x200000b4

080003a8 <isButtonPressed>:
int button_flag[NO_OF_BUTTON];
int button_long_flag[NO_OF_BUTTON];
GPIO_PinState key_reg[NO_OF_BUTTON][4];
int counter_for_key_pressed[NO_OF_BUTTON];

int isButtonPressed(int button) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (button_flag[button]) {
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <isButtonPressed+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d006      	beq.n	80003ca <isButtonPressed+0x22>
		button_flag[button] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <isButtonPressed+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <isButtonPressed+0x24>
	}
	else return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	200000fc 	.word	0x200000fc

080003dc <isButtonLongPressed>:

int isButtonLongPressed(int button) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if (button_long_flag[button]) {
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <isButtonLongPressed+0x30>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <isButtonLongPressed+0x22>
		button_long_flag[button] = 0;
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <isButtonLongPressed+0x30>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2100      	movs	r1, #0
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <isButtonLongPressed+0x24>
	}
	else return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2000010c 	.word	0x2000010c

08000410 <subKeyProcess>:

void subKeyProcess(int button) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <subKeyProcess+0x1c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2101      	movs	r1, #1
 800041e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	200000fc 	.word	0x200000fc

08000430 <subKeyLongProcess>:

void subKeyLongProcess(int button) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	button_long_flag[button] = 1;
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <subKeyLongProcess+0x1c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2101      	movs	r1, #1
 800043e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	2000010c 	.word	0x2000010c

08000450 <resetKey>:

void resetKey(int button) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	button_flag[button] = 0;
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <resetKey+0x28>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_long_flag[button] = 0;
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <resetKey+0x2c>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2100      	movs	r1, #0
 8000468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000fc 	.word	0x200000fc
 800047c:	2000010c 	.word	0x2000010c

08000480 <setKeyTimer>:

void setKeyTimer(int button) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	counter_for_key_pressed[button] = timer_for_key_pressed / timer_cycle;
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <setKeyTimer+0x28>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <setKeyTimer+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	fb92 f2f3 	sdiv	r2, r2, r3
 8000494:	4906      	ldr	r1, [pc, #24]	; (80004b0 <setKeyTimer+0x30>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000014 	.word	0x20000014
 80004ac:	20000010 	.word	0x20000010
 80004b0:	200000dc 	.word	0x200000dc

080004b4 <getKeyInput>:

void getKeyInput() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e0b9      	b.n	8000634 <getKeyInput+0x180>
		key_reg[button][0] = key_reg[button][1];
 80004c0:	4a61      	ldr	r2, [pc, #388]	; (8000648 <getKeyInput+0x194>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	7859      	ldrb	r1, [r3, #1]
 80004ca:	4a5f      	ldr	r2, [pc, #380]	; (8000648 <getKeyInput+0x194>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		key_reg[button][1] = key_reg[button][2];
 80004d2:	4a5d      	ldr	r2, [pc, #372]	; (8000648 <getKeyInput+0x194>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	7899      	ldrb	r1, [r3, #2]
 80004dc:	4a5a      	ldr	r2, [pc, #360]	; (8000648 <getKeyInput+0x194>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	460a      	mov	r2, r1
 80004e6:	705a      	strb	r2, [r3, #1]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d83e      	bhi.n	800056c <getKeyInput+0xb8>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <getKeyInput+0x40>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000505 	.word	0x08000505
 80004f8:	0800051f 	.word	0x0800051f
 80004fc:	08000539 	.word	0x08000539
 8000500:	08000553 	.word	0x08000553
		switch (button) {
			case BUTTON_MODE:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000504:	2102      	movs	r1, #2
 8000506:	4851      	ldr	r0, [pc, #324]	; (800064c <getKeyInput+0x198>)
 8000508:	f001 fd86 	bl	8002018 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	4619      	mov	r1, r3
 8000510:	4a4d      	ldr	r2, [pc, #308]	; (8000648 <getKeyInput+0x194>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	709a      	strb	r2, [r3, #2]
				break;
 800051c:	e027      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_SET:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 800051e:	2110      	movs	r1, #16
 8000520:	484a      	ldr	r0, [pc, #296]	; (800064c <getKeyInput+0x198>)
 8000522:	f001 fd79 	bl	8002018 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	4619      	mov	r1, r3
 800052a:	4a47      	ldr	r2, [pc, #284]	; (8000648 <getKeyInput+0x194>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	460a      	mov	r2, r1
 8000534:	709a      	strb	r2, [r3, #2]
				break;
 8000536:	e01a      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_INC:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_INC_GPIO_Port, BUTTON_INC_Pin);
 8000538:	2101      	movs	r1, #1
 800053a:	4845      	ldr	r0, [pc, #276]	; (8000650 <getKeyInput+0x19c>)
 800053c:	f001 fd6c 	bl	8002018 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	4619      	mov	r1, r3
 8000544:	4a40      	ldr	r2, [pc, #256]	; (8000648 <getKeyInput+0x194>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	460a      	mov	r2, r1
 800054e:	709a      	strb	r2, [r3, #2]
				break;
 8000550:	e00d      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_PED:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_PED_GPIO_Port, BUTTON_PED_Pin);
 8000552:	2101      	movs	r1, #1
 8000554:	483d      	ldr	r0, [pc, #244]	; (800064c <getKeyInput+0x198>)
 8000556:	f001 fd5f 	bl	8002018 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	4619      	mov	r1, r3
 800055e:	4a3a      	ldr	r2, [pc, #232]	; (8000648 <getKeyInput+0x194>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	460a      	mov	r2, r1
 8000568:	709a      	strb	r2, [r3, #2]
				break;
 800056a:	e000      	b.n	800056e <getKeyInput+0xba>
			default:
				break;
 800056c:	bf00      	nop
		}

		if ((key_reg[button][0] == key_reg[button][1]) && (key_reg[button][1] == key_reg[button][2])) {
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <getKeyInput+0x194>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000576:	4934      	ldr	r1, [pc, #208]	; (8000648 <getKeyInput+0x194>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	429a      	cmp	r2, r3
 8000582:	d154      	bne.n	800062e <getKeyInput+0x17a>
 8000584:	4a30      	ldr	r2, [pc, #192]	; (8000648 <getKeyInput+0x194>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	492e      	ldr	r1, [pc, #184]	; (8000648 <getKeyInput+0x194>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	429a      	cmp	r2, r3
 800059a:	d148      	bne.n	800062e <getKeyInput+0x17a>

			// Press button, then release
			if (key_reg[button][3] != key_reg[button][2]) {
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <getKeyInput+0x194>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	78da      	ldrb	r2, [r3, #3]
 80005a6:	4928      	ldr	r1, [pc, #160]	; (8000648 <getKeyInput+0x194>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d01c      	beq.n	80005ee <getKeyInput+0x13a>
				key_reg[button][3] = key_reg[button][2];
 80005b4:	4a24      	ldr	r2, [pc, #144]	; (8000648 <getKeyInput+0x194>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	7899      	ldrb	r1, [r3, #2]
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <getKeyInput+0x194>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	460a      	mov	r2, r1
 80005c8:	70da      	strb	r2, [r3, #3]

				if (key_reg[button][2] == PRESSED_STATE) {
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <getKeyInput+0x194>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <getKeyInput+0x132>
					subKeyProcess(button);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff19 	bl	8000410 <subKeyProcess>
					setKeyTimer(button);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff4e 	bl	8000480 <setKeyTimer>
 80005e4:	e023      	b.n	800062e <getKeyInput+0x17a>
				}
				else resetKey(button);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ff32 	bl	8000450 <resetKey>
 80005ec:	e01f      	b.n	800062e <getKeyInput+0x17a>
			}
			// Press and hold button
			else {
				counter_for_key_pressed[button]--;
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getKeyInput+0x1a0>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <getKeyInput+0x1a0>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!counter_for_key_pressed[button]) {
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <getKeyInput+0x1a0>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <getKeyInput+0x17a>
					if (key_reg[button][2] == PRESSED_STATE) {
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <getKeyInput+0x194>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <getKeyInput+0x16e>
						subKeyLongProcess(button);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff08 	bl	8000430 <subKeyLongProcess>
 8000620:	e002      	b.n	8000628 <getKeyInput+0x174>
					}
					else resetKey(button);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff14 	bl	8000450 <resetKey>
					setKeyTimer(button);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff29 	bl	8000480 <setKeyTimer>
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b03      	cmp	r3, #3
 8000638:	f77f af42 	ble.w	80004c0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000ec 	.word	0x200000ec
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	200000dc 	.word	0x200000dc

08000658 <fsmAutoModeRun>:
#include "fsm_auto_mode.h"

void fsmAutoModeRun() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// FSM for AUTO MODE

	switch (mode) {
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <fsmAutoModeRun+0x3c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <fsmAutoModeRun+0x12>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d004      	beq.n	8000672 <fsmAutoModeRun+0x1a>
			sendTimerCounter();

			break;

		default:
			break;
 8000668:	e011      	b.n	800068e <fsmAutoModeRun+0x36>
			mode = AUTO_MODE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <fsmAutoModeRun+0x3c>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
			break;
 8000670:	e00d      	b.n	800068e <fsmAutoModeRun+0x36>
			if (isButtonPressed(BUTTON_MODE)) {
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fe98 	bl	80003a8 <isButtonPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <fsmAutoModeRun+0x2c>
				mode = MAN_MODE;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <fsmAutoModeRun+0x3c>)
 8000680:	2205      	movs	r2, #5
 8000682:	601a      	str	r2, [r3, #0]
			LEDsDisplay();
 8000684:	f7ff fe22 	bl	80002cc <LEDsDisplay>
			sendTimerCounter();
 8000688:	f000 ffd2 	bl	8001630 <sendTimerCounter>
			break;
 800068c:	bf00      	nop
	}
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000c0 	.word	0x200000c0

08000698 <fsmManualModeRun>:
#include "fsm_manual_mode.h"

void fsmManualModeRun()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// FSM for MANUAL MODE

	switch (mode)
 800069c:	4b59      	ldr	r3, [pc, #356]	; (8000804 <fsmManualModeRun+0x16c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b05      	subs	r3, #5
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	f200 80ac 	bhi.w	8000800 <fsmManualModeRun+0x168>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <fsmManualModeRun+0x18>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	08000731 	.word	0x08000731
 80006bc:	08000799 	.word	0x08000799
	{
	case MAN_MODE:
		mode = MAN_RED;
 80006c0:	4b50      	ldr	r3, [pc, #320]	; (8000804 <fsmManualModeRun+0x16c>)
 80006c2:	2206      	movs	r2, #6
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e09b      	b.n	8000800 <fsmManualModeRun+0x168>

	case MAN_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	484e      	ldr	r0, [pc, #312]	; (8000808 <fsmManualModeRun+0x170>)
 80006d0:	f001 fcb9 	bl	8002046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2108      	movs	r1, #8
 80006d8:	484c      	ldr	r0, [pc, #304]	; (800080c <fsmManualModeRun+0x174>)
 80006da:	f001 fcb4 	bl	8002046 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80006de:	2201      	movs	r2, #1
 80006e0:	2120      	movs	r1, #32
 80006e2:	484a      	ldr	r0, [pc, #296]	; (800080c <fsmManualModeRun+0x174>)
 80006e4:	f001 fcaf 	bl	8002046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	4847      	ldr	r0, [pc, #284]	; (800080c <fsmManualModeRun+0x174>)
 80006ee:	f001 fcaa 	bl	8002046 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff fe58 	bl	80003a8 <isButtonPressed>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <fsmManualModeRun+0x6c>
		{
			mode = MAN_GREEN;
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <fsmManualModeRun+0x16c>)
 8000700:	2207      	movs	r2, #7
 8000702:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fe4f 	bl	80003a8 <isButtonPressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00c      	beq.n	800072a <fsmManualModeRun+0x92>
		{
			mode = INC_RED;
 8000710:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <fsmManualModeRun+0x16c>)
 8000712:	2209      	movs	r2, #9
 8000714:	601a      	str	r2, [r3, #0]
			time_count = RED_time / 1000;
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <fsmManualModeRun+0x178>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a3e      	ldr	r2, [pc, #248]	; (8000814 <fsmManualModeRun+0x17c>)
 800071c:	fb82 1203 	smull	r1, r2, r2, r3
 8000720:	1192      	asrs	r2, r2, #6
 8000722:	17db      	asrs	r3, r3, #31
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <fsmManualModeRun+0x180>)
 8000728:	6013      	str	r3, [r2, #0]
		}

		sendTimeDuration();
 800072a:	f000 ffe7 	bl	80016fc <sendTimeDuration>

		break;
 800072e:	e067      	b.n	8000800 <fsmManualModeRun+0x168>

	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000736:	4834      	ldr	r0, [pc, #208]	; (8000808 <fsmManualModeRun+0x170>)
 8000738:	f001 fc85 	bl	8002046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 800073c:	2201      	movs	r2, #1
 800073e:	2108      	movs	r1, #8
 8000740:	4832      	ldr	r0, [pc, #200]	; (800080c <fsmManualModeRun+0x174>)
 8000742:	f001 fc80 	bl	8002046 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4830      	ldr	r0, [pc, #192]	; (800080c <fsmManualModeRun+0x174>)
 800074c:	f001 fc7b 	bl	8002046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000750:	2201      	movs	r2, #1
 8000752:	2110      	movs	r1, #16
 8000754:	482d      	ldr	r0, [pc, #180]	; (800080c <fsmManualModeRun+0x174>)
 8000756:	f001 fc76 	bl	8002046 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff fe24 	bl	80003a8 <isButtonPressed>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <fsmManualModeRun+0xd4>
		{
			mode = MAN_YELLOW;
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <fsmManualModeRun+0x16c>)
 8000768:	2208      	movs	r2, #8
 800076a:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff fe1b 	bl	80003a8 <isButtonPressed>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00c      	beq.n	8000792 <fsmManualModeRun+0xfa>
		{
			mode = INC_GREEN;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <fsmManualModeRun+0x16c>)
 800077a:	220a      	movs	r2, #10
 800077c:	601a      	str	r2, [r3, #0]
			time_count = GREEN_time / 1000;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <fsmManualModeRun+0x184>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <fsmManualModeRun+0x17c>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	1192      	asrs	r2, r2, #6
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	4a22      	ldr	r2, [pc, #136]	; (8000818 <fsmManualModeRun+0x180>)
 8000790:	6013      	str	r3, [r2, #0]
		}

		sendTimeDuration();
 8000792:	f000 ffb3 	bl	80016fc <sendTimeDuration>

		break;
 8000796:	e033      	b.n	8000800 <fsmManualModeRun+0x168>

	case MAN_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079e:	481a      	ldr	r0, [pc, #104]	; (8000808 <fsmManualModeRun+0x170>)
 80007a0:	f001 fc51 	bl	8002046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2108      	movs	r1, #8
 80007a8:	4818      	ldr	r0, [pc, #96]	; (800080c <fsmManualModeRun+0x174>)
 80007aa:	f001 fc4c 	bl	8002046 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	4816      	ldr	r0, [pc, #88]	; (800080c <fsmManualModeRun+0x174>)
 80007b4:	f001 fc47 	bl	8002046 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2110      	movs	r1, #16
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <fsmManualModeRun+0x174>)
 80007be:	f001 fc42 	bl	8002046 <HAL_GPIO_WritePin>

		if (isButtonPressed(BUTTON_SET))
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fdf0 	bl	80003a8 <isButtonPressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <fsmManualModeRun+0x13c>
		{
			mode = MAN_RED;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <fsmManualModeRun+0x16c>)
 80007d0:	2206      	movs	r2, #6
 80007d2:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff fde7 	bl	80003a8 <isButtonPressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00c      	beq.n	80007fa <fsmManualModeRun+0x162>
		{
			mode = INC_YELLOW;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <fsmManualModeRun+0x16c>)
 80007e2:	220b      	movs	r2, #11
 80007e4:	601a      	str	r2, [r3, #0]
			time_count = YELLOW_time / 1000;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <fsmManualModeRun+0x188>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <fsmManualModeRun+0x17c>)
 80007ec:	fb82 1203 	smull	r1, r2, r2, r3
 80007f0:	1192      	asrs	r2, r2, #6
 80007f2:	17db      	asrs	r3, r3, #31
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <fsmManualModeRun+0x180>)
 80007f8:	6013      	str	r3, [r2, #0]
		}

		sendTimeDuration();
 80007fa:	f000 ff7f 	bl	80016fc <sendTimeDuration>

		break;
 80007fe:	bf00      	nop
	}
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000c0 	.word	0x200000c0
 8000808:	40010800 	.word	0x40010800
 800080c:	40010c00 	.word	0x40010c00
 8000810:	20000018 	.word	0x20000018
 8000814:	10624dd3 	.word	0x10624dd3
 8000818:	200000bc 	.word	0x200000bc
 800081c:	2000001c 	.word	0x2000001c
 8000820:	20000020 	.word	0x20000020

08000824 <fsmVerPedRun>:
int hor_ped = PED_OFF;
int buzzer_time = BUZZER_time;
int pul = BUZZER_pul;
int state = 0;

void fsmVerPedRun(){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	switch(ver_ped){
 8000828:	4b52      	ldr	r3, [pc, #328]	; (8000974 <fsmVerPedRun+0x150>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3b0c      	subs	r3, #12
 800082e:	2b04      	cmp	r3, #4
 8000830:	f200 8093 	bhi.w	800095a <fsmVerPedRun+0x136>
 8000834:	a201      	add	r2, pc, #4	; (adr r2, 800083c <fsmVerPedRun+0x18>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	08000851 	.word	0x08000851
 8000840:	08000881 	.word	0x08000881
 8000844:	080008bf 	.word	0x080008bf
 8000848:	080008f5 	.word	0x080008f5
 800084c:	08000933 	.word	0x08000933
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 8000850:	4b49      	ldr	r3, [pc, #292]	; (8000978 <fsmVerPedRun+0x154>)
 8000852:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000856:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 8000858:	4b48      	ldr	r3, [pc, #288]	; (800097c <fsmVerPedRun+0x158>)
 800085a:	f240 2226 	movw	r2, #550	; 0x226
 800085e:	601a      	str	r2, [r3, #0]
			state = 1;
 8000860:	4b47      	ldr	r3, [pc, #284]	; (8000980 <fsmVerPedRun+0x15c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 8000866:	2003      	movs	r0, #3
 8000868:	f7ff fd9e 	bl	80003a8 <isButtonPressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d075      	beq.n	800095e <fsmVerPedRun+0x13a>
				ver_ped = PED_ON;
 8000872:	4b40      	ldr	r3, [pc, #256]	; (8000974 <fsmVerPedRun+0x150>)
 8000874:	220d      	movs	r2, #13
 8000876:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 8000878:	4b42      	ldr	r3, [pc, #264]	; (8000984 <fsmVerPedRun+0x160>)
 800087a:	220d      	movs	r2, #13
 800087c:	601a      	str	r2, [r3, #0]
			}
			break;
 800087e:	e06e      	b.n	800095e <fsmVerPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000880:	2003      	movs	r0, #3
 8000882:	f7ff fd91 	bl	80003a8 <isButtonPressed>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d005      	beq.n	8000898 <fsmVerPedRun+0x74>
				ver_ped = PED_OFF;
 800088c:	4b39      	ldr	r3, [pc, #228]	; (8000974 <fsmVerPedRun+0x150>)
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000892:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <fsmVerPedRun+0x160>)
 8000894:	220c      	movs	r2, #12
 8000896:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 8000898:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <fsmVerPedRun+0x164>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d102      	bne.n	80008a6 <fsmVerPedRun+0x82>
				ver_ped = WALK_ALLOW;
 80008a0:	4b34      	ldr	r3, [pc, #208]	; (8000974 <fsmVerPedRun+0x150>)
 80008a2:	220e      	movs	r2, #14
 80008a4:	601a      	str	r2, [r3, #0]
			}
			if((vertical_status == AUTO_GREEN) || (vertical_status == AUTO_YELLOW)){
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <fsmVerPedRun+0x164>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d003      	beq.n	80008b6 <fsmVerPedRun+0x92>
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <fsmVerPedRun+0x164>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d155      	bne.n	8000962 <fsmVerPedRun+0x13e>
				ver_ped = WALK_STOP;
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <fsmVerPedRun+0x150>)
 80008b8:	2210      	movs	r2, #16
 80008ba:	601a      	str	r2, [r3, #0]
			}
			break;
 80008bc:	e051      	b.n	8000962 <fsmVerPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff fd72 	bl	80003a8 <isButtonPressed>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d005      	beq.n	80008d6 <fsmVerPedRun+0xb2>
				ver_ped = PED_OFF;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <fsmVerPedRun+0x150>)
 80008cc:	220c      	movs	r2, #12
 80008ce:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <fsmVerPedRun+0x160>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(1) <= 300){
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fe38 	bl	800154c <currentCounter>
 80008dc:	4603      	mov	r3, r0
 80008de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80008e2:	dc40      	bgt.n	8000966 <fsmVerPedRun+0x142>
				ver_ped = BUZZER_ON;
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <fsmVerPedRun+0x150>)
 80008e6:	220f      	movs	r2, #15
 80008e8:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 80008ea:	2164      	movs	r1, #100	; 0x64
 80008ec:	2002      	movs	r0, #2
 80008ee:	f000 fe51 	bl	8001594 <setTimer>
			}
			break;
 80008f2:	e038      	b.n	8000966 <fsmVerPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fd57 	bl	80003a8 <isButtonPressed>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <fsmVerPedRun+0xe8>
				ver_ped = PED_OFF;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <fsmVerPedRun+0x150>)
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <fsmVerPedRun+0x160>)
 8000908:	220c      	movs	r2, #12
 800090a:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_GREEN){
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <fsmVerPedRun+0x164>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d12a      	bne.n	800096a <fsmVerPedRun+0x146>
				ver_ped = WALK_STOP;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <fsmVerPedRun+0x150>)
 8000916:	2210      	movs	r2, #16
 8000918:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <fsmVerPedRun+0x154>)
 800091c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000920:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <fsmVerPedRun+0x158>)
 8000924:	f240 2226 	movw	r2, #550	; 0x226
 8000928:	601a      	str	r2, [r3, #0]
				state = 0;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <fsmVerPedRun+0x15c>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000930:	e01b      	b.n	800096a <fsmVerPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 8000932:	2003      	movs	r0, #3
 8000934:	f7ff fd38 	bl	80003a8 <isButtonPressed>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d005      	beq.n	800094a <fsmVerPedRun+0x126>
				ver_ped = PED_OFF;
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <fsmVerPedRun+0x150>)
 8000940:	220c      	movs	r2, #12
 8000942:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <fsmVerPedRun+0x160>)
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <fsmVerPedRun+0x164>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d10d      	bne.n	800096e <fsmVerPedRun+0x14a>
				ver_ped = WALK_ALLOW;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <fsmVerPedRun+0x150>)
 8000954:	220e      	movs	r2, #14
 8000956:	601a      	str	r2, [r3, #0]
			}
			break;
 8000958:	e009      	b.n	800096e <fsmVerPedRun+0x14a>
		default:
			break;
 800095a:	bf00      	nop
 800095c:	e008      	b.n	8000970 <fsmVerPedRun+0x14c>
			break;
 800095e:	bf00      	nop
 8000960:	e006      	b.n	8000970 <fsmVerPedRun+0x14c>
			break;
 8000962:	bf00      	nop
 8000964:	e004      	b.n	8000970 <fsmVerPedRun+0x14c>
			break;
 8000966:	bf00      	nop
 8000968:	e002      	b.n	8000970 <fsmVerPedRun+0x14c>
			break;
 800096a:	bf00      	nop
 800096c:	e000      	b.n	8000970 <fsmVerPedRun+0x14c>
			break;
 800096e:	bf00      	nop
	}
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	2000000c 	.word	0x2000000c
 8000980:	200000b8 	.word	0x200000b8
 8000984:	20000004 	.word	0x20000004
 8000988:	200000b4 	.word	0x200000b4

0800098c <fsmHorPedRun>:

void fsmHorPedRun(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	switch(hor_ped){
 8000990:	4b52      	ldr	r3, [pc, #328]	; (8000adc <fsmHorPedRun+0x150>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3b0c      	subs	r3, #12
 8000996:	2b04      	cmp	r3, #4
 8000998:	f200 8093 	bhi.w	8000ac2 <fsmHorPedRun+0x136>
 800099c:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <fsmHorPedRun+0x18>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009b9 	.word	0x080009b9
 80009a8:	080009e9 	.word	0x080009e9
 80009ac:	08000a27 	.word	0x08000a27
 80009b0:	08000a5d 	.word	0x08000a5d
 80009b4:	08000a9b 	.word	0x08000a9b
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 80009b8:	4b49      	ldr	r3, [pc, #292]	; (8000ae0 <fsmHorPedRun+0x154>)
 80009ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009be:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 80009c0:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <fsmHorPedRun+0x158>)
 80009c2:	f240 2226 	movw	r2, #550	; 0x226
 80009c6:	601a      	str	r2, [r3, #0]
			state = 1;
 80009c8:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <fsmHorPedRun+0x15c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 80009ce:	2003      	movs	r0, #3
 80009d0:	f7ff fcea 	bl	80003a8 <isButtonPressed>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d075      	beq.n	8000ac6 <fsmHorPedRun+0x13a>
				ver_ped = PED_ON;
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <fsmHorPedRun+0x160>)
 80009dc:	220d      	movs	r2, #13
 80009de:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <fsmHorPedRun+0x150>)
 80009e2:	220d      	movs	r2, #13
 80009e4:	601a      	str	r2, [r3, #0]
			}
			break;
 80009e6:	e06e      	b.n	8000ac6 <fsmHorPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 80009e8:	2003      	movs	r0, #3
 80009ea:	f7ff fcdd 	bl	80003a8 <isButtonPressed>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d005      	beq.n	8000a00 <fsmHorPedRun+0x74>
				ver_ped = PED_OFF;
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <fsmHorPedRun+0x160>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80009fa:	4b38      	ldr	r3, [pc, #224]	; (8000adc <fsmHorPedRun+0x150>)
 80009fc:	220c      	movs	r2, #12
 80009fe:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 8000a00:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <fsmHorPedRun+0x164>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d102      	bne.n	8000a0e <fsmHorPedRun+0x82>
				hor_ped = WALK_ALLOW;
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <fsmHorPedRun+0x150>)
 8000a0a:	220e      	movs	r2, #14
 8000a0c:	601a      	str	r2, [r3, #0]
			}
			if((horizontal_status == AUTO_GREEN) || (horizontal_status == AUTO_YELLOW)){
 8000a0e:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <fsmHorPedRun+0x164>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d003      	beq.n	8000a1e <fsmHorPedRun+0x92>
 8000a16:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <fsmHorPedRun+0x164>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d155      	bne.n	8000aca <fsmHorPedRun+0x13e>
				hor_ped = WALK_STOP;
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <fsmHorPedRun+0x150>)
 8000a20:	2210      	movs	r2, #16
 8000a22:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a24:	e051      	b.n	8000aca <fsmHorPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 8000a26:	2003      	movs	r0, #3
 8000a28:	f7ff fcbe 	bl	80003a8 <isButtonPressed>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d005      	beq.n	8000a3e <fsmHorPedRun+0xb2>
				ver_ped = PED_OFF;
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <fsmHorPedRun+0x160>)
 8000a34:	220c      	movs	r2, #12
 8000a36:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <fsmHorPedRun+0x150>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(0) <= 300){
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fd84 	bl	800154c <currentCounter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a4a:	dc40      	bgt.n	8000ace <fsmHorPedRun+0x142>
				hor_ped = BUZZER_ON;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <fsmHorPedRun+0x150>)
 8000a4e:	220f      	movs	r2, #15
 8000a50:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 8000a52:	2164      	movs	r1, #100	; 0x64
 8000a54:	2002      	movs	r0, #2
 8000a56:	f000 fd9d 	bl	8001594 <setTimer>
			}
			break;
 8000a5a:	e038      	b.n	8000ace <fsmHorPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f7ff fca3 	bl	80003a8 <isButtonPressed>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <fsmHorPedRun+0xe8>
				ver_ped = PED_OFF;
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <fsmHorPedRun+0x160>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <fsmHorPedRun+0x150>)
 8000a70:	220c      	movs	r2, #12
 8000a72:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_GREEN){
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <fsmHorPedRun+0x164>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d12a      	bne.n	8000ad2 <fsmHorPedRun+0x146>
				hor_ped = WALK_STOP;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <fsmHorPedRun+0x150>)
 8000a7e:	2210      	movs	r2, #16
 8000a80:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <fsmHorPedRun+0x154>)
 8000a84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a88:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <fsmHorPedRun+0x158>)
 8000a8c:	f240 2226 	movw	r2, #550	; 0x226
 8000a90:	601a      	str	r2, [r3, #0]
				state = 0;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <fsmHorPedRun+0x15c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a98:	e01b      	b.n	8000ad2 <fsmHorPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f7ff fc84 	bl	80003a8 <isButtonPressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d005      	beq.n	8000ab2 <fsmHorPedRun+0x126>
				ver_ped = PED_OFF;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <fsmHorPedRun+0x160>)
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <fsmHorPedRun+0x150>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <fsmHorPedRun+0x164>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d10d      	bne.n	8000ad6 <fsmHorPedRun+0x14a>
				hor_ped = WALK_ALLOW;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <fsmHorPedRun+0x150>)
 8000abc:	220e      	movs	r2, #14
 8000abe:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ac0:	e009      	b.n	8000ad6 <fsmHorPedRun+0x14a>
		default:
			break;
 8000ac2:	bf00      	nop
 8000ac4:	e008      	b.n	8000ad8 <fsmHorPedRun+0x14c>
			break;
 8000ac6:	bf00      	nop
 8000ac8:	e006      	b.n	8000ad8 <fsmHorPedRun+0x14c>
			break;
 8000aca:	bf00      	nop
 8000acc:	e004      	b.n	8000ad8 <fsmHorPedRun+0x14c>
			break;
 8000ace:	bf00      	nop
 8000ad0:	e002      	b.n	8000ad8 <fsmHorPedRun+0x14c>
			break;
 8000ad2:	bf00      	nop
 8000ad4:	e000      	b.n	8000ad8 <fsmHorPedRun+0x14c>
			break;
 8000ad6:	bf00      	nop
	}
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	2000000c 	.word	0x2000000c
 8000ae8:	200000b8 	.word	0x200000b8
 8000aec:	20000000 	.word	0x20000000
 8000af0:	200000b0 	.word	0x200000b0

08000af4 <fsmPedestrianModeRun>:

void fsmPedestrianModeRun() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	fsmVerPedRun();
 8000af8:	f7ff fe94 	bl	8000824 <fsmVerPedRun>
	fsmHorPedRun();
 8000afc:	f7ff ff46 	bl	800098c <fsmHorPedRun>

	switch(ver_ped){
 8000b00:	4b9a      	ldr	r3, [pc, #616]	; (8000d6c <fsmPedestrianModeRun+0x278>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3b0c      	subs	r3, #12
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	f200 8090 	bhi.w	8000c2c <fsmPedestrianModeRun+0x138>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <fsmPedestrianModeRun+0x20>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b29 	.word	0x08000b29
 8000b18:	08000c2d 	.word	0x08000c2d
 8000b1c:	08000b41 	.word	0x08000b41
 8000b20:	08000b59 	.word	0x08000b59
 8000b24:	08000c15 	.word	0x08000c15
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4890      	ldr	r0, [pc, #576]	; (8000d70 <fsmPedestrianModeRun+0x27c>)
 8000b2e:	f001 fa8a 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	488e      	ldr	r0, [pc, #568]	; (8000d74 <fsmPedestrianModeRun+0x280>)
 8000b3a:	f001 fa84 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000b3e:	e078      	b.n	8000c32 <fsmPedestrianModeRun+0x13e>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2104      	movs	r1, #4
 8000b44:	488a      	ldr	r0, [pc, #552]	; (8000d70 <fsmPedestrianModeRun+0x27c>)
 8000b46:	f001 fa7e 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_ON);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	4888      	ldr	r0, [pc, #544]	; (8000d74 <fsmPedestrianModeRun+0x280>)
 8000b52:	f001 fa78 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000b56:	e06c      	b.n	8000c32 <fsmPedestrianModeRun+0x13e>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f000 fd07 	bl	800156c <isTimerUp>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d028      	beq.n	8000bb6 <fsmPedestrianModeRun+0xc2>
 8000b64:	4b84      	ldr	r3, [pc, #528]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d124      	bne.n	8000bb6 <fsmPedestrianModeRun+0xc2>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, pul);
 8000b6c:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b83      	ldr	r3, [pc, #524]	; (8000d80 <fsmPedestrianModeRun+0x28c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f000 fd09 	bl	8001594 <setTimer>
				state = 1 - state;
 8000b82:	4b7d      	ldr	r3, [pc, #500]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f1c3 0301 	rsb	r3, r3, #1
 8000b8a:	4a7b      	ldr	r2, [pc, #492]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000b8c:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000b8e:	4b7b      	ldr	r3, [pc, #492]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000b96:	4293      	cmp	r3, r2
 8000b98:	dc04      	bgt.n	8000ba4 <fsmPedestrianModeRun+0xb0>
 8000b9a:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3364      	adds	r3, #100	; 0x64
 8000ba0:	4a76      	ldr	r2, [pc, #472]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000ba2:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b64      	cmp	r3, #100	; 0x64
 8000baa:	dd04      	ble.n	8000bb6 <fsmPedestrianModeRun+0xc2>
 8000bac:	4b75      	ldr	r3, [pc, #468]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3b64      	subs	r3, #100	; 0x64
 8000bb2:	4a74      	ldr	r2, [pc, #464]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000bb4:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f000 fcd8 	bl	800156c <isTimerUp>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d036      	beq.n	8000c30 <fsmPedestrianModeRun+0x13c>
 8000bc2:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d132      	bne.n	8000c30 <fsmPedestrianModeRun+0x13c>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, 0);
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <fsmPedestrianModeRun+0x28c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000bd2:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f000 fcdb 	bl	8001594 <setTimer>
				state = 1 - state;
 8000bde:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f1c3 0301 	rsb	r3, r3, #1
 8000be6:	4a64      	ldr	r2, [pc, #400]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000be8:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000bea:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	dc04      	bgt.n	8000c00 <fsmPedestrianModeRun+0x10c>
 8000bf6:	4b61      	ldr	r3, [pc, #388]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3364      	adds	r3, #100	; 0x64
 8000bfc:	4a5f      	ldr	r2, [pc, #380]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000bfe:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000c00:	4b60      	ldr	r3, [pc, #384]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b64      	cmp	r3, #100	; 0x64
 8000c06:	dd13      	ble.n	8000c30 <fsmPedestrianModeRun+0x13c>
 8000c08:	4b5e      	ldr	r3, [pc, #376]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3b64      	subs	r3, #100	; 0x64
 8000c0e:	4a5d      	ldr	r2, [pc, #372]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000c10:	6013      	str	r3, [r2, #0]
			}
			break;
 8000c12:	e00d      	b.n	8000c30 <fsmPedestrianModeRun+0x13c>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_ON);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2104      	movs	r1, #4
 8000c18:	4855      	ldr	r0, [pc, #340]	; (8000d70 <fsmPedestrianModeRun+0x27c>)
 8000c1a:	f001 fa14 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c24:	4853      	ldr	r0, [pc, #332]	; (8000d74 <fsmPedestrianModeRun+0x280>)
 8000c26:	f001 fa0e 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000c2a:	e002      	b.n	8000c32 <fsmPedestrianModeRun+0x13e>
		default:
			break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <fsmPedestrianModeRun+0x13e>
			break;
 8000c30:	bf00      	nop
	}

	switch(hor_ped){
 8000c32:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <fsmPedestrianModeRun+0x294>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3b0c      	subs	r3, #12
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	f200 8092 	bhi.w	8000d62 <fsmPedestrianModeRun+0x26e>
 8000c3e:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <fsmPedestrianModeRun+0x150>)
 8000c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000d63 	.word	0x08000d63
 8000c4c:	08000c73 	.word	0x08000c73
 8000c50:	08000c8d 	.word	0x08000c8d
 8000c54:	08000d49 	.word	0x08000d49
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5e:	4844      	ldr	r0, [pc, #272]	; (8000d70 <fsmPedestrianModeRun+0x27c>)
 8000c60:	f001 f9f1 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6a:	4842      	ldr	r0, [pc, #264]	; (8000d74 <fsmPedestrianModeRun+0x280>)
 8000c6c:	f001 f9eb 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000c70:	e07a      	b.n	8000d68 <fsmPedestrianModeRun+0x274>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c78:	483d      	ldr	r0, [pc, #244]	; (8000d70 <fsmPedestrianModeRun+0x27c>)
 8000c7a:	f001 f9e4 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_ON);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	483b      	ldr	r0, [pc, #236]	; (8000d74 <fsmPedestrianModeRun+0x280>)
 8000c86:	f001 f9de 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000c8a:	e06d      	b.n	8000d68 <fsmPedestrianModeRun+0x274>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f000 fc6d 	bl	800156c <isTimerUp>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d028      	beq.n	8000cea <fsmPedestrianModeRun+0x1f6>
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d124      	bne.n	8000cea <fsmPedestrianModeRun+0x1f6>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, pul);
 8000ca0:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <fsmPedestrianModeRun+0x28c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f000 fc6f 	bl	8001594 <setTimer>
				state = 1 - state;
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f1c3 0301 	rsb	r3, r3, #1
 8000cbe:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000cc0:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	dc04      	bgt.n	8000cd8 <fsmPedestrianModeRun+0x1e4>
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3364      	adds	r3, #100	; 0x64
 8000cd4:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000cd6:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b64      	cmp	r3, #100	; 0x64
 8000cde:	dd04      	ble.n	8000cea <fsmPedestrianModeRun+0x1f6>
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3b64      	subs	r3, #100	; 0x64
 8000ce6:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000ce8:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000cea:	2002      	movs	r0, #2
 8000cec:	f000 fc3e 	bl	800156c <isTimerUp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d037      	beq.n	8000d66 <fsmPedestrianModeRun+0x272>
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d133      	bne.n	8000d66 <fsmPedestrianModeRun+0x272>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <fsmPedestrianModeRun+0x28c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f000 fc41 	bl	8001594 <setTimer>
				state = 1 - state;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f1c3 0301 	rsb	r3, r3, #1
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <fsmPedestrianModeRun+0x284>)
 8000d1c:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000d26:	4293      	cmp	r3, r2
 8000d28:	dc04      	bgt.n	8000d34 <fsmPedestrianModeRun+0x240>
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3364      	adds	r3, #100	; 0x64
 8000d30:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <fsmPedestrianModeRun+0x288>)
 8000d32:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b64      	cmp	r3, #100	; 0x64
 8000d3a:	dd14      	ble.n	8000d66 <fsmPedestrianModeRun+0x272>
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b64      	subs	r3, #100	; 0x64
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <fsmPedestrianModeRun+0x290>)
 8000d44:	6013      	str	r3, [r2, #0]
			}
			break;
 8000d46:	e00e      	b.n	8000d66 <fsmPedestrianModeRun+0x272>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_ON);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	4808      	ldr	r0, [pc, #32]	; (8000d70 <fsmPedestrianModeRun+0x27c>)
 8000d50:	f001 f979 	bl	8002046 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <fsmPedestrianModeRun+0x280>)
 8000d5c:	f001 f973 	bl	8002046 <HAL_GPIO_WritePin>
			break;
 8000d60:	e002      	b.n	8000d68 <fsmPedestrianModeRun+0x274>
		default:
			break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <fsmPedestrianModeRun+0x274>
			break;
 8000d66:	bf00      	nop
	}


}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	40010800 	.word	0x40010800
 8000d78:	200000b8 	.word	0x200000b8
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	2000011c 	.word	0x2000011c
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <fsmTuningModeRun>:
#include "fsm_tuning_mode.h"

int time_count = 0;

void fsmTuningModeRun() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	// FSM for TUNING MODE

	switch (mode) {
 8000d90:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <fsmTuningModeRun+0x17c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b0b      	cmp	r3, #11
 8000d96:	d07a      	beq.n	8000e8e <fsmTuningModeRun+0x102>
 8000d98:	2b0b      	cmp	r3, #11
 8000d9a:	f300 80b2 	bgt.w	8000f02 <fsmTuningModeRun+0x176>
 8000d9e:	2b09      	cmp	r3, #9
 8000da0:	d002      	beq.n	8000da8 <fsmTuningModeRun+0x1c>
 8000da2:	2b0a      	cmp	r3, #10
 8000da4:	d039      	beq.n	8000e1a <fsmTuningModeRun+0x8e>
			sendTimeInc();

			break;

		default:
			break;
 8000da6:	e0ac      	b.n	8000f02 <fsmTuningModeRun+0x176>
			if (isButtonPressed(BUTTON_MODE)) {
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fafd 	bl	80003a8 <isButtonPressed>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <fsmTuningModeRun+0x2e>
				mode = AUTO_MODE;
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <fsmTuningModeRun+0x17c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff faf4 	bl	80003a8 <isButtonPressed>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <fsmTuningModeRun+0x4a>
				RED_time = time_count * 1000;
 8000dc6:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	4a4f      	ldr	r2, [pc, #316]	; (8000f10 <fsmTuningModeRun+0x184>)
 8000dd4:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fae6 	bl	80003a8 <isButtonPressed>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d105      	bne.n	8000dee <fsmTuningModeRun+0x62>
 8000de2:	2002      	movs	r0, #2
 8000de4:	f7ff fafa 	bl	80003dc <isButtonLongPressed>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d012      	beq.n	8000e14 <fsmTuningModeRun+0x88>
				time_count %= 100;
 8000dee:	4b47      	ldr	r3, [pc, #284]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <fsmTuningModeRun+0x188>)
 8000df4:	fb83 1302 	smull	r1, r3, r3, r2
 8000df8:	1159      	asrs	r1, r3, #5
 8000dfa:	17d3      	asrs	r3, r2, #31
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	2164      	movs	r1, #100	; 0x64
 8000e00:	fb01 f303 	mul.w	r3, r1, r3
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	4a41      	ldr	r2, [pc, #260]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e08:	6013      	str	r3, [r2, #0]
				time_count++;
 8000e0a:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a3e      	ldr	r2, [pc, #248]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e12:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000e14:	f000 fd10 	bl	8001838 <sendTimeInc>
			break;
 8000e18:	e074      	b.n	8000f04 <fsmTuningModeRun+0x178>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fac4 	bl	80003a8 <isButtonPressed>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <fsmTuningModeRun+0xa0>
				mode = AUTO_MODE;
 8000e26:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <fsmTuningModeRun+0x17c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff fabb 	bl	80003a8 <isButtonPressed>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <fsmTuningModeRun+0xbc>
				GREEN_time = time_count * 1000;
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	4a34      	ldr	r2, [pc, #208]	; (8000f18 <fsmTuningModeRun+0x18c>)
 8000e46:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff faad 	bl	80003a8 <isButtonPressed>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d105      	bne.n	8000e60 <fsmTuningModeRun+0xd4>
 8000e54:	2002      	movs	r0, #2
 8000e56:	f7ff fac1 	bl	80003dc <isButtonLongPressed>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d013      	beq.n	8000e88 <fsmTuningModeRun+0xfc>
				time_count %= 90;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <fsmTuningModeRun+0x190>)
 8000e66:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6a:	441a      	add	r2, r3
 8000e6c:	1191      	asrs	r1, r2, #6
 8000e6e:	17da      	asrs	r2, r3, #31
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	215a      	movs	r1, #90	; 0x5a
 8000e74:	fb01 f202 	mul.w	r2, r1, r2
 8000e78:	1a9a      	subs	r2, r3, r2
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e7c:	601a      	str	r2, [r3, #0]
				time_count++;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000e86:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000e88:	f000 fcd6 	bl	8001838 <sendTimeInc>
			break;
 8000e8c:	e03a      	b.n	8000f04 <fsmTuningModeRun+0x178>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fa8a 	bl	80003a8 <isButtonPressed>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <fsmTuningModeRun+0x114>
				mode = AUTO_MODE;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <fsmTuningModeRun+0x17c>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff fa81 	bl	80003a8 <isButtonPressed>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <fsmTuningModeRun+0x130>
				YELLOW_time = time_count * 1000;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <fsmTuningModeRun+0x194>)
 8000eba:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f7ff fa73 	bl	80003a8 <isButtonPressed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <fsmTuningModeRun+0x148>
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f7ff fa87 	bl	80003dc <isButtonLongPressed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d013      	beq.n	8000efc <fsmTuningModeRun+0x170>
				time_count %= 10;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000ed6:	6819      	ldr	r1, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <fsmTuningModeRun+0x198>)
 8000eda:	fb83 2301 	smull	r2, r3, r3, r1
 8000ede:	109a      	asrs	r2, r3, #2
 8000ee0:	17cb      	asrs	r3, r1, #31
 8000ee2:	1ad2      	subs	r2, r2, r3
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	1aca      	subs	r2, r1, r3
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000ef0:	601a      	str	r2, [r3, #0]
				time_count++;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <fsmTuningModeRun+0x180>)
 8000efa:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000efc:	f000 fc9c 	bl	8001838 <sendTimeInc>
			break;
 8000f00:	e000      	b.n	8000f04 <fsmTuningModeRun+0x178>
			break;
 8000f02:	bf00      	nop
	}
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	200000bc 	.word	0x200000bc
 8000f10:	20000018 	.word	0x20000018
 8000f14:	51eb851f 	.word	0x51eb851f
 8000f18:	2000001c 	.word	0x2000001c
 8000f1c:	b60b60b7 	.word	0xb60b60b7
 8000f20:	20000020 	.word	0x20000020
 8000f24:	66666667 	.word	0x66666667

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fcd0 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f81c 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f908 	bl	8001148 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f38:	f000 f8dc 	bl	80010f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f3c:	f000 f858 	bl	8000ff0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <main+0x40>)
 8000f42:	f001 fd25 	bl	8002990 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <main+0x40>)
 8000f4a:	f001 fdcb 	bl	8002ae4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <main+0x40>)
 8000f52:	f001 fdc7 	bl	8002ae4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsmAutoModeRun();
 8000f56:	f7ff fb7f 	bl	8000658 <fsmAutoModeRun>
	  fsmManualModeRun();
 8000f5a:	f7ff fb9d 	bl	8000698 <fsmManualModeRun>
	  fsmTuningModeRun();
 8000f5e:	f7ff ff15 	bl	8000d8c <fsmTuningModeRun>
	  fsmPedestrianModeRun();
 8000f62:	f7ff fdc7 	bl	8000af4 <fsmPedestrianModeRun>
	  fsmAutoModeRun();
 8000f66:	e7f6      	b.n	8000f56 <main+0x2e>
 8000f68:	2000011c 	.word	0x2000011c

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b090      	sub	sp, #64	; 0x40
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	2228      	movs	r2, #40	; 0x28
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f918 	bl	80041b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f96:	2310      	movs	r3, #16
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fa2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 f885 	bl	80020bc <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fb8:	f000 f972 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 faf0 	bl	80025bc <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fe2:	f000 f95d 	bl	80012a0 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3740      	adds	r7, #64	; 0x40
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	615a      	str	r2, [r3, #20]
 800101e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001022:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <MX_TIM3_Init+0x100>)
 8001024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001028:	223f      	movs	r2, #63	; 0x3f
 800102a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <MX_TIM3_Init+0xfc>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001038:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <MX_TIM3_Init+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001046:	4829      	ldr	r0, [pc, #164]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001048:	f001 fc52 	bl	80028f0 <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001052:	f000 f925 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001060:	4619      	mov	r1, r3
 8001062:	4822      	ldr	r0, [pc, #136]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001064:	f001 ffa6 	bl	8002fb4 <HAL_TIM_ConfigClockSource>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800106e:	f000 f917 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001072:	481e      	ldr	r0, [pc, #120]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001074:	f001 fcde 	bl	8002a34 <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800107e:	f000 f90f 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	4619      	mov	r1, r3
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <MX_TIM3_Init+0xfc>)
 8001092:	f002 fb1b 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800109c:	f000 f900 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	2360      	movs	r3, #96	; 0x60
 80010a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_TIM3_Init+0xfc>)
 80010b8:	f001 febe 	bl	8002e38 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010c2:	f000 f8ed 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2204      	movs	r2, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM3_Init+0xfc>)
 80010ce:	f001 feb3 	bl	8002e38 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010d8:	f000 f8e2 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM3_Init+0xfc>)
 80010de:	f000 f93d 	bl	800135c <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3738      	adds	r7, #56	; 0x38
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000011c 	.word	0x2000011c
 80010f0:	40000400 	.word	0x40000400

080010f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_USART2_UART_Init+0x50>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART2_UART_Init+0x4c>)
 800112c:	f002 fb3e 	bl	80037ac <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001136:	f000 f8b3 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000017c 	.word	0x2000017c
 8001144:	40004400 	.word	0x40004400

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <MX_GPIO_Init+0x12c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a44      	ldr	r2, [pc, #272]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <MX_GPIO_Init+0x12c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a3e      	ldr	r2, [pc, #248]	; (8001274 <MX_GPIO_Init+0x12c>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_GPIO_Init+0x12c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a38      	ldr	r2, [pc, #224]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <MX_GPIO_Init+0x12c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a32      	ldr	r2, [pc, #200]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80011c2:	482d      	ldr	r0, [pc, #180]	; (8001278 <MX_GPIO_Init+0x130>)
 80011c4:	f000 ff3f 	bl	8002046 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 80011c8:	2200      	movs	r2, #0
 80011ca:	f240 413c 	movw	r1, #1084	; 0x43c
 80011ce:	482b      	ldr	r0, [pc, #172]	; (800127c <MX_GPIO_Init+0x134>)
 80011d0:	f000 ff39 	bl	8002046 <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_GPIO_Init+0x138>)
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	4826      	ldr	r0, [pc, #152]	; (8001284 <MX_GPIO_Init+0x13c>)
 80011ea:	f000 fd91 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_PED_Pin BUTTON_MODE_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_PED_Pin|BUTTON_MODE_Pin|BUTTON_SET_Pin;
 80011ee:	2313      	movs	r3, #19
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	481d      	ldr	r0, [pc, #116]	; (8001278 <MX_GPIO_Init+0x130>)
 8001202:	f000 fd85 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_GREEN_P1_Pin LED_GREEN_P2_Pin LED_RED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin;
 8001206:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4816      	ldr	r0, [pc, #88]	; (8001278 <MX_GPIO_Init+0x130>)
 8001220:	f000 fd76 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INC_Pin */
  GPIO_InitStruct.Pin = BUTTON_INC_Pin;
 8001224:	2301      	movs	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INC_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_GPIO_Init+0x134>)
 8001238:	f000 fd6a 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_P2_Pin LED_RED_P1_Pin LED_GREEN_1_Pin LED_GREEN_2_Pin
                           LED_RED_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 800123c:	f240 433c 	movw	r3, #1084	; 0x43c
 8001240:	613b      	str	r3, [r7, #16]
                          |LED_RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2302      	movs	r3, #2
 800124c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_GPIO_Init+0x134>)
 8001256:	f000 fd5b 	bl	8001d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f000 fc6f 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001264:	2028      	movs	r0, #40	; 0x28
 8001266:	f000 fc88 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	10110000 	.word	0x10110000
 8001284:	40011000 	.word	0x40011000

08001288 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001290:	f000 f99e 	bl	80015d0 <timerRun>
	getKeyInput();
 8001294:	f7ff f90e 	bl	80004b4 <getKeyInput>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_MspInit+0x5c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_MspInit+0x5c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_MspInit+0x5c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x5c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_MspInit+0x5c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_MspInit+0x5c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_MspInit+0x60>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_MspInit+0x60>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_TIM_Base_MspInit+0x44>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d113      	bne.n	800134a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_TIM_Base_MspInit+0x48>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_TIM_Base_MspInit+0x48>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_TIM_Base_MspInit+0x48>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	201d      	movs	r0, #29
 8001340:	f000 fbff 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001344:	201d      	movs	r0, #29
 8001346:	f000 fc18 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000400 	.word	0x40000400
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_TIM_MspPostInit+0x58>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d117      	bne.n	80013ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_TIM_MspPostInit+0x5c>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_TIM_MspPostInit+0x5c>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_TIM_MspPostInit+0x5c>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2302      	movs	r3, #2
 800139e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_TIM_MspPostInit+0x60>)
 80013a8:	f000 fcb2 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40000400 	.word	0x40000400
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_UART_MspInit+0x80>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d12b      	bne.n	8001438 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ea:	61d3      	str	r3, [r2, #28]
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_UART_MspInit+0x84>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_UART_MspInit+0x84>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001410:	230c      	movs	r3, #12
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <HAL_UART_MspInit+0x88>)
 8001424:	f000 fc74 	bl	8001d10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2026      	movs	r0, #38	; 0x26
 800142e:	f000 fb88 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001432:	2026      	movs	r0, #38	; 0x26
 8001434:	f000 fba1 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40004400 	.word	0x40004400
 8001444:	40021000 	.word	0x40021000
 8001448:	40010800 	.word	0x40010800

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 fa63 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM3_IRQHandler+0x10>)
 80014a2:	f001 fbc1 	bl	8002c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000011c 	.word	0x2000011c

080014b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART2_IRQHandler+0x10>)
 80014b6:	f002 fa59 	bl	800396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000017c 	.word	0x2000017c

080014c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014cc:	f000 fdd4 	bl	8002078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f002 fe2a 	bl	800415c <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20005000 	.word	0x20005000
 8001534:	00000400 	.word	0x00000400
 8001538:	200000c4 	.word	0x200000c4
 800153c:	20000208 	.word	0x20000208

08001540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <currentCounter>:
#include "timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

int currentCounter(int timer) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <currentCounter+0x1c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000164 	.word	0x20000164

0800156c <isTimerUp>:

int isTimerUp(int timer) {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <isTimerUp+0x24>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	2b01      	cmp	r3, #1
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	20000170 	.word	0x20000170

08001594 <setTimer>:

void setTimer(int timer, int duration){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration / timer_cycle;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <setTimer+0x30>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80015a8:	4907      	ldr	r1, [pc, #28]	; (80015c8 <setTimer+0x34>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <setTimer+0x38>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2100      	movs	r1, #0
 80015b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000010 	.word	0x20000010
 80015c8:	20000164 	.word	0x20000164
 80015cc:	20000170 	.word	0x20000170

080015d0 <timerRun>:
void timerRun(){
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	e01c      	b.n	8001616 <timerRun+0x46>
		if(timer_counter[timer] > 0){
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <timerRun+0x58>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	dd13      	ble.n	8001610 <timerRun+0x40>
			timer_counter[timer]--;
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <timerRun+0x58>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	490d      	ldr	r1, [pc, #52]	; (8001628 <timerRun+0x58>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0) {
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <timerRun+0x58>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d104      	bne.n	8001610 <timerRun+0x40>
				timer_flag[timer] = 1;
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <timerRun+0x5c>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2101      	movs	r1, #1
 800160c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	dddf      	ble.n	80015dc <timerRun+0xc>
			}
		}
	}
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000164 	.word	0x20000164
 800162c:	20000170 	.word	0x20000170

08001630 <sendTimerCounter>:
int count1 = 0;
int count2 = 0;
char str[50];
UART_HandleTypeDef huart2;

void sendTimerCounter() {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	if (count1 != currentCounter(0) / 100) {
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff ff89 	bl	800154c <currentCounter>
 800163a:	4603      	mov	r3, r0
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <sendTimerCounter+0xac>)
 800163e:	fb82 1203 	smull	r1, r2, r2, r3
 8001642:	1152      	asrs	r2, r2, #5
 8001644:	17db      	asrs	r3, r3, #31
 8001646:	1ad2      	subs	r2, r2, r3
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <sendTimerCounter+0xb0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d01a      	beq.n	8001686 <sendTimerCounter+0x56>
	  count1 = currentCounter(0) / 100;
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff ff7b 	bl	800154c <currentCounter>
 8001656:	4603      	mov	r3, r0
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <sendTimerCounter+0xac>)
 800165a:	fb82 1203 	smull	r1, r2, r2, r3
 800165e:	1152      	asrs	r2, r2, #5
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <sendTimerCounter+0xb0>)
 8001666:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "H: ", count1), 100);
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <sendTimerCounter+0xb0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <sendTimerCounter+0xb4>)
 800166e:	491e      	ldr	r1, [pc, #120]	; (80016e8 <sendTimerCounter+0xb8>)
 8001670:	481e      	ldr	r0, [pc, #120]	; (80016ec <sendTimerCounter+0xbc>)
 8001672:	f002 fda5 	bl	80041c0 <siprintf>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	2364      	movs	r3, #100	; 0x64
 800167c:	491b      	ldr	r1, [pc, #108]	; (80016ec <sendTimerCounter+0xbc>)
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <sendTimerCounter+0xc0>)
 8001680:	f002 f8e1 	bl	8003846 <HAL_UART_Transmit>

	else if (count2 != currentCounter(1) / 100) {
	  count2 = currentCounter(1) / 100;
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "L: ", count2), 100);
	}
}
 8001684:	e027      	b.n	80016d6 <sendTimerCounter+0xa6>
	else if (count2 != currentCounter(1) / 100) {
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff ff60 	bl	800154c <currentCounter>
 800168c:	4603      	mov	r3, r0
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <sendTimerCounter+0xac>)
 8001690:	fb82 1203 	smull	r1, r2, r2, r3
 8001694:	1152      	asrs	r2, r2, #5
 8001696:	17db      	asrs	r3, r3, #31
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <sendTimerCounter+0xc4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d019      	beq.n	80016d6 <sendTimerCounter+0xa6>
	  count2 = currentCounter(1) / 100;
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff ff52 	bl	800154c <currentCounter>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <sendTimerCounter+0xac>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1152      	asrs	r2, r2, #5
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <sendTimerCounter+0xc4>)
 80016b8:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "L: ", count2), 100);
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <sendTimerCounter+0xc4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <sendTimerCounter+0xc8>)
 80016c0:	4909      	ldr	r1, [pc, #36]	; (80016e8 <sendTimerCounter+0xb8>)
 80016c2:	480a      	ldr	r0, [pc, #40]	; (80016ec <sendTimerCounter+0xbc>)
 80016c4:	f002 fd7c 	bl	80041c0 <siprintf>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	4907      	ldr	r1, [pc, #28]	; (80016ec <sendTimerCounter+0xbc>)
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <sendTimerCounter+0xc0>)
 80016d2:	f002 f8b8 	bl	8003846 <HAL_UART_Transmit>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	51eb851f 	.word	0x51eb851f
 80016e0:	200000cc 	.word	0x200000cc
 80016e4:	08004a4c 	.word	0x08004a4c
 80016e8:	08004a50 	.word	0x08004a50
 80016ec:	200001c0 	.word	0x200001c0
 80016f0:	2000017c 	.word	0x2000017c
 80016f4:	200000d0 	.word	0x200000d0
 80016f8:	08004a58 	.word	0x08004a58

080016fc <sendTimeDuration>:

void sendTimeDuration() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	switch (mode) {
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <sendTimeDuration+0x10c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d050      	beq.n	80017aa <sendTimeDuration+0xae>
 8001708:	2b08      	cmp	r3, #8
 800170a:	dc73      	bgt.n	80017f4 <sendTimeDuration+0xf8>
 800170c:	2b06      	cmp	r3, #6
 800170e:	d002      	beq.n	8001716 <sendTimeDuration+0x1a>
 8001710:	2b07      	cmp	r3, #7
 8001712:	d025      	beq.n	8001760 <sendTimeDuration+0x64>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Yellow = ", count), 100);
			}
			break;

		default:
			break;
 8001714:	e06e      	b.n	80017f4 <sendTimeDuration+0xf8>
			if (count != RED_time / 1000) {
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <sendTimeDuration+0x110>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <sendTimeDuration+0x114>)
 800171c:	fb82 1203 	smull	r1, r2, r2, r3
 8001720:	1192      	asrs	r2, r2, #6
 8001722:	17db      	asrs	r3, r3, #31
 8001724:	1ad2      	subs	r2, r2, r3
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <sendTimeDuration+0x118>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d064      	beq.n	80017f8 <sendTimeDuration+0xfc>
				count = RED_time / 1000;
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <sendTimeDuration+0x110>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a37      	ldr	r2, [pc, #220]	; (8001810 <sendTimeDuration+0x114>)
 8001734:	fb82 1203 	smull	r1, r2, r2, r3
 8001738:	1192      	asrs	r2, r2, #6
 800173a:	17db      	asrs	r3, r3, #31
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	4a35      	ldr	r2, [pc, #212]	; (8001814 <sendTimeDuration+0x118>)
 8001740:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Red = ", count), 100);
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <sendTimeDuration+0x118>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a34      	ldr	r2, [pc, #208]	; (8001818 <sendTimeDuration+0x11c>)
 8001748:	4934      	ldr	r1, [pc, #208]	; (800181c <sendTimeDuration+0x120>)
 800174a:	4835      	ldr	r0, [pc, #212]	; (8001820 <sendTimeDuration+0x124>)
 800174c:	f002 fd38 	bl	80041c0 <siprintf>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	2364      	movs	r3, #100	; 0x64
 8001756:	4932      	ldr	r1, [pc, #200]	; (8001820 <sendTimeDuration+0x124>)
 8001758:	4832      	ldr	r0, [pc, #200]	; (8001824 <sendTimeDuration+0x128>)
 800175a:	f002 f874 	bl	8003846 <HAL_UART_Transmit>
			break;
 800175e:	e04b      	b.n	80017f8 <sendTimeDuration+0xfc>
			if (count != GREEN_time / 1000) {
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <sendTimeDuration+0x12c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <sendTimeDuration+0x114>)
 8001766:	fb82 1203 	smull	r1, r2, r2, r3
 800176a:	1192      	asrs	r2, r2, #6
 800176c:	17db      	asrs	r3, r3, #31
 800176e:	1ad2      	subs	r2, r2, r3
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <sendTimeDuration+0x118>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d041      	beq.n	80017fc <sendTimeDuration+0x100>
				count = GREEN_time / 1000;
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <sendTimeDuration+0x12c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a24      	ldr	r2, [pc, #144]	; (8001810 <sendTimeDuration+0x114>)
 800177e:	fb82 1203 	smull	r1, r2, r2, r3
 8001782:	1192      	asrs	r2, r2, #6
 8001784:	17db      	asrs	r3, r3, #31
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <sendTimeDuration+0x118>)
 800178a:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Green = ", count), 100);
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <sendTimeDuration+0x118>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <sendTimeDuration+0x130>)
 8001792:	4922      	ldr	r1, [pc, #136]	; (800181c <sendTimeDuration+0x120>)
 8001794:	4822      	ldr	r0, [pc, #136]	; (8001820 <sendTimeDuration+0x124>)
 8001796:	f002 fd13 	bl	80041c0 <siprintf>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	2364      	movs	r3, #100	; 0x64
 80017a0:	491f      	ldr	r1, [pc, #124]	; (8001820 <sendTimeDuration+0x124>)
 80017a2:	4820      	ldr	r0, [pc, #128]	; (8001824 <sendTimeDuration+0x128>)
 80017a4:	f002 f84f 	bl	8003846 <HAL_UART_Transmit>
			break;
 80017a8:	e028      	b.n	80017fc <sendTimeDuration+0x100>
			if (count != YELLOW_time / 1000) {
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <sendTimeDuration+0x134>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <sendTimeDuration+0x114>)
 80017b0:	fb82 1203 	smull	r1, r2, r2, r3
 80017b4:	1192      	asrs	r2, r2, #6
 80017b6:	17db      	asrs	r3, r3, #31
 80017b8:	1ad2      	subs	r2, r2, r3
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <sendTimeDuration+0x118>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d01e      	beq.n	8001800 <sendTimeDuration+0x104>
				count = YELLOW_time / 1000;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <sendTimeDuration+0x134>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <sendTimeDuration+0x114>)
 80017c8:	fb82 1203 	smull	r1, r2, r2, r3
 80017cc:	1192      	asrs	r2, r2, #6
 80017ce:	17db      	asrs	r3, r3, #31
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <sendTimeDuration+0x118>)
 80017d4:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Yellow = ", count), 100);
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <sendTimeDuration+0x118>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <sendTimeDuration+0x138>)
 80017dc:	490f      	ldr	r1, [pc, #60]	; (800181c <sendTimeDuration+0x120>)
 80017de:	4810      	ldr	r0, [pc, #64]	; (8001820 <sendTimeDuration+0x124>)
 80017e0:	f002 fcee 	bl	80041c0 <siprintf>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	2364      	movs	r3, #100	; 0x64
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <sendTimeDuration+0x124>)
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <sendTimeDuration+0x128>)
 80017ee:	f002 f82a 	bl	8003846 <HAL_UART_Transmit>
			break;
 80017f2:	e005      	b.n	8001800 <sendTimeDuration+0x104>
			break;
 80017f4:	bf00      	nop
 80017f6:	e004      	b.n	8001802 <sendTimeDuration+0x106>
			break;
 80017f8:	bf00      	nop
 80017fa:	e002      	b.n	8001802 <sendTimeDuration+0x106>
			break;
 80017fc:	bf00      	nop
 80017fe:	e000      	b.n	8001802 <sendTimeDuration+0x106>
			break;
 8001800:	bf00      	nop
	}
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000c0 	.word	0x200000c0
 800180c:	20000018 	.word	0x20000018
 8001810:	10624dd3 	.word	0x10624dd3
 8001814:	200000c8 	.word	0x200000c8
 8001818:	08004a5c 	.word	0x08004a5c
 800181c:	08004a50 	.word	0x08004a50
 8001820:	200001c0 	.word	0x200001c0
 8001824:	2000017c 	.word	0x2000017c
 8001828:	2000001c 	.word	0x2000001c
 800182c:	08004a64 	.word	0x08004a64
 8001830:	20000020 	.word	0x20000020
 8001834:	08004a70 	.word	0x08004a70

08001838 <sendTimeInc>:

void sendTimeInc() {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	if (count != time_count) {
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <sendTimeInc+0x38>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <sendTimeInc+0x3c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d011      	beq.n	800186c <sendTimeInc+0x34>
		count = time_count;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <sendTimeInc+0x3c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a08      	ldr	r2, [pc, #32]	; (8001870 <sendTimeInc+0x38>)
 800184e:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, str, sprintf(str, "%d\r\n", count), 100);
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <sendTimeInc+0x38>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <sendTimeInc+0x40>)
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <sendTimeInc+0x44>)
 800185a:	f002 fcb1 	bl	80041c0 <siprintf>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	2364      	movs	r3, #100	; 0x64
 8001864:	4905      	ldr	r1, [pc, #20]	; (800187c <sendTimeInc+0x44>)
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <sendTimeInc+0x48>)
 8001868:	f001 ffed 	bl	8003846 <HAL_UART_Transmit>
	}
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200000c8 	.word	0x200000c8
 8001874:	200000bc 	.word	0x200000bc
 8001878:	08004a7c 	.word	0x08004a7c
 800187c:	200001c0 	.word	0x200001c0
 8001880:	2000017c 	.word	0x2000017c

08001884 <Reset_Handler>:
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <LoopFillZerobss+0x12>)
 8001886:	490d      	ldr	r1, [pc, #52]	; (80018bc <LoopFillZerobss+0x16>)
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <LoopFillZerobss+0x1a>)
 800188a:	2300      	movs	r3, #0
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:
 800188e:	58d4      	ldr	r4, [r2, r3]
 8001890:	50c4      	str	r4, [r0, r3]
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:
 8001894:	18c4      	adds	r4, r0, r3
 8001896:	428c      	cmp	r4, r1
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LoopFillZerobss+0x1e>)
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <LoopFillZerobss+0x22>)
 800189e:	2300      	movs	r3, #0
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:
 80018a6:	42a2      	cmp	r2, r4
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>
 80018aa:	f7ff fe49 	bl	8001540 <SystemInit>
 80018ae:	f002 fc5b 	bl	8004168 <__libc_init_array>
 80018b2:	f7ff fb39 	bl	8000f28 <main>
 80018b6:	4770      	bx	lr
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000094 	.word	0x20000094
 80018c0:	08004ae8 	.word	0x08004ae8
 80018c4:	20000094 	.word	0x20000094
 80018c8:	20000208 	.word	0x20000208

080018cc <ADC1_2_IRQHandler>:
 80018cc:	e7fe      	b.n	80018cc <ADC1_2_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_Init+0x28>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_Init+0x28>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 f923 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fcde 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f93b 	bl	8001b96 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f000 f903 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000024 	.word	0x20000024
 8001954:	2000002c 	.word	0x2000002c
 8001958:	20000028 	.word	0x20000028

0800195c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_IncTick+0x1c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x20>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_IncTick+0x20>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	2000002c 	.word	0x2000002c
 800197c:	200001f4 	.word	0x200001f4

08001980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <HAL_GetTick+0x10>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	200001f4 	.word	0x200001f4

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4906      	ldr	r1, [pc, #24]	; (8001a2c <__NVIC_EnableIRQ+0x34>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff90 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff2d 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff42 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff90 	bl	8001a84 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5f 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff35 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d008      	beq.n	8001bd6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e020      	b.n	8001c18 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 020e 	bic.w	r2, r2, #14
 8001be4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d005      	beq.n	8001c46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e051      	b.n	8001cea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 020e 	bic.w	r2, r2, #14
 8001c54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <HAL_DMA_Abort_IT+0xd0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d029      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0xa0>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <HAL_DMA_Abort_IT+0xd4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d022      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x9c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_DMA_Abort_IT+0xd8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d01a      	beq.n	8001cba <HAL_DMA_Abort_IT+0x96>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_DMA_Abort_IT+0xdc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d012      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0x90>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_DMA_Abort_IT+0xe0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00a      	beq.n	8001cae <HAL_DMA_Abort_IT+0x8a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	; (8001d08 <HAL_DMA_Abort_IT+0xe4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d102      	bne.n	8001ca8 <HAL_DMA_Abort_IT+0x84>
 8001ca2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ca6:	e00e      	b.n	8001cc6 <HAL_DMA_Abort_IT+0xa2>
 8001ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cac:	e00b      	b.n	8001cc6 <HAL_DMA_Abort_IT+0xa2>
 8001cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb2:	e008      	b.n	8001cc6 <HAL_DMA_Abort_IT+0xa2>
 8001cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb8:	e005      	b.n	8001cc6 <HAL_DMA_Abort_IT+0xa2>
 8001cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbe:	e002      	b.n	8001cc6 <HAL_DMA_Abort_IT+0xa2>
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	e000      	b.n	8001cc6 <HAL_DMA_Abort_IT+0xa2>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_DMA_Abort_IT+0xe8>)
 8001cc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
    } 
  }
  return status;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40020008 	.word	0x40020008
 8001cf8:	4002001c 	.word	0x4002001c
 8001cfc:	40020030 	.word	0x40020030
 8001d00:	40020044 	.word	0x40020044
 8001d04:	40020058 	.word	0x40020058
 8001d08:	4002006c 	.word	0x4002006c
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e169      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8158 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a9a      	ldr	r2, [pc, #616]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80b1 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4928      	ldr	r1, [pc, #160]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4922      	ldr	r1, [pc, #136]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x2e2>
 8001fae:	bf00      	nop
 8001fb0:	10320000 	.word	0x10320000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	10210000 	.word	0x10210000
 8001fc0:	10120000 	.word	0x10120000
 8001fc4:	10110000 	.word	0x10110000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae8e 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	; 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e001      	b.n	800203a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	807b      	strh	r3, [r7, #2]
 8002052:	4613      	mov	r3, r2
 8002054:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002056:	787b      	ldrb	r3, [r7, #1]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205c:	887a      	ldrh	r2, [r7, #2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002062:	e003      	b.n	800206c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	041a      	lsls	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	611a      	str	r2, [r3, #16]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
	...

08002078 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f806 	bl	80020a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40010400 	.word	0x40010400

080020a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e26c      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8087 	beq.w	80021ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d00c      	beq.n	8002102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e8:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d112      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
 80020f4:	4b8c      	ldr	r3, [pc, #560]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d10b      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002102:	4b89      	ldr	r3, [pc, #548]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d06c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x12c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d168      	bne.n	80021e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e246      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x76>
 8002124:	4b80      	ldr	r3, [pc, #512]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a7f      	ldr	r2, [pc, #508]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e02e      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x98>
 800213a:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7a      	ldr	r2, [pc, #488]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b78      	ldr	r3, [pc, #480]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a77      	ldr	r2, [pc, #476]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0xbc>
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a71      	ldr	r2, [pc, #452]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002178:	4b6b      	ldr	r3, [pc, #428]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6a      	ldr	r2, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b68      	ldr	r3, [pc, #416]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a67      	ldr	r2, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fbf2 	bl	8001980 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fbee 	bl	8001980 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1fa      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xe4>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fbde 	bl	8001980 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fbda 	bl	8001980 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1e6      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x10c>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f6:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d11c      	bne.n	8002248 <HAL_RCC_OscConfig+0x18c>
 800220e:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	4b43      	ldr	r3, [pc, #268]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x176>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1ba      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4939      	ldr	r1, [pc, #228]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e03a      	b.n	80022be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002250:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x270>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fb93 	bl	8001980 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff fb8f 	bl	8001980 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e19b      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4927      	ldr	r1, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_RCC_OscConfig+0x270>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fb72 	bl	8001980 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fb6e 	bl	8001980 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e17a      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03a      	beq.n	8002340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d019      	beq.n	8002306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff fb52 	bl	8001980 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff fb4e 	bl	8001980 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e15a      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022fe:	2001      	movs	r0, #1
 8002300:	f000 fad8 	bl	80028b4 <RCC_Delay>
 8002304:	e01c      	b.n	8002340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7ff fb38 	bl	8001980 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002312:	e00f      	b.n	8002334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff fb34 	bl	8001980 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d908      	bls.n	8002334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e140      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	42420000 	.word	0x42420000
 8002330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b9e      	ldr	r3, [pc, #632]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e9      	bne.n	8002314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a6 	beq.w	800249a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b97      	ldr	r3, [pc, #604]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b94      	ldr	r3, [pc, #592]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a93      	ldr	r2, [pc, #588]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	61d3      	str	r3, [r2, #28]
 800236a:	4b91      	ldr	r3, [pc, #580]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b8e      	ldr	r3, [pc, #568]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d118      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002386:	4b8b      	ldr	r3, [pc, #556]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a8a      	ldr	r2, [pc, #552]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7ff faf5 	bl	8001980 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7ff faf1 	bl	8001980 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0fd      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x312>
 80023c0:	4b7b      	ldr	r3, [pc, #492]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a7a      	ldr	r2, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6213      	str	r3, [r2, #32]
 80023cc:	e02d      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x334>
 80023d6:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a75      	ldr	r2, [pc, #468]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b73      	ldr	r3, [pc, #460]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a72      	ldr	r2, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	e01c      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x356>
 80023f8:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a6c      	ldr	r2, [pc, #432]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a69      	ldr	r2, [pc, #420]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e00b      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 8002412:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a66      	ldr	r2, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a63      	ldr	r2, [pc, #396]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff faa5 	bl	8001980 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff faa1 	bl	8001980 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0ab      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ee      	beq.n	800243a <HAL_RCC_OscConfig+0x37e>
 800245c:	e014      	b.n	8002488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7ff fa8f 	bl	8001980 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff fa8b 	bl	8001980 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e095      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a47      	ldr	r2, [pc, #284]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8081 	beq.w	80025a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d061      	beq.n	8002574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d146      	bne.n	8002546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_OscConfig+0x4fc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7ff fa5f 	bl	8001980 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7ff fa5b 	bl	8001980 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e067      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	492d      	ldr	r1, [pc, #180]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a19      	ldr	r1, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	430b      	orrs	r3, r1
 8002512:	4927      	ldr	r1, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_OscConfig+0x4fc>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff fa2f 	bl	8001980 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fa2b 	bl	8001980 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e037      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x46a>
 8002544:	e02f      	b.n	80025a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCC_OscConfig+0x4fc>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fa18 	bl	8001980 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff fa14 	bl	8001980 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e020      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x498>
 8002572:	e018      	b.n	80025a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e013      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42420060 	.word	0x42420060

080025bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0d0      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4965      	ldr	r1, [pc, #404]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002622:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d040      	beq.n	80026dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d115      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e073      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06b      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4936      	ldr	r1, [pc, #216]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ac:	f7ff f968 	bl	8001980 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7ff f964 	bl	8001980 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e053      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d210      	bcs.n	800270c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4922      	ldr	r1, [pc, #136]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274a:	f000 f821 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1cc>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1d0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f8c6 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40022000 	.word	0x40022000
 8002780:	40021000 	.word	0x40021000
 8002784:	08004a94 	.word	0x08004a94
 8002788:	20000024 	.word	0x20000024
 800278c:	20000028 	.word	0x20000028

08002790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	b490      	push	{r4, r7}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002798:	1d3c      	adds	r4, r7, #4
 800279a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800279c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a0:	f240 2301 	movw	r3, #513	; 0x201
 80027a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x40>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x46>
 80027ce:	e02d      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d2:	623b      	str	r3, [r7, #32]
      break;
 80027d4:	e02d      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e2:	4413      	add	r3, r2
 80027e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c5b      	lsrs	r3, r3, #17
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002802:	4413      	add	r3, r2
 8002804:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002808:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800280e:	fb02 f203 	mul.w	r2, r2, r3
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
 800281a:	e004      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	623b      	str	r3, [r7, #32]
      break;
 800282a:	e002      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282e:	623b      	str	r3, [r7, #32]
      break;
 8002830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002832:	6a3b      	ldr	r3, [r7, #32]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bc90      	pop	{r4, r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	08004a84 	.word	0x08004a84
 8002844:	40021000 	.word	0x40021000
 8002848:	007a1200 	.word	0x007a1200
 800284c:	003d0900 	.word	0x003d0900

08002850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b02      	ldr	r3, [pc, #8]	; (8002860 <HAL_RCC_GetHCLKFreq+0x10>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000024 	.word	0x20000024

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff2 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	08004aa4 	.word	0x08004aa4

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffde 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0adb      	lsrs	r3, r3, #11
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004aa4 	.word	0x08004aa4

080028b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <RCC_Delay+0x34>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <RCC_Delay+0x38>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0a5b      	lsrs	r3, r3, #9
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d0:	bf00      	nop
  }
  while (Delay --);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	60fa      	str	r2, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <RCC_Delay+0x1c>
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	20000024 	.word	0x20000024
 80028ec:	10624dd3 	.word	0x10624dd3

080028f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e041      	b.n	8002986 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fcfa 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f000 fc28 	bl	8003184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e03a      	b.n	8002a1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_TIM_Base_Start_IT+0x98>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00e      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x58>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d009      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x58>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_TIM_Base_Start_IT+0x9c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x58>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <HAL_TIM_Base_Start_IT+0xa0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d010      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	e007      	b.n	8002a1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800

08002a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e041      	b.n	8002aca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f839 	bl	8002ad2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 fb86 	bl	8003184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_TIM_PWM_Start+0x24>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e022      	b.n	8002b4e <HAL_TIM_PWM_Start+0x6a>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d109      	bne.n	8002b22 <HAL_TIM_PWM_Start+0x3e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e015      	b.n	8002b4e <HAL_TIM_PWM_Start+0x6a>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start+0x58>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e008      	b.n	8002b4e <HAL_TIM_PWM_Start+0x6a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e05e      	b.n	8002c14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x82>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b64:	e013      	b.n	8002b8e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0x92>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b74:	e00b      	b.n	8002b8e <HAL_TIM_PWM_Start+0xaa>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_PWM_Start+0xa2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b84:	e003      	b.n	8002b8e <HAL_TIM_PWM_Start+0xaa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2201      	movs	r2, #1
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fd74 	bl	8003684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_TIM_PWM_Start+0x138>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_TIM_PWM_Start+0x138>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_TIM_PWM_Start+0xfa>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d009      	beq.n	8002bde <HAL_TIM_PWM_Start+0xfa>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_TIM_PWM_Start+0x13c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIM_PWM_Start+0xfa>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <HAL_TIM_PWM_Start+0x140>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d111      	bne.n	8002c02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d010      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c00:	e007      	b.n	8002c12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800

08002c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d122      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d11b      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0202 	mvn.w	r2, #2
 8002c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa6f 	bl	800314e <HAL_TIM_IC_CaptureCallback>
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa62 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fa71 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0204 	mvn.w	r2, #4
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa45 	bl	800314e <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa38 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fa47 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0208 	mvn.w	r2, #8
 8002cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2204      	movs	r2, #4
 8002d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa1b 	bl	800314e <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa0e 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa1d 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0210 	mvn.w	r2, #16
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2208      	movs	r2, #8
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9f1 	bl	800314e <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f9e4 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f9f3 	bl	8003160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0201 	mvn.w	r2, #1
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe fa6e 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fce1 	bl	800379a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d10e      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d107      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9b7 	bl	8003172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d10e      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0220 	mvn.w	r2, #32
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fcac 	bl	8003788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0ac      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	f200 809f 	bhi.w	8002fa0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002fa1 	.word	0x08002fa1
 8002e70:	08002fa1 	.word	0x08002fa1
 8002e74:	08002fa1 	.word	0x08002fa1
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	08002fa1 	.word	0x08002fa1
 8002e80:	08002fa1 	.word	0x08002fa1
 8002e84:	08002fa1 	.word	0x08002fa1
 8002e88:	08002f1f 	.word	0x08002f1f
 8002e8c:	08002fa1 	.word	0x08002fa1
 8002e90:	08002fa1 	.word	0x08002fa1
 8002e94:	08002fa1 	.word	0x08002fa1
 8002e98:	08002f5f 	.word	0x08002f5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f9d0 	bl	8003248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0204 	bic.w	r2, r2, #4
 8002ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6999      	ldr	r1, [r3, #24]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	619a      	str	r2, [r3, #24]
      break;
 8002eda:	e062      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fa16 	bl	8003314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	619a      	str	r2, [r3, #24]
      break;
 8002f1c:	e041      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fa5f 	bl	80033e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0208 	orr.w	r2, r2, #8
 8002f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0204 	bic.w	r2, r2, #4
 8002f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
      break;
 8002f5c:	e021      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 faa9 	bl	80034bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69d9      	ldr	r1, [r3, #28]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	021a      	lsls	r2, r3, #8
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	61da      	str	r2, [r3, #28]
      break;
 8002f9e:	e000      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002fa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIM_ConfigClockSource+0x18>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e0b3      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x180>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003004:	d03e      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0xd0>
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300a:	f200 8087 	bhi.w	800311c <HAL_TIM_ConfigClockSource+0x168>
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	f000 8085 	beq.w	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d87f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b70      	cmp	r3, #112	; 0x70
 800301e:	d01a      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xa2>
 8003020:	2b70      	cmp	r3, #112	; 0x70
 8003022:	d87b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b60      	cmp	r3, #96	; 0x60
 8003026:	d050      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x116>
 8003028:	2b60      	cmp	r3, #96	; 0x60
 800302a:	d877      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b50      	cmp	r3, #80	; 0x50
 800302e:	d03c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xf6>
 8003030:	2b50      	cmp	r3, #80	; 0x50
 8003032:	d873      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d058      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x136>
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d86f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x168>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d064      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x156>
 8003040:	2b30      	cmp	r3, #48	; 0x30
 8003042:	d86b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x168>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d060      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x156>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d867      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x168>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x156>
 8003050:	2b10      	cmp	r3, #16
 8003052:	d05a      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003054:	e062      	b.n	800311c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f000 faee 	bl	8003646 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003078:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	609a      	str	r2, [r3, #8]
      break;
 8003082:	e04e      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f000 fad7 	bl	8003646 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a6:	609a      	str	r2, [r3, #8]
      break;
 80030a8:	e03b      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 fa4e 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2150      	movs	r1, #80	; 0x50
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 faa5 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 80030c8:	e02b      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fa6c 	bl	80035b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2160      	movs	r1, #96	; 0x60
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fa95 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 80030e8:	e01b      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 fa2e 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2140      	movs	r1, #64	; 0x40
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fa85 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 8003108:	e00b      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f000 fa7c 	bl	8003612 <TIM_ITRx_SetConfig>
        break;
 800311a:	e002      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800311c:	bf00      	nop
 800311e:	e000      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003120:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a29      	ldr	r2, [pc, #164]	; (800323c <TIM_Base_SetConfig+0xb8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d007      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a26      	ldr	r2, [pc, #152]	; (8003240 <TIM_Base_SetConfig+0xbc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a25      	ldr	r2, [pc, #148]	; (8003244 <TIM_Base_SetConfig+0xc0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <TIM_Base_SetConfig+0xb8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <TIM_Base_SetConfig+0xbc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a18      	ldr	r2, [pc, #96]	; (8003244 <TIM_Base_SetConfig+0xc0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <TIM_Base_SetConfig+0xb8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800

08003248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f023 0201 	bic.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f023 0302 	bic.w	r3, r3, #2
 8003290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <TIM_OC1_SetConfig+0xc8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10c      	bne.n	80032be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0308 	bic.w	r3, r3, #8
 80032aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f023 0304 	bic.w	r3, r3, #4
 80032bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a13      	ldr	r2, [pc, #76]	; (8003310 <TIM_OC1_SetConfig+0xc8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d111      	bne.n	80032ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40012c00 	.word	0x40012c00

08003314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0210 	bic.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0320 	bic.w	r3, r3, #32
 800335e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <TIM_OC2_SetConfig+0xd0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10d      	bne.n	8003390 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800337a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800338e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <TIM_OC2_SetConfig+0xd0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d113      	bne.n	80033c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800339e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	40012c00 	.word	0x40012c00

080033e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <TIM_OC3_SetConfig+0xd0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10d      	bne.n	8003462 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800344c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <TIM_OC3_SetConfig+0xd0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d113      	bne.n	8003492 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40012c00 	.word	0x40012c00

080034bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	031b      	lsls	r3, r3, #12
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <TIM_OC4_SetConfig+0x98>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d109      	bne.n	8003530 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	019b      	lsls	r3, r3, #6
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00

08003558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 030a 	bic.w	r3, r3, #10
 8003594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f023 0210 	bic.w	r2, r3, #16
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	031b      	lsls	r3, r3, #12
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	f043 0307 	orr.w	r3, r3, #7
 8003634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003646:	b480      	push	{r7}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2201      	movs	r2, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e046      	b.n	8003772 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003730:	d009      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a10      	ldr	r2, [pc, #64]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d10c      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4313      	orrs	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800

08003788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e03f      	b.n	800383e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd fdf4 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	; 0x24
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fc25 	bl	8004040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b08a      	sub	sp, #40	; 0x28
 800384a:	af02      	add	r7, sp, #8
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	d17c      	bne.n	8003960 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_UART_Transmit+0x2c>
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e075      	b.n	8003962 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_UART_Transmit+0x3e>
 8003880:	2302      	movs	r3, #2
 8003882:	e06e      	b.n	8003962 <HAL_UART_Transmit+0x11c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2221      	movs	r2, #33	; 0x21
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389a:	f7fe f871 	bl	8001980 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Transmit+0x82>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038d8:	e02a      	b.n	8003930 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fa11 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e036      	b.n	8003962 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e007      	b.n	8003922 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1cf      	bne.n	80038da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f9e1 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e006      	b.n	8003962 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_UART_IRQHandler+0x52>
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa99 	bl	8003eee <UART_Receive_IT>
      return;
 80039bc:	e17b      	b.n	8003cb6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80b1 	beq.w	8003b28 <HAL_UART_IRQHandler+0x1bc>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_UART_IRQHandler+0x70>
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80a6 	beq.w	8003b28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_UART_IRQHandler+0x90>
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_UART_IRQHandler+0xb0>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f043 0202 	orr.w	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_UART_IRQHandler+0xd0>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00f      	beq.n	8003a66 <HAL_UART_IRQHandler+0xfa>
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <HAL_UART_IRQHandler+0xee>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f043 0208 	orr.w	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 811e 	beq.w	8003cac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <HAL_UART_IRQHandler+0x11e>
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa32 	bl	8003eee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x146>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d031      	beq.n	8003b16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f974 	bl	8003da0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d023      	beq.n	8003b0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_UART_IRQHandler+0x350>)
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe f89a 	bl	8001c24 <HAL_DMA_Abort_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b00:	4610      	mov	r0, r2
 8003b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00e      	b.n	8003b24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8ec 	bl	8003ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e00a      	b.n	8003b24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8e8 	bl	8003ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e006      	b.n	8003b24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8e4 	bl	8003ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b22:	e0c3      	b.n	8003cac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	bf00      	nop
    return;
 8003b26:	e0c1      	b.n	8003cac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	f040 80a1 	bne.w	8003c74 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 809b 	beq.w	8003c74 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8095 	beq.w	8003c74 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d04e      	beq.n	8003c0c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b78:	8a3b      	ldrh	r3, [r7, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8098 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b84:	8a3a      	ldrh	r2, [r7, #16]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	f080 8092 	bcs.w	8003cb0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8a3a      	ldrh	r2, [r7, #16]
 8003b90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d02b      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003baa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0210 	bic.w	r2, r2, #16
 8003be8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd ffdd 	bl	8001bae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f876 	bl	8003cf6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c0a:	e051      	b.n	8003cb0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d047      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c24:	8a7b      	ldrh	r3, [r7, #18]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d044      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c38:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0210 	bic.w	r2, r2, #16
 8003c66:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c68:	8a7b      	ldrh	r3, [r7, #18]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f842 	bl	8003cf6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c72:	e01f      	b.n	8003cb4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_UART_IRQHandler+0x324>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f8c9 	bl	8003e20 <UART_Transmit_IT>
    return;
 8003c8e:	e012      	b.n	8003cb6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x34a>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f90a 	bl	8003ebe <UART_EndTransmit_IT>
    return;
 8003caa:	e004      	b.n	8003cb6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003cac:	bf00      	nop
 8003cae:	e002      	b.n	8003cb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003cb0:	bf00      	nop
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003cb4:	bf00      	nop
  }
}
 8003cb6:	3728      	adds	r7, #40	; 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	08003df9 	.word	0x08003df9

08003cc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1c:	e02c      	b.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d028      	beq.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2c:	f7fd fe28 	bl	8001980 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d21d      	bcs.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e00f      	b.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d0c3      	beq.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003db6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d107      	bne.n	8003de0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0210 	bic.w	r2, r2, #16
 8003dde:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff ff66 	bl	8003ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b21      	cmp	r3, #33	; 0x21
 8003e32:	d13e      	bne.n	8003eb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d114      	bne.n	8003e68 <UART_Transmit_IT+0x48>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d110      	bne.n	8003e68 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	1c9a      	adds	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]
 8003e66:	e008      	b.n	8003e7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6211      	str	r1, [r2, #32]
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4619      	mov	r1, r3
 8003e88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff feee 	bl	8003cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b22      	cmp	r3, #34	; 0x22
 8003f00:	f040 8099 	bne.w	8004036 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0c:	d117      	bne.n	8003f3e <UART_Receive_IT+0x50>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	1c9a      	adds	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f3c:	e026      	b.n	8003f8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	d007      	beq.n	8003f62 <UART_Receive_IT+0x74>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <UART_Receive_IT+0x82>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e008      	b.n	8003f82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d148      	bne.n	8004032 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0220 	bic.w	r2, r2, #32
 8003fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d123      	bne.n	8004028 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0210 	bic.w	r2, r2, #16
 8003ff4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d10a      	bne.n	800401a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff fe68 	bl	8003cf6 <HAL_UARTEx_RxEventCallback>
 8004026:	e002      	b.n	800402e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fe52 	bl	8003cd2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e002      	b.n	8004038 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800407a:	f023 030c 	bic.w	r3, r3, #12
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	430b      	orrs	r3, r1
 8004086:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <UART_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d103      	bne.n	80040b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040a8:	f7fe fbf0 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	e002      	b.n	80040b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040b0:	f7fe fbd8 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 80040b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009a      	lsls	r2, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	4a22      	ldr	r2, [pc, #136]	; (8004158 <UART_SetConfig+0x118>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	0119      	lsls	r1, r3, #4
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009a      	lsls	r2, r3, #2
 80040e0:	441a      	add	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <UART_SetConfig+0x118>)
 80040ee:	fba3 0302 	umull	r0, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2064      	movs	r0, #100	; 0x64
 80040f6:	fb00 f303 	mul.w	r3, r0, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	3332      	adds	r3, #50	; 0x32
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <UART_SetConfig+0x118>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410c:	4419      	add	r1, r3
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009a      	lsls	r2, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	fbb2 f2f3 	udiv	r2, r2, r3
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <UART_SetConfig+0x118>)
 8004126:	fba3 0302 	umull	r0, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2064      	movs	r0, #100	; 0x64
 800412e:	fb00 f303 	mul.w	r3, r0, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	3332      	adds	r3, #50	; 0x32
 8004138:	4a07      	ldr	r2, [pc, #28]	; (8004158 <UART_SetConfig+0x118>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	440a      	add	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40013800 	.word	0x40013800
 8004158:	51eb851f 	.word	0x51eb851f

0800415c <__errno>:
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <__errno+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000030 	.word	0x20000030

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	2600      	movs	r6, #0
 800416c:	4d0c      	ldr	r5, [pc, #48]	; (80041a0 <__libc_init_array+0x38>)
 800416e:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	f000 fc5c 	bl	8004a34 <_init>
 800417c:	2600      	movs	r6, #0
 800417e:	4d0a      	ldr	r5, [pc, #40]	; (80041a8 <__libc_init_array+0x40>)
 8004180:	4c0a      	ldr	r4, [pc, #40]	; (80041ac <__libc_init_array+0x44>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f855 3b04 	ldr.w	r3, [r5], #4
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004ae0 	.word	0x08004ae0
 80041a4:	08004ae0 	.word	0x08004ae0
 80041a8:	08004ae0 	.word	0x08004ae0
 80041ac:	08004ae4 	.word	0x08004ae4

080041b0 <memset>:
 80041b0:	4603      	mov	r3, r0
 80041b2:	4402      	add	r2, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d100      	bne.n	80041ba <memset+0xa>
 80041b8:	4770      	bx	lr
 80041ba:	f803 1b01 	strb.w	r1, [r3], #1
 80041be:	e7f9      	b.n	80041b4 <memset+0x4>

080041c0 <siprintf>:
 80041c0:	b40e      	push	{r1, r2, r3}
 80041c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041c6:	b500      	push	{lr}
 80041c8:	b09c      	sub	sp, #112	; 0x70
 80041ca:	ab1d      	add	r3, sp, #116	; 0x74
 80041cc:	9002      	str	r0, [sp, #8]
 80041ce:	9006      	str	r0, [sp, #24]
 80041d0:	9107      	str	r1, [sp, #28]
 80041d2:	9104      	str	r1, [sp, #16]
 80041d4:	4808      	ldr	r0, [pc, #32]	; (80041f8 <siprintf+0x38>)
 80041d6:	4909      	ldr	r1, [pc, #36]	; (80041fc <siprintf+0x3c>)
 80041d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041dc:	9105      	str	r1, [sp, #20]
 80041de:	6800      	ldr	r0, [r0, #0]
 80041e0:	a902      	add	r1, sp, #8
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	f000 f868 	bl	80042b8 <_svfiprintf_r>
 80041e8:	2200      	movs	r2, #0
 80041ea:	9b02      	ldr	r3, [sp, #8]
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	b01c      	add	sp, #112	; 0x70
 80041f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f4:	b003      	add	sp, #12
 80041f6:	4770      	bx	lr
 80041f8:	20000030 	.word	0x20000030
 80041fc:	ffff0208 	.word	0xffff0208

08004200 <__ssputs_r>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	688e      	ldr	r6, [r1, #8]
 8004206:	4682      	mov	sl, r0
 8004208:	429e      	cmp	r6, r3
 800420a:	460c      	mov	r4, r1
 800420c:	4690      	mov	r8, r2
 800420e:	461f      	mov	r7, r3
 8004210:	d838      	bhi.n	8004284 <__ssputs_r+0x84>
 8004212:	898a      	ldrh	r2, [r1, #12]
 8004214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004218:	d032      	beq.n	8004280 <__ssputs_r+0x80>
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	6909      	ldr	r1, [r1, #16]
 800421e:	3301      	adds	r3, #1
 8004220:	eba5 0901 	sub.w	r9, r5, r1
 8004224:	6965      	ldr	r5, [r4, #20]
 8004226:	444b      	add	r3, r9
 8004228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800422c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004230:	106d      	asrs	r5, r5, #1
 8004232:	429d      	cmp	r5, r3
 8004234:	bf38      	it	cc
 8004236:	461d      	movcc	r5, r3
 8004238:	0553      	lsls	r3, r2, #21
 800423a:	d531      	bpl.n	80042a0 <__ssputs_r+0xa0>
 800423c:	4629      	mov	r1, r5
 800423e:	f000 fb53 	bl	80048e8 <_malloc_r>
 8004242:	4606      	mov	r6, r0
 8004244:	b950      	cbnz	r0, 800425c <__ssputs_r+0x5c>
 8004246:	230c      	movs	r3, #12
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	f8ca 3000 	str.w	r3, [sl]
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004256:	81a3      	strh	r3, [r4, #12]
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	464a      	mov	r2, r9
 800425e:	6921      	ldr	r1, [r4, #16]
 8004260:	f000 face 	bl	8004800 <memcpy>
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	81a3      	strh	r3, [r4, #12]
 8004270:	6126      	str	r6, [r4, #16]
 8004272:	444e      	add	r6, r9
 8004274:	6026      	str	r6, [r4, #0]
 8004276:	463e      	mov	r6, r7
 8004278:	6165      	str	r5, [r4, #20]
 800427a:	eba5 0509 	sub.w	r5, r5, r9
 800427e:	60a5      	str	r5, [r4, #8]
 8004280:	42be      	cmp	r6, r7
 8004282:	d900      	bls.n	8004286 <__ssputs_r+0x86>
 8004284:	463e      	mov	r6, r7
 8004286:	4632      	mov	r2, r6
 8004288:	4641      	mov	r1, r8
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	f000 fac6 	bl	800481c <memmove>
 8004290:	68a3      	ldr	r3, [r4, #8]
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	1b9b      	subs	r3, r3, r6
 8004296:	4432      	add	r2, r6
 8004298:	2000      	movs	r0, #0
 800429a:	60a3      	str	r3, [r4, #8]
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	e7db      	b.n	8004258 <__ssputs_r+0x58>
 80042a0:	462a      	mov	r2, r5
 80042a2:	f000 fb7b 	bl	800499c <_realloc_r>
 80042a6:	4606      	mov	r6, r0
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d1e1      	bne.n	8004270 <__ssputs_r+0x70>
 80042ac:	4650      	mov	r0, sl
 80042ae:	6921      	ldr	r1, [r4, #16]
 80042b0:	f000 face 	bl	8004850 <_free_r>
 80042b4:	e7c7      	b.n	8004246 <__ssputs_r+0x46>
	...

080042b8 <_svfiprintf_r>:
 80042b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	4698      	mov	r8, r3
 80042be:	898b      	ldrh	r3, [r1, #12]
 80042c0:	4607      	mov	r7, r0
 80042c2:	061b      	lsls	r3, r3, #24
 80042c4:	460d      	mov	r5, r1
 80042c6:	4614      	mov	r4, r2
 80042c8:	b09d      	sub	sp, #116	; 0x74
 80042ca:	d50e      	bpl.n	80042ea <_svfiprintf_r+0x32>
 80042cc:	690b      	ldr	r3, [r1, #16]
 80042ce:	b963      	cbnz	r3, 80042ea <_svfiprintf_r+0x32>
 80042d0:	2140      	movs	r1, #64	; 0x40
 80042d2:	f000 fb09 	bl	80048e8 <_malloc_r>
 80042d6:	6028      	str	r0, [r5, #0]
 80042d8:	6128      	str	r0, [r5, #16]
 80042da:	b920      	cbnz	r0, 80042e6 <_svfiprintf_r+0x2e>
 80042dc:	230c      	movs	r3, #12
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	e0d1      	b.n	800448a <_svfiprintf_r+0x1d2>
 80042e6:	2340      	movs	r3, #64	; 0x40
 80042e8:	616b      	str	r3, [r5, #20]
 80042ea:	2300      	movs	r3, #0
 80042ec:	9309      	str	r3, [sp, #36]	; 0x24
 80042ee:	2320      	movs	r3, #32
 80042f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042f4:	2330      	movs	r3, #48	; 0x30
 80042f6:	f04f 0901 	mov.w	r9, #1
 80042fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80042fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044a4 <_svfiprintf_r+0x1ec>
 8004302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004306:	4623      	mov	r3, r4
 8004308:	469a      	mov	sl, r3
 800430a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800430e:	b10a      	cbz	r2, 8004314 <_svfiprintf_r+0x5c>
 8004310:	2a25      	cmp	r2, #37	; 0x25
 8004312:	d1f9      	bne.n	8004308 <_svfiprintf_r+0x50>
 8004314:	ebba 0b04 	subs.w	fp, sl, r4
 8004318:	d00b      	beq.n	8004332 <_svfiprintf_r+0x7a>
 800431a:	465b      	mov	r3, fp
 800431c:	4622      	mov	r2, r4
 800431e:	4629      	mov	r1, r5
 8004320:	4638      	mov	r0, r7
 8004322:	f7ff ff6d 	bl	8004200 <__ssputs_r>
 8004326:	3001      	adds	r0, #1
 8004328:	f000 80aa 	beq.w	8004480 <_svfiprintf_r+0x1c8>
 800432c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800432e:	445a      	add	r2, fp
 8004330:	9209      	str	r2, [sp, #36]	; 0x24
 8004332:	f89a 3000 	ldrb.w	r3, [sl]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80a2 	beq.w	8004480 <_svfiprintf_r+0x1c8>
 800433c:	2300      	movs	r3, #0
 800433e:	f04f 32ff 	mov.w	r2, #4294967295
 8004342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004346:	f10a 0a01 	add.w	sl, sl, #1
 800434a:	9304      	str	r3, [sp, #16]
 800434c:	9307      	str	r3, [sp, #28]
 800434e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004352:	931a      	str	r3, [sp, #104]	; 0x68
 8004354:	4654      	mov	r4, sl
 8004356:	2205      	movs	r2, #5
 8004358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435c:	4851      	ldr	r0, [pc, #324]	; (80044a4 <_svfiprintf_r+0x1ec>)
 800435e:	f000 fa41 	bl	80047e4 <memchr>
 8004362:	9a04      	ldr	r2, [sp, #16]
 8004364:	b9d8      	cbnz	r0, 800439e <_svfiprintf_r+0xe6>
 8004366:	06d0      	lsls	r0, r2, #27
 8004368:	bf44      	itt	mi
 800436a:	2320      	movmi	r3, #32
 800436c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004370:	0711      	lsls	r1, r2, #28
 8004372:	bf44      	itt	mi
 8004374:	232b      	movmi	r3, #43	; 0x2b
 8004376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800437a:	f89a 3000 	ldrb.w	r3, [sl]
 800437e:	2b2a      	cmp	r3, #42	; 0x2a
 8004380:	d015      	beq.n	80043ae <_svfiprintf_r+0xf6>
 8004382:	4654      	mov	r4, sl
 8004384:	2000      	movs	r0, #0
 8004386:	f04f 0c0a 	mov.w	ip, #10
 800438a:	9a07      	ldr	r2, [sp, #28]
 800438c:	4621      	mov	r1, r4
 800438e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004392:	3b30      	subs	r3, #48	; 0x30
 8004394:	2b09      	cmp	r3, #9
 8004396:	d94e      	bls.n	8004436 <_svfiprintf_r+0x17e>
 8004398:	b1b0      	cbz	r0, 80043c8 <_svfiprintf_r+0x110>
 800439a:	9207      	str	r2, [sp, #28]
 800439c:	e014      	b.n	80043c8 <_svfiprintf_r+0x110>
 800439e:	eba0 0308 	sub.w	r3, r0, r8
 80043a2:	fa09 f303 	lsl.w	r3, r9, r3
 80043a6:	4313      	orrs	r3, r2
 80043a8:	46a2      	mov	sl, r4
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	e7d2      	b.n	8004354 <_svfiprintf_r+0x9c>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	1d19      	adds	r1, r3, #4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	9103      	str	r1, [sp, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bfbb      	ittet	lt
 80043ba:	425b      	neglt	r3, r3
 80043bc:	f042 0202 	orrlt.w	r2, r2, #2
 80043c0:	9307      	strge	r3, [sp, #28]
 80043c2:	9307      	strlt	r3, [sp, #28]
 80043c4:	bfb8      	it	lt
 80043c6:	9204      	strlt	r2, [sp, #16]
 80043c8:	7823      	ldrb	r3, [r4, #0]
 80043ca:	2b2e      	cmp	r3, #46	; 0x2e
 80043cc:	d10c      	bne.n	80043e8 <_svfiprintf_r+0x130>
 80043ce:	7863      	ldrb	r3, [r4, #1]
 80043d0:	2b2a      	cmp	r3, #42	; 0x2a
 80043d2:	d135      	bne.n	8004440 <_svfiprintf_r+0x188>
 80043d4:	9b03      	ldr	r3, [sp, #12]
 80043d6:	3402      	adds	r4, #2
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	9203      	str	r2, [sp, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bfb8      	it	lt
 80043e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80043e6:	9305      	str	r3, [sp, #20]
 80043e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044b4 <_svfiprintf_r+0x1fc>
 80043ec:	2203      	movs	r2, #3
 80043ee:	4650      	mov	r0, sl
 80043f0:	7821      	ldrb	r1, [r4, #0]
 80043f2:	f000 f9f7 	bl	80047e4 <memchr>
 80043f6:	b140      	cbz	r0, 800440a <_svfiprintf_r+0x152>
 80043f8:	2340      	movs	r3, #64	; 0x40
 80043fa:	eba0 000a 	sub.w	r0, r0, sl
 80043fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004402:	9b04      	ldr	r3, [sp, #16]
 8004404:	3401      	adds	r4, #1
 8004406:	4303      	orrs	r3, r0
 8004408:	9304      	str	r3, [sp, #16]
 800440a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440e:	2206      	movs	r2, #6
 8004410:	4825      	ldr	r0, [pc, #148]	; (80044a8 <_svfiprintf_r+0x1f0>)
 8004412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004416:	f000 f9e5 	bl	80047e4 <memchr>
 800441a:	2800      	cmp	r0, #0
 800441c:	d038      	beq.n	8004490 <_svfiprintf_r+0x1d8>
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <_svfiprintf_r+0x1f4>)
 8004420:	bb1b      	cbnz	r3, 800446a <_svfiprintf_r+0x1b2>
 8004422:	9b03      	ldr	r3, [sp, #12]
 8004424:	3307      	adds	r3, #7
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	3308      	adds	r3, #8
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004430:	4433      	add	r3, r6
 8004432:	9309      	str	r3, [sp, #36]	; 0x24
 8004434:	e767      	b.n	8004306 <_svfiprintf_r+0x4e>
 8004436:	460c      	mov	r4, r1
 8004438:	2001      	movs	r0, #1
 800443a:	fb0c 3202 	mla	r2, ip, r2, r3
 800443e:	e7a5      	b.n	800438c <_svfiprintf_r+0xd4>
 8004440:	2300      	movs	r3, #0
 8004442:	f04f 0c0a 	mov.w	ip, #10
 8004446:	4619      	mov	r1, r3
 8004448:	3401      	adds	r4, #1
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	4620      	mov	r0, r4
 800444e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004452:	3a30      	subs	r2, #48	; 0x30
 8004454:	2a09      	cmp	r2, #9
 8004456:	d903      	bls.n	8004460 <_svfiprintf_r+0x1a8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0c5      	beq.n	80043e8 <_svfiprintf_r+0x130>
 800445c:	9105      	str	r1, [sp, #20]
 800445e:	e7c3      	b.n	80043e8 <_svfiprintf_r+0x130>
 8004460:	4604      	mov	r4, r0
 8004462:	2301      	movs	r3, #1
 8004464:	fb0c 2101 	mla	r1, ip, r1, r2
 8004468:	e7f0      	b.n	800444c <_svfiprintf_r+0x194>
 800446a:	ab03      	add	r3, sp, #12
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	462a      	mov	r2, r5
 8004470:	4638      	mov	r0, r7
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <_svfiprintf_r+0x1f8>)
 8004474:	a904      	add	r1, sp, #16
 8004476:	f3af 8000 	nop.w
 800447a:	1c42      	adds	r2, r0, #1
 800447c:	4606      	mov	r6, r0
 800447e:	d1d6      	bne.n	800442e <_svfiprintf_r+0x176>
 8004480:	89ab      	ldrh	r3, [r5, #12]
 8004482:	065b      	lsls	r3, r3, #25
 8004484:	f53f af2c 	bmi.w	80042e0 <_svfiprintf_r+0x28>
 8004488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800448a:	b01d      	add	sp, #116	; 0x74
 800448c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004490:	ab03      	add	r3, sp, #12
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	462a      	mov	r2, r5
 8004496:	4638      	mov	r0, r7
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <_svfiprintf_r+0x1f8>)
 800449a:	a904      	add	r1, sp, #16
 800449c:	f000 f87c 	bl	8004598 <_printf_i>
 80044a0:	e7eb      	b.n	800447a <_svfiprintf_r+0x1c2>
 80044a2:	bf00      	nop
 80044a4:	08004aac 	.word	0x08004aac
 80044a8:	08004ab6 	.word	0x08004ab6
 80044ac:	00000000 	.word	0x00000000
 80044b0:	08004201 	.word	0x08004201
 80044b4:	08004ab2 	.word	0x08004ab2

080044b8 <_printf_common>:
 80044b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	4616      	mov	r6, r2
 80044be:	4699      	mov	r9, r3
 80044c0:	688a      	ldr	r2, [r1, #8]
 80044c2:	690b      	ldr	r3, [r1, #16]
 80044c4:	4607      	mov	r7, r0
 80044c6:	4293      	cmp	r3, r2
 80044c8:	bfb8      	it	lt
 80044ca:	4613      	movlt	r3, r2
 80044cc:	6033      	str	r3, [r6, #0]
 80044ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044d2:	460c      	mov	r4, r1
 80044d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d8:	b10a      	cbz	r2, 80044de <_printf_common+0x26>
 80044da:	3301      	adds	r3, #1
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	0699      	lsls	r1, r3, #26
 80044e2:	bf42      	ittt	mi
 80044e4:	6833      	ldrmi	r3, [r6, #0]
 80044e6:	3302      	addmi	r3, #2
 80044e8:	6033      	strmi	r3, [r6, #0]
 80044ea:	6825      	ldr	r5, [r4, #0]
 80044ec:	f015 0506 	ands.w	r5, r5, #6
 80044f0:	d106      	bne.n	8004500 <_printf_common+0x48>
 80044f2:	f104 0a19 	add.w	sl, r4, #25
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	6832      	ldr	r2, [r6, #0]
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	dc28      	bgt.n	8004552 <_printf_common+0x9a>
 8004500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004504:	1e13      	subs	r3, r2, #0
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	bf18      	it	ne
 800450a:	2301      	movne	r3, #1
 800450c:	0692      	lsls	r2, r2, #26
 800450e:	d42d      	bmi.n	800456c <_printf_common+0xb4>
 8004510:	4649      	mov	r1, r9
 8004512:	4638      	mov	r0, r7
 8004514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004518:	47c0      	blx	r8
 800451a:	3001      	adds	r0, #1
 800451c:	d020      	beq.n	8004560 <_printf_common+0xa8>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	68e5      	ldr	r5, [r4, #12]
 8004522:	f003 0306 	and.w	r3, r3, #6
 8004526:	2b04      	cmp	r3, #4
 8004528:	bf18      	it	ne
 800452a:	2500      	movne	r5, #0
 800452c:	6832      	ldr	r2, [r6, #0]
 800452e:	f04f 0600 	mov.w	r6, #0
 8004532:	68a3      	ldr	r3, [r4, #8]
 8004534:	bf08      	it	eq
 8004536:	1aad      	subeq	r5, r5, r2
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	bf08      	it	eq
 800453c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004540:	4293      	cmp	r3, r2
 8004542:	bfc4      	itt	gt
 8004544:	1a9b      	subgt	r3, r3, r2
 8004546:	18ed      	addgt	r5, r5, r3
 8004548:	341a      	adds	r4, #26
 800454a:	42b5      	cmp	r5, r6
 800454c:	d11a      	bne.n	8004584 <_printf_common+0xcc>
 800454e:	2000      	movs	r0, #0
 8004550:	e008      	b.n	8004564 <_printf_common+0xac>
 8004552:	2301      	movs	r3, #1
 8004554:	4652      	mov	r2, sl
 8004556:	4649      	mov	r1, r9
 8004558:	4638      	mov	r0, r7
 800455a:	47c0      	blx	r8
 800455c:	3001      	adds	r0, #1
 800455e:	d103      	bne.n	8004568 <_printf_common+0xb0>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	3501      	adds	r5, #1
 800456a:	e7c4      	b.n	80044f6 <_printf_common+0x3e>
 800456c:	2030      	movs	r0, #48	; 0x30
 800456e:	18e1      	adds	r1, r4, r3
 8004570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800457a:	4422      	add	r2, r4
 800457c:	3302      	adds	r3, #2
 800457e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004582:	e7c5      	b.n	8004510 <_printf_common+0x58>
 8004584:	2301      	movs	r3, #1
 8004586:	4622      	mov	r2, r4
 8004588:	4649      	mov	r1, r9
 800458a:	4638      	mov	r0, r7
 800458c:	47c0      	blx	r8
 800458e:	3001      	adds	r0, #1
 8004590:	d0e6      	beq.n	8004560 <_printf_common+0xa8>
 8004592:	3601      	adds	r6, #1
 8004594:	e7d9      	b.n	800454a <_printf_common+0x92>
	...

08004598 <_printf_i>:
 8004598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	460c      	mov	r4, r1
 800459e:	7e27      	ldrb	r7, [r4, #24]
 80045a0:	4691      	mov	r9, r2
 80045a2:	2f78      	cmp	r7, #120	; 0x78
 80045a4:	4680      	mov	r8, r0
 80045a6:	469a      	mov	sl, r3
 80045a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ae:	d807      	bhi.n	80045c0 <_printf_i+0x28>
 80045b0:	2f62      	cmp	r7, #98	; 0x62
 80045b2:	d80a      	bhi.n	80045ca <_printf_i+0x32>
 80045b4:	2f00      	cmp	r7, #0
 80045b6:	f000 80d9 	beq.w	800476c <_printf_i+0x1d4>
 80045ba:	2f58      	cmp	r7, #88	; 0x58
 80045bc:	f000 80a4 	beq.w	8004708 <_printf_i+0x170>
 80045c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045c8:	e03a      	b.n	8004640 <_printf_i+0xa8>
 80045ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ce:	2b15      	cmp	r3, #21
 80045d0:	d8f6      	bhi.n	80045c0 <_printf_i+0x28>
 80045d2:	a001      	add	r0, pc, #4	; (adr r0, 80045d8 <_printf_i+0x40>)
 80045d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045d8:	08004631 	.word	0x08004631
 80045dc:	08004645 	.word	0x08004645
 80045e0:	080045c1 	.word	0x080045c1
 80045e4:	080045c1 	.word	0x080045c1
 80045e8:	080045c1 	.word	0x080045c1
 80045ec:	080045c1 	.word	0x080045c1
 80045f0:	08004645 	.word	0x08004645
 80045f4:	080045c1 	.word	0x080045c1
 80045f8:	080045c1 	.word	0x080045c1
 80045fc:	080045c1 	.word	0x080045c1
 8004600:	080045c1 	.word	0x080045c1
 8004604:	08004753 	.word	0x08004753
 8004608:	08004675 	.word	0x08004675
 800460c:	08004735 	.word	0x08004735
 8004610:	080045c1 	.word	0x080045c1
 8004614:	080045c1 	.word	0x080045c1
 8004618:	08004775 	.word	0x08004775
 800461c:	080045c1 	.word	0x080045c1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045c1 	.word	0x080045c1
 8004628:	080045c1 	.word	0x080045c1
 800462c:	0800473d 	.word	0x0800473d
 8004630:	680b      	ldr	r3, [r1, #0]
 8004632:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004636:	1d1a      	adds	r2, r3, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	600a      	str	r2, [r1, #0]
 800463c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004640:	2301      	movs	r3, #1
 8004642:	e0a4      	b.n	800478e <_printf_i+0x1f6>
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	6808      	ldr	r0, [r1, #0]
 8004648:	062e      	lsls	r6, r5, #24
 800464a:	f100 0304 	add.w	r3, r0, #4
 800464e:	d50a      	bpl.n	8004666 <_printf_i+0xce>
 8004650:	6805      	ldr	r5, [r0, #0]
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	2d00      	cmp	r5, #0
 8004656:	da03      	bge.n	8004660 <_printf_i+0xc8>
 8004658:	232d      	movs	r3, #45	; 0x2d
 800465a:	426d      	negs	r5, r5
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004660:	230a      	movs	r3, #10
 8004662:	485e      	ldr	r0, [pc, #376]	; (80047dc <_printf_i+0x244>)
 8004664:	e019      	b.n	800469a <_printf_i+0x102>
 8004666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800466a:	6805      	ldr	r5, [r0, #0]
 800466c:	600b      	str	r3, [r1, #0]
 800466e:	bf18      	it	ne
 8004670:	b22d      	sxthne	r5, r5
 8004672:	e7ef      	b.n	8004654 <_printf_i+0xbc>
 8004674:	680b      	ldr	r3, [r1, #0]
 8004676:	6825      	ldr	r5, [r4, #0]
 8004678:	1d18      	adds	r0, r3, #4
 800467a:	6008      	str	r0, [r1, #0]
 800467c:	0628      	lsls	r0, r5, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0xec>
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0xf2>
 8004684:	0669      	lsls	r1, r5, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0xe8>
 8004688:	881d      	ldrh	r5, [r3, #0]
 800468a:	2f6f      	cmp	r7, #111	; 0x6f
 800468c:	bf0c      	ite	eq
 800468e:	2308      	moveq	r3, #8
 8004690:	230a      	movne	r3, #10
 8004692:	4852      	ldr	r0, [pc, #328]	; (80047dc <_printf_i+0x244>)
 8004694:	2100      	movs	r1, #0
 8004696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469a:	6866      	ldr	r6, [r4, #4]
 800469c:	2e00      	cmp	r6, #0
 800469e:	bfa8      	it	ge
 80046a0:	6821      	ldrge	r1, [r4, #0]
 80046a2:	60a6      	str	r6, [r4, #8]
 80046a4:	bfa4      	itt	ge
 80046a6:	f021 0104 	bicge.w	r1, r1, #4
 80046aa:	6021      	strge	r1, [r4, #0]
 80046ac:	b90d      	cbnz	r5, 80046b2 <_printf_i+0x11a>
 80046ae:	2e00      	cmp	r6, #0
 80046b0:	d04d      	beq.n	800474e <_printf_i+0x1b6>
 80046b2:	4616      	mov	r6, r2
 80046b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80046b8:	fb03 5711 	mls	r7, r3, r1, r5
 80046bc:	5dc7      	ldrb	r7, [r0, r7]
 80046be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046c2:	462f      	mov	r7, r5
 80046c4:	42bb      	cmp	r3, r7
 80046c6:	460d      	mov	r5, r1
 80046c8:	d9f4      	bls.n	80046b4 <_printf_i+0x11c>
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d10b      	bne.n	80046e6 <_printf_i+0x14e>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	07df      	lsls	r7, r3, #31
 80046d2:	d508      	bpl.n	80046e6 <_printf_i+0x14e>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	6861      	ldr	r1, [r4, #4]
 80046d8:	4299      	cmp	r1, r3
 80046da:	bfde      	ittt	le
 80046dc:	2330      	movle	r3, #48	; 0x30
 80046de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046e6:	1b92      	subs	r2, r2, r6
 80046e8:	6122      	str	r2, [r4, #16]
 80046ea:	464b      	mov	r3, r9
 80046ec:	4621      	mov	r1, r4
 80046ee:	4640      	mov	r0, r8
 80046f0:	f8cd a000 	str.w	sl, [sp]
 80046f4:	aa03      	add	r2, sp, #12
 80046f6:	f7ff fedf 	bl	80044b8 <_printf_common>
 80046fa:	3001      	adds	r0, #1
 80046fc:	d14c      	bne.n	8004798 <_printf_i+0x200>
 80046fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004702:	b004      	add	sp, #16
 8004704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004708:	4834      	ldr	r0, [pc, #208]	; (80047dc <_printf_i+0x244>)
 800470a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800470e:	680e      	ldr	r6, [r1, #0]
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	f856 5b04 	ldr.w	r5, [r6], #4
 8004716:	061f      	lsls	r7, r3, #24
 8004718:	600e      	str	r6, [r1, #0]
 800471a:	d514      	bpl.n	8004746 <_printf_i+0x1ae>
 800471c:	07d9      	lsls	r1, r3, #31
 800471e:	bf44      	itt	mi
 8004720:	f043 0320 	orrmi.w	r3, r3, #32
 8004724:	6023      	strmi	r3, [r4, #0]
 8004726:	b91d      	cbnz	r5, 8004730 <_printf_i+0x198>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	f023 0320 	bic.w	r3, r3, #32
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	2310      	movs	r3, #16
 8004732:	e7af      	b.n	8004694 <_printf_i+0xfc>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	f043 0320 	orr.w	r3, r3, #32
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	2378      	movs	r3, #120	; 0x78
 800473e:	4828      	ldr	r0, [pc, #160]	; (80047e0 <_printf_i+0x248>)
 8004740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004744:	e7e3      	b.n	800470e <_printf_i+0x176>
 8004746:	065e      	lsls	r6, r3, #25
 8004748:	bf48      	it	mi
 800474a:	b2ad      	uxthmi	r5, r5
 800474c:	e7e6      	b.n	800471c <_printf_i+0x184>
 800474e:	4616      	mov	r6, r2
 8004750:	e7bb      	b.n	80046ca <_printf_i+0x132>
 8004752:	680b      	ldr	r3, [r1, #0]
 8004754:	6826      	ldr	r6, [r4, #0]
 8004756:	1d1d      	adds	r5, r3, #4
 8004758:	6960      	ldr	r0, [r4, #20]
 800475a:	600d      	str	r5, [r1, #0]
 800475c:	0635      	lsls	r5, r6, #24
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	d501      	bpl.n	8004766 <_printf_i+0x1ce>
 8004762:	6018      	str	r0, [r3, #0]
 8004764:	e002      	b.n	800476c <_printf_i+0x1d4>
 8004766:	0671      	lsls	r1, r6, #25
 8004768:	d5fb      	bpl.n	8004762 <_printf_i+0x1ca>
 800476a:	8018      	strh	r0, [r3, #0]
 800476c:	2300      	movs	r3, #0
 800476e:	4616      	mov	r6, r2
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	e7ba      	b.n	80046ea <_printf_i+0x152>
 8004774:	680b      	ldr	r3, [r1, #0]
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	600a      	str	r2, [r1, #0]
 800477a:	681e      	ldr	r6, [r3, #0]
 800477c:	2100      	movs	r1, #0
 800477e:	4630      	mov	r0, r6
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	f000 f82f 	bl	80047e4 <memchr>
 8004786:	b108      	cbz	r0, 800478c <_printf_i+0x1f4>
 8004788:	1b80      	subs	r0, r0, r6
 800478a:	6060      	str	r0, [r4, #4]
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	6123      	str	r3, [r4, #16]
 8004790:	2300      	movs	r3, #0
 8004792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004796:	e7a8      	b.n	80046ea <_printf_i+0x152>
 8004798:	4632      	mov	r2, r6
 800479a:	4649      	mov	r1, r9
 800479c:	4640      	mov	r0, r8
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	47d0      	blx	sl
 80047a2:	3001      	adds	r0, #1
 80047a4:	d0ab      	beq.n	80046fe <_printf_i+0x166>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	079b      	lsls	r3, r3, #30
 80047aa:	d413      	bmi.n	80047d4 <_printf_i+0x23c>
 80047ac:	68e0      	ldr	r0, [r4, #12]
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	4298      	cmp	r0, r3
 80047b2:	bfb8      	it	lt
 80047b4:	4618      	movlt	r0, r3
 80047b6:	e7a4      	b.n	8004702 <_printf_i+0x16a>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4632      	mov	r2, r6
 80047bc:	4649      	mov	r1, r9
 80047be:	4640      	mov	r0, r8
 80047c0:	47d0      	blx	sl
 80047c2:	3001      	adds	r0, #1
 80047c4:	d09b      	beq.n	80046fe <_printf_i+0x166>
 80047c6:	3501      	adds	r5, #1
 80047c8:	68e3      	ldr	r3, [r4, #12]
 80047ca:	9903      	ldr	r1, [sp, #12]
 80047cc:	1a5b      	subs	r3, r3, r1
 80047ce:	42ab      	cmp	r3, r5
 80047d0:	dcf2      	bgt.n	80047b8 <_printf_i+0x220>
 80047d2:	e7eb      	b.n	80047ac <_printf_i+0x214>
 80047d4:	2500      	movs	r5, #0
 80047d6:	f104 0619 	add.w	r6, r4, #25
 80047da:	e7f5      	b.n	80047c8 <_printf_i+0x230>
 80047dc:	08004abd 	.word	0x08004abd
 80047e0:	08004ace 	.word	0x08004ace

080047e4 <memchr>:
 80047e4:	4603      	mov	r3, r0
 80047e6:	b510      	push	{r4, lr}
 80047e8:	b2c9      	uxtb	r1, r1
 80047ea:	4402      	add	r2, r0
 80047ec:	4293      	cmp	r3, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	d101      	bne.n	80047f6 <memchr+0x12>
 80047f2:	2000      	movs	r0, #0
 80047f4:	e003      	b.n	80047fe <memchr+0x1a>
 80047f6:	7804      	ldrb	r4, [r0, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	428c      	cmp	r4, r1
 80047fc:	d1f6      	bne.n	80047ec <memchr+0x8>
 80047fe:	bd10      	pop	{r4, pc}

08004800 <memcpy>:
 8004800:	440a      	add	r2, r1
 8004802:	4291      	cmp	r1, r2
 8004804:	f100 33ff 	add.w	r3, r0, #4294967295
 8004808:	d100      	bne.n	800480c <memcpy+0xc>
 800480a:	4770      	bx	lr
 800480c:	b510      	push	{r4, lr}
 800480e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004812:	4291      	cmp	r1, r2
 8004814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004818:	d1f9      	bne.n	800480e <memcpy+0xe>
 800481a:	bd10      	pop	{r4, pc}

0800481c <memmove>:
 800481c:	4288      	cmp	r0, r1
 800481e:	b510      	push	{r4, lr}
 8004820:	eb01 0402 	add.w	r4, r1, r2
 8004824:	d902      	bls.n	800482c <memmove+0x10>
 8004826:	4284      	cmp	r4, r0
 8004828:	4623      	mov	r3, r4
 800482a:	d807      	bhi.n	800483c <memmove+0x20>
 800482c:	1e43      	subs	r3, r0, #1
 800482e:	42a1      	cmp	r1, r4
 8004830:	d008      	beq.n	8004844 <memmove+0x28>
 8004832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483a:	e7f8      	b.n	800482e <memmove+0x12>
 800483c:	4601      	mov	r1, r0
 800483e:	4402      	add	r2, r0
 8004840:	428a      	cmp	r2, r1
 8004842:	d100      	bne.n	8004846 <memmove+0x2a>
 8004844:	bd10      	pop	{r4, pc}
 8004846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800484a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800484e:	e7f7      	b.n	8004840 <memmove+0x24>

08004850 <_free_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4605      	mov	r5, r0
 8004854:	2900      	cmp	r1, #0
 8004856:	d043      	beq.n	80048e0 <_free_r+0x90>
 8004858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485c:	1f0c      	subs	r4, r1, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	18e4      	addlt	r4, r4, r3
 8004864:	f000 f8d0 	bl	8004a08 <__malloc_lock>
 8004868:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <_free_r+0x94>)
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	4610      	mov	r0, r2
 800486e:	b933      	cbnz	r3, 800487e <_free_r+0x2e>
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	6014      	str	r4, [r2, #0]
 8004874:	4628      	mov	r0, r5
 8004876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800487a:	f000 b8cb 	b.w	8004a14 <__malloc_unlock>
 800487e:	42a3      	cmp	r3, r4
 8004880:	d90a      	bls.n	8004898 <_free_r+0x48>
 8004882:	6821      	ldr	r1, [r4, #0]
 8004884:	1862      	adds	r2, r4, r1
 8004886:	4293      	cmp	r3, r2
 8004888:	bf01      	itttt	eq
 800488a:	681a      	ldreq	r2, [r3, #0]
 800488c:	685b      	ldreq	r3, [r3, #4]
 800488e:	1852      	addeq	r2, r2, r1
 8004890:	6022      	streq	r2, [r4, #0]
 8004892:	6063      	str	r3, [r4, #4]
 8004894:	6004      	str	r4, [r0, #0]
 8004896:	e7ed      	b.n	8004874 <_free_r+0x24>
 8004898:	461a      	mov	r2, r3
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b10b      	cbz	r3, 80048a2 <_free_r+0x52>
 800489e:	42a3      	cmp	r3, r4
 80048a0:	d9fa      	bls.n	8004898 <_free_r+0x48>
 80048a2:	6811      	ldr	r1, [r2, #0]
 80048a4:	1850      	adds	r0, r2, r1
 80048a6:	42a0      	cmp	r0, r4
 80048a8:	d10b      	bne.n	80048c2 <_free_r+0x72>
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	4401      	add	r1, r0
 80048ae:	1850      	adds	r0, r2, r1
 80048b0:	4283      	cmp	r3, r0
 80048b2:	6011      	str	r1, [r2, #0]
 80048b4:	d1de      	bne.n	8004874 <_free_r+0x24>
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4401      	add	r1, r0
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	6053      	str	r3, [r2, #4]
 80048c0:	e7d8      	b.n	8004874 <_free_r+0x24>
 80048c2:	d902      	bls.n	80048ca <_free_r+0x7a>
 80048c4:	230c      	movs	r3, #12
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	e7d4      	b.n	8004874 <_free_r+0x24>
 80048ca:	6820      	ldr	r0, [r4, #0]
 80048cc:	1821      	adds	r1, r4, r0
 80048ce:	428b      	cmp	r3, r1
 80048d0:	bf01      	itttt	eq
 80048d2:	6819      	ldreq	r1, [r3, #0]
 80048d4:	685b      	ldreq	r3, [r3, #4]
 80048d6:	1809      	addeq	r1, r1, r0
 80048d8:	6021      	streq	r1, [r4, #0]
 80048da:	6063      	str	r3, [r4, #4]
 80048dc:	6054      	str	r4, [r2, #4]
 80048de:	e7c9      	b.n	8004874 <_free_r+0x24>
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	bf00      	nop
 80048e4:	200000d4 	.word	0x200000d4

080048e8 <_malloc_r>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	1ccd      	adds	r5, r1, #3
 80048ec:	f025 0503 	bic.w	r5, r5, #3
 80048f0:	3508      	adds	r5, #8
 80048f2:	2d0c      	cmp	r5, #12
 80048f4:	bf38      	it	cc
 80048f6:	250c      	movcc	r5, #12
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	4606      	mov	r6, r0
 80048fc:	db01      	blt.n	8004902 <_malloc_r+0x1a>
 80048fe:	42a9      	cmp	r1, r5
 8004900:	d903      	bls.n	800490a <_malloc_r+0x22>
 8004902:	230c      	movs	r3, #12
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	2000      	movs	r0, #0
 8004908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800490a:	f000 f87d 	bl	8004a08 <__malloc_lock>
 800490e:	4921      	ldr	r1, [pc, #132]	; (8004994 <_malloc_r+0xac>)
 8004910:	680a      	ldr	r2, [r1, #0]
 8004912:	4614      	mov	r4, r2
 8004914:	b99c      	cbnz	r4, 800493e <_malloc_r+0x56>
 8004916:	4f20      	ldr	r7, [pc, #128]	; (8004998 <_malloc_r+0xb0>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	b923      	cbnz	r3, 8004926 <_malloc_r+0x3e>
 800491c:	4621      	mov	r1, r4
 800491e:	4630      	mov	r0, r6
 8004920:	f000 f862 	bl	80049e8 <_sbrk_r>
 8004924:	6038      	str	r0, [r7, #0]
 8004926:	4629      	mov	r1, r5
 8004928:	4630      	mov	r0, r6
 800492a:	f000 f85d 	bl	80049e8 <_sbrk_r>
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	d123      	bne.n	800497a <_malloc_r+0x92>
 8004932:	230c      	movs	r3, #12
 8004934:	4630      	mov	r0, r6
 8004936:	6033      	str	r3, [r6, #0]
 8004938:	f000 f86c 	bl	8004a14 <__malloc_unlock>
 800493c:	e7e3      	b.n	8004906 <_malloc_r+0x1e>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	1b5b      	subs	r3, r3, r5
 8004942:	d417      	bmi.n	8004974 <_malloc_r+0x8c>
 8004944:	2b0b      	cmp	r3, #11
 8004946:	d903      	bls.n	8004950 <_malloc_r+0x68>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	441c      	add	r4, r3
 800494c:	6025      	str	r5, [r4, #0]
 800494e:	e004      	b.n	800495a <_malloc_r+0x72>
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	42a2      	cmp	r2, r4
 8004954:	bf0c      	ite	eq
 8004956:	600b      	streq	r3, [r1, #0]
 8004958:	6053      	strne	r3, [r2, #4]
 800495a:	4630      	mov	r0, r6
 800495c:	f000 f85a 	bl	8004a14 <__malloc_unlock>
 8004960:	f104 000b 	add.w	r0, r4, #11
 8004964:	1d23      	adds	r3, r4, #4
 8004966:	f020 0007 	bic.w	r0, r0, #7
 800496a:	1ac2      	subs	r2, r0, r3
 800496c:	d0cc      	beq.n	8004908 <_malloc_r+0x20>
 800496e:	1a1b      	subs	r3, r3, r0
 8004970:	50a3      	str	r3, [r4, r2]
 8004972:	e7c9      	b.n	8004908 <_malloc_r+0x20>
 8004974:	4622      	mov	r2, r4
 8004976:	6864      	ldr	r4, [r4, #4]
 8004978:	e7cc      	b.n	8004914 <_malloc_r+0x2c>
 800497a:	1cc4      	adds	r4, r0, #3
 800497c:	f024 0403 	bic.w	r4, r4, #3
 8004980:	42a0      	cmp	r0, r4
 8004982:	d0e3      	beq.n	800494c <_malloc_r+0x64>
 8004984:	1a21      	subs	r1, r4, r0
 8004986:	4630      	mov	r0, r6
 8004988:	f000 f82e 	bl	80049e8 <_sbrk_r>
 800498c:	3001      	adds	r0, #1
 800498e:	d1dd      	bne.n	800494c <_malloc_r+0x64>
 8004990:	e7cf      	b.n	8004932 <_malloc_r+0x4a>
 8004992:	bf00      	nop
 8004994:	200000d4 	.word	0x200000d4
 8004998:	200000d8 	.word	0x200000d8

0800499c <_realloc_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	4607      	mov	r7, r0
 80049a0:	4614      	mov	r4, r2
 80049a2:	460e      	mov	r6, r1
 80049a4:	b921      	cbnz	r1, 80049b0 <_realloc_r+0x14>
 80049a6:	4611      	mov	r1, r2
 80049a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049ac:	f7ff bf9c 	b.w	80048e8 <_malloc_r>
 80049b0:	b922      	cbnz	r2, 80049bc <_realloc_r+0x20>
 80049b2:	f7ff ff4d 	bl	8004850 <_free_r>
 80049b6:	4625      	mov	r5, r4
 80049b8:	4628      	mov	r0, r5
 80049ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049bc:	f000 f830 	bl	8004a20 <_malloc_usable_size_r>
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d20f      	bcs.n	80049e4 <_realloc_r+0x48>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff ff8e 	bl	80048e8 <_malloc_r>
 80049cc:	4605      	mov	r5, r0
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d0f2      	beq.n	80049b8 <_realloc_r+0x1c>
 80049d2:	4631      	mov	r1, r6
 80049d4:	4622      	mov	r2, r4
 80049d6:	f7ff ff13 	bl	8004800 <memcpy>
 80049da:	4631      	mov	r1, r6
 80049dc:	4638      	mov	r0, r7
 80049de:	f7ff ff37 	bl	8004850 <_free_r>
 80049e2:	e7e9      	b.n	80049b8 <_realloc_r+0x1c>
 80049e4:	4635      	mov	r5, r6
 80049e6:	e7e7      	b.n	80049b8 <_realloc_r+0x1c>

080049e8 <_sbrk_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	2300      	movs	r3, #0
 80049ec:	4d05      	ldr	r5, [pc, #20]	; (8004a04 <_sbrk_r+0x1c>)
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	f7fc fd6e 	bl	80014d4 <_sbrk>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_sbrk_r+0x1a>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_sbrk_r+0x1a>
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	200001f8 	.word	0x200001f8

08004a08 <__malloc_lock>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__malloc_lock+0x8>)
 8004a0a:	f000 b811 	b.w	8004a30 <__retarget_lock_acquire_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20000200 	.word	0x20000200

08004a14 <__malloc_unlock>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__malloc_unlock+0x8>)
 8004a16:	f000 b80c 	b.w	8004a32 <__retarget_lock_release_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	20000200 	.word	0x20000200

08004a20 <_malloc_usable_size_r>:
 8004a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a24:	1f18      	subs	r0, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bfbc      	itt	lt
 8004a2a:	580b      	ldrlt	r3, [r1, r0]
 8004a2c:	18c0      	addlt	r0, r0, r3
 8004a2e:	4770      	bx	lr

08004a30 <__retarget_lock_acquire_recursive>:
 8004a30:	4770      	bx	lr

08004a32 <__retarget_lock_release_recursive>:
 8004a32:	4770      	bx	lr

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
