
STM32_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004acc  08004acc  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004acc  08004acc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000094  08004b68  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004b68  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b02  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e50  00000000  00000000  00036bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0003a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c1d  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ad9  00000000  00000000  0005500d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2b9  00000000  00000000  00066ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1d9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000f1df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a20 	.word	0x08004a20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004a20 	.word	0x08004a20

0800014c <fsmHorLEDsRun>:
#include "LEDs_display.h"

int horizontal_status = MODE_INIT;
int vertical_status = MODE_INIT;

void fsmHorLEDsRun() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// FSM for horizontal LEDs

	switch (horizontal_status) {
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	d847      	bhi.n	80001e8 <fsmHorLEDsRun+0x9c>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsmHorLEDsRun+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000175 	.word	0x08000175
 8000164:	080001e9 	.word	0x080001e9
 8000168:	08000189 	.word	0x08000189
 800016c:	080001a9 	.word	0x080001a9
 8000170:	080001c9 	.word	0x080001c9
		case MODE_INIT:
			horizontal_status = AUTO_RED;
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000176:	2202      	movs	r2, #2
 8000178:	601a      	str	r2, [r3, #0]
			setTimer(0, RED_time);
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <fsmHorLEDsRun+0xb4>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4619      	mov	r1, r3
 8000180:	2000      	movs	r0, #0
 8000182:	f001 f9f5 	bl	8001570 <setTimer>
			break;
 8000186:	e036      	b.n	80001f6 <fsmHorLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(0)) {
 8000188:	2000      	movs	r0, #0
 800018a:	f001 f9dd 	bl	8001548 <isTimerUp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d02b      	beq.n	80001ec <fsmHorLEDsRun+0xa0>
				horizontal_status = AUTO_GREEN;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <fsmHorLEDsRun+0xb0>)
 8000196:	2203      	movs	r2, #3
 8000198:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN_time);
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <fsmHorLEDsRun+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4619      	mov	r1, r3
 80001a0:	2000      	movs	r0, #0
 80001a2:	f001 f9e5 	bl	8001570 <setTimer>
			}
			break;
 80001a6:	e021      	b.n	80001ec <fsmHorLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(0)) {
 80001a8:	2000      	movs	r0, #0
 80001aa:	f001 f9cd 	bl	8001548 <isTimerUp>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d01d      	beq.n	80001f0 <fsmHorLEDsRun+0xa4>
				horizontal_status = AUTO_YELLOW;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	601a      	str	r2, [r3, #0]
				setTimer(0, YELLOW_time);
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <fsmHorLEDsRun+0xbc>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4619      	mov	r1, r3
 80001c0:	2000      	movs	r0, #0
 80001c2:	f001 f9d5 	bl	8001570 <setTimer>
			}
			break;
 80001c6:	e013      	b.n	80001f0 <fsmHorLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(0)) {
 80001c8:	2000      	movs	r0, #0
 80001ca:	f001 f9bd 	bl	8001548 <isTimerUp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00f      	beq.n	80001f4 <fsmHorLEDsRun+0xa8>
				horizontal_status = AUTO_RED;
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <fsmHorLEDsRun+0xb0>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	601a      	str	r2, [r3, #0]
				setTimer(0, RED_time);
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fsmHorLEDsRun+0xb4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	2000      	movs	r0, #0
 80001e2:	f001 f9c5 	bl	8001570 <setTimer>
			}
			break;
 80001e6:	e005      	b.n	80001f4 <fsmHorLEDsRun+0xa8>

		default:
			break;
 80001e8:	bf00      	nop
 80001ea:	e004      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001ec:	bf00      	nop
 80001ee:	e002      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f0:	bf00      	nop
 80001f2:	e000      	b.n	80001f6 <fsmHorLEDsRun+0xaa>
			break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000b0 	.word	0x200000b0
 8000200:	20000018 	.word	0x20000018
 8000204:	2000001c 	.word	0x2000001c
 8000208:	20000020 	.word	0x20000020

0800020c <fsmVerLEDsRun>:


void fsmVerLEDsRun() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// FSM for vertical LEDs

	switch (vertical_status) {
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d847      	bhi.n	80002a8 <fsmVerLEDsRun+0x9c>
 8000218:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsmVerLEDsRun+0x14>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000235 	.word	0x08000235
 8000224:	080002a9 	.word	0x080002a9
 8000228:	08000249 	.word	0x08000249
 800022c:	08000269 	.word	0x08000269
 8000230:	08000289 	.word	0x08000289
		case MODE_INIT:
			vertical_status = AUTO_GREEN;
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000236:	2203      	movs	r2, #3
 8000238:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN_time);
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2001      	movs	r0, #1
 8000242:	f001 f995 	bl	8001570 <setTimer>
			break;
 8000246:	e036      	b.n	80002b6 <fsmVerLEDsRun+0xaa>

		case AUTO_RED:
			if (isTimerUp(1)) {
 8000248:	2001      	movs	r0, #1
 800024a:	f001 f97d 	bl	8001548 <isTimerUp>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d02b      	beq.n	80002ac <fsmVerLEDsRun+0xa0>
				vertical_status = AUTO_GREEN;
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000256:	2203      	movs	r2, #3
 8000258:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN_time);
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <fsmVerLEDsRun+0xb4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	2001      	movs	r0, #1
 8000262:	f001 f985 	bl	8001570 <setTimer>
			}
			break;
 8000266:	e021      	b.n	80002ac <fsmVerLEDsRun+0xa0>

		case AUTO_GREEN:
			if (isTimerUp(1)) {
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f96d 	bl	8001548 <isTimerUp>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d01d      	beq.n	80002b0 <fsmVerLEDsRun+0xa4>
				vertical_status = AUTO_YELLOW;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000276:	2204      	movs	r2, #4
 8000278:	601a      	str	r2, [r3, #0]
				setTimer(1, YELLOW_time);
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <fsmVerLEDsRun+0xb8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4619      	mov	r1, r3
 8000280:	2001      	movs	r0, #1
 8000282:	f001 f975 	bl	8001570 <setTimer>
			}
			break;
 8000286:	e013      	b.n	80002b0 <fsmVerLEDsRun+0xa4>

		case AUTO_YELLOW:
			if (isTimerUp(1)) {
 8000288:	2001      	movs	r0, #1
 800028a:	f001 f95d 	bl	8001548 <isTimerUp>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <fsmVerLEDsRun+0xa8>
				vertical_status = AUTO_RED;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <fsmVerLEDsRun+0xb0>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
				setTimer(1, RED_time);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <fsmVerLEDsRun+0xbc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	2001      	movs	r0, #1
 80002a2:	f001 f965 	bl	8001570 <setTimer>
			}
			break;
 80002a6:	e005      	b.n	80002b4 <fsmVerLEDsRun+0xa8>

		default:
			break;
 80002a8:	bf00      	nop
 80002aa:	e004      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <fsmVerLEDsRun+0xaa>
			break;
 80002b4:	bf00      	nop
	}
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000b4 	.word	0x200000b4
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	20000020 	.word	0x20000020
 80002c8:	20000018 	.word	0x20000018

080002cc <LEDsDisplay>:

void LEDsDisplay() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Display two ways LEDs

	fsmHorLEDsRun();
 80002d0:	f7ff ff3c 	bl	800014c <fsmHorLEDsRun>
	fsmVerLEDsRun();
 80002d4:	f7ff ff9a 	bl	800020c <fsmVerLEDsRun>

	switch (horizontal_status) {
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <LEDsDisplay+0xcc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d01e      	beq.n	800031e <LEDsDisplay+0x52>
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	dc28      	bgt.n	8000336 <LEDsDisplay+0x6a>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d002      	beq.n	80002ee <LEDsDisplay+0x22>
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d00c      	beq.n	8000306 <LEDsDisplay+0x3a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
			break;

		default:
			break;
 80002ec:	e023      	b.n	8000336 <LEDsDisplay+0x6a>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4829      	ldr	r0, [pc, #164]	; (800039c <LEDsDisplay+0xd0>)
 80002f6:	f001 fe9c 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4828      	ldr	r0, [pc, #160]	; (80003a0 <LEDsDisplay+0xd4>)
 8000300:	f001 fe97 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000304:	e018      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4823      	ldr	r0, [pc, #140]	; (800039c <LEDsDisplay+0xd0>)
 800030e:	f001 fe90 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4822      	ldr	r0, [pc, #136]	; (80003a0 <LEDsDisplay+0xd4>)
 8000318:	f001 fe8b 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 800031c:	e00c      	b.n	8000338 <LEDsDisplay+0x6c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <LEDsDisplay+0xd0>)
 8000326:	f001 fe84 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 800032a:	2201      	movs	r2, #1
 800032c:	2108      	movs	r1, #8
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <LEDsDisplay+0xd4>)
 8000330:	f001 fe7f 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000334:	e000      	b.n	8000338 <LEDsDisplay+0x6c>
			break;
 8000336:	bf00      	nop
	}

	switch (vertical_status) {
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <LEDsDisplay+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b04      	cmp	r3, #4
 800033e:	d01c      	beq.n	800037a <LEDsDisplay+0xae>
 8000340:	2b04      	cmp	r3, #4
 8000342:	dc25      	bgt.n	8000390 <LEDsDisplay+0xc4>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d002      	beq.n	800034e <LEDsDisplay+0x82>
 8000348:	2b03      	cmp	r3, #3
 800034a:	d00b      	beq.n	8000364 <LEDsDisplay+0x98>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
			break;

		default:
			break;
 800034c:	e020      	b.n	8000390 <LEDsDisplay+0xc4>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	4813      	ldr	r0, [pc, #76]	; (80003a0 <LEDsDisplay+0xd4>)
 8000354:	f001 fe6d 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <LEDsDisplay+0xd4>)
 800035e:	f001 fe68 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000362:	e016      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LEDsDisplay+0xd4>)
 800036a:	f001 fe62 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LEDsDisplay+0xd4>)
 8000374:	f001 fe5d 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000378:	e00b      	b.n	8000392 <LEDsDisplay+0xc6>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <LEDsDisplay+0xd4>)
 8000380:	f001 fe57 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000384:	2201      	movs	r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LEDsDisplay+0xd4>)
 800038a:	f001 fe52 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 800038e:	e000      	b.n	8000392 <LEDsDisplay+0xc6>
			break;
 8000390:	bf00      	nop
	}
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000b0 	.word	0x200000b0
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	200000b4 	.word	0x200000b4

080003a8 <isButtonPressed>:
int button_flag[NO_OF_BUTTON];
int button_long_flag[NO_OF_BUTTON];
GPIO_PinState key_reg[NO_OF_BUTTON][4];
int counter_for_key_pressed[NO_OF_BUTTON];

int isButtonPressed(int button) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (button_flag[button]) {
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <isButtonPressed+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d006      	beq.n	80003ca <isButtonPressed+0x22>
		button_flag[button] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <isButtonPressed+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <isButtonPressed+0x24>
	}
	else return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	200000fc 	.word	0x200000fc

080003dc <isButtonLongPressed>:

int isButtonLongPressed(int button) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if (button_long_flag[button]) {
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <isButtonLongPressed+0x30>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <isButtonLongPressed+0x22>
		button_long_flag[button] = 0;
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <isButtonLongPressed+0x30>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2100      	movs	r1, #0
 80003f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <isButtonLongPressed+0x24>
	}
	else return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2000010c 	.word	0x2000010c

08000410 <subKeyProcess>:

void subKeyProcess(int button) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <subKeyProcess+0x1c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2101      	movs	r1, #1
 800041e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	200000fc 	.word	0x200000fc

08000430 <subKeyLongProcess>:

void subKeyLongProcess(int button) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	button_long_flag[button] = 1;
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <subKeyLongProcess+0x1c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2101      	movs	r1, #1
 800043e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	2000010c 	.word	0x2000010c

08000450 <resetKey>:

void resetKey(int button) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	button_flag[button] = 0;
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <resetKey+0x28>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_long_flag[button] = 0;
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <resetKey+0x2c>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2100      	movs	r1, #0
 8000468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000fc 	.word	0x200000fc
 800047c:	2000010c 	.word	0x2000010c

08000480 <setKeyTimer>:

void setKeyTimer(int button) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	counter_for_key_pressed[button] = timer_for_key_pressed / timer_cycle;
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <setKeyTimer+0x28>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <setKeyTimer+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	fb92 f2f3 	sdiv	r2, r2, r3
 8000494:	4906      	ldr	r1, [pc, #24]	; (80004b0 <setKeyTimer+0x30>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000014 	.word	0x20000014
 80004ac:	20000010 	.word	0x20000010
 80004b0:	200000dc 	.word	0x200000dc

080004b4 <getKeyInput>:

void getKeyInput() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e0b9      	b.n	8000634 <getKeyInput+0x180>
		key_reg[button][0] = key_reg[button][1];
 80004c0:	4a61      	ldr	r2, [pc, #388]	; (8000648 <getKeyInput+0x194>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	7859      	ldrb	r1, [r3, #1]
 80004ca:	4a5f      	ldr	r2, [pc, #380]	; (8000648 <getKeyInput+0x194>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		key_reg[button][1] = key_reg[button][2];
 80004d2:	4a5d      	ldr	r2, [pc, #372]	; (8000648 <getKeyInput+0x194>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	7899      	ldrb	r1, [r3, #2]
 80004dc:	4a5a      	ldr	r2, [pc, #360]	; (8000648 <getKeyInput+0x194>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	460a      	mov	r2, r1
 80004e6:	705a      	strb	r2, [r3, #1]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d83e      	bhi.n	800056c <getKeyInput+0xb8>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <getKeyInput+0x40>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000505 	.word	0x08000505
 80004f8:	0800051f 	.word	0x0800051f
 80004fc:	08000539 	.word	0x08000539
 8000500:	08000553 	.word	0x08000553
		switch (button) {
			case BUTTON_MODE:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000504:	2102      	movs	r1, #2
 8000506:	4851      	ldr	r0, [pc, #324]	; (800064c <getKeyInput+0x198>)
 8000508:	f001 fd7c 	bl	8002004 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	4619      	mov	r1, r3
 8000510:	4a4d      	ldr	r2, [pc, #308]	; (8000648 <getKeyInput+0x194>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	709a      	strb	r2, [r3, #2]
				break;
 800051c:	e027      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_SET:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 800051e:	2110      	movs	r1, #16
 8000520:	484a      	ldr	r0, [pc, #296]	; (800064c <getKeyInput+0x198>)
 8000522:	f001 fd6f 	bl	8002004 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	4619      	mov	r1, r3
 800052a:	4a47      	ldr	r2, [pc, #284]	; (8000648 <getKeyInput+0x194>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	460a      	mov	r2, r1
 8000534:	709a      	strb	r2, [r3, #2]
				break;
 8000536:	e01a      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_INC:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_INC_GPIO_Port, BUTTON_INC_Pin);
 8000538:	2101      	movs	r1, #1
 800053a:	4845      	ldr	r0, [pc, #276]	; (8000650 <getKeyInput+0x19c>)
 800053c:	f001 fd62 	bl	8002004 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	4619      	mov	r1, r3
 8000544:	4a40      	ldr	r2, [pc, #256]	; (8000648 <getKeyInput+0x194>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	460a      	mov	r2, r1
 800054e:	709a      	strb	r2, [r3, #2]
				break;
 8000550:	e00d      	b.n	800056e <getKeyInput+0xba>
			case BUTTON_PED:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_PED_GPIO_Port, BUTTON_PED_Pin);
 8000552:	2101      	movs	r1, #1
 8000554:	483d      	ldr	r0, [pc, #244]	; (800064c <getKeyInput+0x198>)
 8000556:	f001 fd55 	bl	8002004 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	4619      	mov	r1, r3
 800055e:	4a3a      	ldr	r2, [pc, #232]	; (8000648 <getKeyInput+0x194>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	460a      	mov	r2, r1
 8000568:	709a      	strb	r2, [r3, #2]
				break;
 800056a:	e000      	b.n	800056e <getKeyInput+0xba>
			default:
				break;
 800056c:	bf00      	nop
		}

		if ((key_reg[button][0] == key_reg[button][1]) && (key_reg[button][1] == key_reg[button][2])) {
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <getKeyInput+0x194>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000576:	4934      	ldr	r1, [pc, #208]	; (8000648 <getKeyInput+0x194>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	429a      	cmp	r2, r3
 8000582:	d154      	bne.n	800062e <getKeyInput+0x17a>
 8000584:	4a30      	ldr	r2, [pc, #192]	; (8000648 <getKeyInput+0x194>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	492e      	ldr	r1, [pc, #184]	; (8000648 <getKeyInput+0x194>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	429a      	cmp	r2, r3
 800059a:	d148      	bne.n	800062e <getKeyInput+0x17a>

			// Press button, then release
			if (key_reg[button][3] != key_reg[button][2]) {
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <getKeyInput+0x194>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	78da      	ldrb	r2, [r3, #3]
 80005a6:	4928      	ldr	r1, [pc, #160]	; (8000648 <getKeyInput+0x194>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d01c      	beq.n	80005ee <getKeyInput+0x13a>
				key_reg[button][3] = key_reg[button][2];
 80005b4:	4a24      	ldr	r2, [pc, #144]	; (8000648 <getKeyInput+0x194>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	7899      	ldrb	r1, [r3, #2]
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <getKeyInput+0x194>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	460a      	mov	r2, r1
 80005c8:	70da      	strb	r2, [r3, #3]

				if (key_reg[button][2] == PRESSED_STATE) {
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <getKeyInput+0x194>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <getKeyInput+0x132>
					subKeyProcess(button);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff19 	bl	8000410 <subKeyProcess>
					setKeyTimer(button);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff4e 	bl	8000480 <setKeyTimer>
 80005e4:	e023      	b.n	800062e <getKeyInput+0x17a>
				}
				else resetKey(button);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ff32 	bl	8000450 <resetKey>
 80005ec:	e01f      	b.n	800062e <getKeyInput+0x17a>
			}
			// Press and hold button
			else {
				counter_for_key_pressed[button]--;
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getKeyInput+0x1a0>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <getKeyInput+0x1a0>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!counter_for_key_pressed[button]) {
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <getKeyInput+0x1a0>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <getKeyInput+0x17a>
					if (key_reg[button][2] == PRESSED_STATE) {
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <getKeyInput+0x194>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <getKeyInput+0x16e>
						subKeyLongProcess(button);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff08 	bl	8000430 <subKeyLongProcess>
 8000620:	e002      	b.n	8000628 <getKeyInput+0x174>
					}
					else resetKey(button);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff14 	bl	8000450 <resetKey>
					setKeyTimer(button);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff29 	bl	8000480 <setKeyTimer>
	for (int button = 0; button < NO_OF_BUTTON; button++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b03      	cmp	r3, #3
 8000638:	f77f af42 	ble.w	80004c0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000ec 	.word	0x200000ec
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	200000dc 	.word	0x200000dc

08000658 <fsmAutoModeRun>:
#include "fsm_auto_mode.h"

void fsmAutoModeRun() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// FSM for AUTO MODE

	switch (mode) {
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <fsmAutoModeRun+0x3c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <fsmAutoModeRun+0x12>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d004      	beq.n	8000672 <fsmAutoModeRun+0x1a>
			sendTimerCounter();

			break;

		default:
			break;
 8000668:	e011      	b.n	800068e <fsmAutoModeRun+0x36>
			mode = AUTO_MODE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <fsmAutoModeRun+0x3c>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
			break;
 8000670:	e00d      	b.n	800068e <fsmAutoModeRun+0x36>
			if (isButtonPressed(BUTTON_MODE)) {
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fe98 	bl	80003a8 <isButtonPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <fsmAutoModeRun+0x2c>
				mode = MAN_MODE;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <fsmAutoModeRun+0x3c>)
 8000680:	2205      	movs	r2, #5
 8000682:	601a      	str	r2, [r3, #0]
			LEDsDisplay();
 8000684:	f7ff fe22 	bl	80002cc <LEDsDisplay>
			sendTimerCounter();
 8000688:	f000 ffc0 	bl	800160c <sendTimerCounter>
			break;
 800068c:	bf00      	nop
	}
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000c0 	.word	0x200000c0

08000698 <fsmManualModeRun>:
#include "fsm_manual_mode.h"

void fsmManualModeRun()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// FSM for MANUAL MODE

	switch (mode)
 800069c:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <fsmManualModeRun+0x17c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b05      	subs	r3, #5
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	f200 80b3 	bhi.w	800080e <fsmManualModeRun+0x176>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <fsmManualModeRun+0x18>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006cd 	.word	0x080006cd
 80006b8:	08000735 	.word	0x08000735
 80006bc:	0800079d 	.word	0x0800079d
	{
	case MAN_MODE:
		sendTimeDuration();
 80006c0:	f001 f80a 	bl	80016d8 <sendTimeDuration>
		mode = MAN_RED;
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <fsmManualModeRun+0x17c>)
 80006c6:	2206      	movs	r2, #6
 80006c8:	601a      	str	r2, [r3, #0]
		break;
 80006ca:	e0a0      	b.n	800080e <fsmManualModeRun+0x176>

	case MAN_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4851      	ldr	r0, [pc, #324]	; (8000818 <fsmManualModeRun+0x180>)
 80006d4:	f001 fcad 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 80006d8:	2200      	movs	r2, #0
 80006da:	2108      	movs	r1, #8
 80006dc:	484f      	ldr	r0, [pc, #316]	; (800081c <fsmManualModeRun+0x184>)
 80006de:	f001 fca8 	bl	8002032 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	484d      	ldr	r0, [pc, #308]	; (800081c <fsmManualModeRun+0x184>)
 80006e8:	f001 fca3 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	484a      	ldr	r0, [pc, #296]	; (800081c <fsmManualModeRun+0x184>)
 80006f2:	f001 fc9e 	bl	8002032 <HAL_GPIO_WritePin>

		sendTimeDuration();
 80006f6:	f000 ffef 	bl	80016d8 <sendTimeDuration>

		if (isButtonPressed(BUTTON_SET))
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fe54 	bl	80003a8 <isButtonPressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <fsmManualModeRun+0x74>
		{
			mode = MAN_GREEN;
 8000706:	4b43      	ldr	r3, [pc, #268]	; (8000814 <fsmManualModeRun+0x17c>)
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fe4b 	bl	80003a8 <isButtonPressed>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d075      	beq.n	8000804 <fsmManualModeRun+0x16c>
		{
			mode = INC_RED;
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <fsmManualModeRun+0x17c>)
 800071a:	2209      	movs	r2, #9
 800071c:	601a      	str	r2, [r3, #0]
			time_count = RED_time / 1000;
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <fsmManualModeRun+0x188>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a40      	ldr	r2, [pc, #256]	; (8000824 <fsmManualModeRun+0x18c>)
 8000724:	fb82 1203 	smull	r1, r2, r2, r3
 8000728:	1192      	asrs	r2, r2, #6
 800072a:	17db      	asrs	r3, r3, #31
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4a3e      	ldr	r2, [pc, #248]	; (8000828 <fsmManualModeRun+0x190>)
 8000730:	6013      	str	r3, [r2, #0]
		}

		break;
 8000732:	e067      	b.n	8000804 <fsmManualModeRun+0x16c>

	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4837      	ldr	r0, [pc, #220]	; (8000818 <fsmManualModeRun+0x180>)
 800073c:	f001 fc79 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4835      	ldr	r0, [pc, #212]	; (800081c <fsmManualModeRun+0x184>)
 8000746:	f001 fc74 	bl	8002032 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	4833      	ldr	r0, [pc, #204]	; (800081c <fsmManualModeRun+0x184>)
 8000750:	f001 fc6f 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 8000754:	2201      	movs	r2, #1
 8000756:	2110      	movs	r1, #16
 8000758:	4830      	ldr	r0, [pc, #192]	; (800081c <fsmManualModeRun+0x184>)
 800075a:	f001 fc6a 	bl	8002032 <HAL_GPIO_WritePin>

		sendTimeDuration();
 800075e:	f000 ffbb 	bl	80016d8 <sendTimeDuration>

		if (isButtonPressed(BUTTON_SET))
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fe20 	bl	80003a8 <isButtonPressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d002      	beq.n	8000774 <fsmManualModeRun+0xdc>
		{
			mode = MAN_YELLOW;
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <fsmManualModeRun+0x17c>)
 8000770:	2208      	movs	r2, #8
 8000772:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fe17 	bl	80003a8 <isButtonPressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d043      	beq.n	8000808 <fsmManualModeRun+0x170>
		{
			mode = INC_GREEN;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <fsmManualModeRun+0x17c>)
 8000782:	220a      	movs	r2, #10
 8000784:	601a      	str	r2, [r3, #0]
			time_count = GREEN_time / 1000;
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <fsmManualModeRun+0x194>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a26      	ldr	r2, [pc, #152]	; (8000824 <fsmManualModeRun+0x18c>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	1192      	asrs	r2, r2, #6
 8000792:	17db      	asrs	r3, r3, #31
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <fsmManualModeRun+0x190>)
 8000798:	6013      	str	r3, [r2, #0]
		}

		break;
 800079a:	e035      	b.n	8000808 <fsmManualModeRun+0x170>

	case MAN_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a2:	481d      	ldr	r0, [pc, #116]	; (8000818 <fsmManualModeRun+0x180>)
 80007a4:	f001 fc45 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2108      	movs	r1, #8
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <fsmManualModeRun+0x184>)
 80007ae:	f001 fc40 	bl	8002032 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	4819      	ldr	r0, [pc, #100]	; (800081c <fsmManualModeRun+0x184>)
 80007b8:	f001 fc3b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	4816      	ldr	r0, [pc, #88]	; (800081c <fsmManualModeRun+0x184>)
 80007c2:	f001 fc36 	bl	8002032 <HAL_GPIO_WritePin>

		sendTimeDuration();
 80007c6:	f000 ff87 	bl	80016d8 <sendTimeDuration>

		if (isButtonPressed(BUTTON_SET))
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fdec 	bl	80003a8 <isButtonPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <fsmManualModeRun+0x144>
		{
			mode = MAN_RED;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <fsmManualModeRun+0x17c>)
 80007d8:	2206      	movs	r2, #6
 80007da:	601a      	str	r2, [r3, #0]
		}

		// Switch to TUNING MODE when press MODE button
		if (isButtonPressed(BUTTON_MODE))
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fde3 	bl	80003a8 <isButtonPressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d011      	beq.n	800080c <fsmManualModeRun+0x174>
		{
			mode = INC_YELLOW;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <fsmManualModeRun+0x17c>)
 80007ea:	220b      	movs	r2, #11
 80007ec:	601a      	str	r2, [r3, #0]
			time_count = YELLOW_time / 1000;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <fsmManualModeRun+0x198>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <fsmManualModeRun+0x18c>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1192      	asrs	r2, r2, #6
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <fsmManualModeRun+0x190>)
 8000800:	6013      	str	r3, [r2, #0]
		}

		break;
 8000802:	e003      	b.n	800080c <fsmManualModeRun+0x174>
		break;
 8000804:	bf00      	nop
 8000806:	e002      	b.n	800080e <fsmManualModeRun+0x176>
		break;
 8000808:	bf00      	nop
 800080a:	e000      	b.n	800080e <fsmManualModeRun+0x176>
		break;
 800080c:	bf00      	nop
	}
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000c0 	.word	0x200000c0
 8000818:	40010800 	.word	0x40010800
 800081c:	40010c00 	.word	0x40010c00
 8000820:	20000018 	.word	0x20000018
 8000824:	10624dd3 	.word	0x10624dd3
 8000828:	200000bc 	.word	0x200000bc
 800082c:	2000001c 	.word	0x2000001c
 8000830:	20000020 	.word	0x20000020

08000834 <fsmVerPedRun>:
int hor_ped = PED_OFF;
int buzzer_time = BUZZER_time;
int pul = BUZZER_pul;
int state = 0;

void fsmVerPedRun(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	switch(ver_ped){
 8000838:	4b52      	ldr	r3, [pc, #328]	; (8000984 <fsmVerPedRun+0x150>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3b0c      	subs	r3, #12
 800083e:	2b04      	cmp	r3, #4
 8000840:	f200 8093 	bhi.w	800096a <fsmVerPedRun+0x136>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <fsmVerPedRun+0x18>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	08000861 	.word	0x08000861
 8000850:	08000891 	.word	0x08000891
 8000854:	080008cf 	.word	0x080008cf
 8000858:	08000905 	.word	0x08000905
 800085c:	08000943 	.word	0x08000943
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 8000860:	4b49      	ldr	r3, [pc, #292]	; (8000988 <fsmVerPedRun+0x154>)
 8000862:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000866:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 8000868:	4b48      	ldr	r3, [pc, #288]	; (800098c <fsmVerPedRun+0x158>)
 800086a:	f240 2226 	movw	r2, #550	; 0x226
 800086e:	601a      	str	r2, [r3, #0]
			state = 1;
 8000870:	4b47      	ldr	r3, [pc, #284]	; (8000990 <fsmVerPedRun+0x15c>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff fd96 	bl	80003a8 <isButtonPressed>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d075      	beq.n	800096e <fsmVerPedRun+0x13a>
				ver_ped = PED_ON;
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <fsmVerPedRun+0x150>)
 8000884:	220d      	movs	r2, #13
 8000886:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 8000888:	4b42      	ldr	r3, [pc, #264]	; (8000994 <fsmVerPedRun+0x160>)
 800088a:	220d      	movs	r2, #13
 800088c:	601a      	str	r2, [r3, #0]
			}
			break;
 800088e:	e06e      	b.n	800096e <fsmVerPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000890:	2003      	movs	r0, #3
 8000892:	f7ff fd89 	bl	80003a8 <isButtonPressed>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <fsmVerPedRun+0x74>
				ver_ped = PED_OFF;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <fsmVerPedRun+0x150>)
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008a2:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <fsmVerPedRun+0x160>)
 80008a4:	220c      	movs	r2, #12
 80008a6:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 80008a8:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <fsmVerPedRun+0x164>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d102      	bne.n	80008b6 <fsmVerPedRun+0x82>
				ver_ped = WALK_ALLOW;
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <fsmVerPedRun+0x150>)
 80008b2:	220e      	movs	r2, #14
 80008b4:	601a      	str	r2, [r3, #0]
			}
			if((vertical_status == AUTO_GREEN) || (vertical_status == AUTO_YELLOW)){
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <fsmVerPedRun+0x164>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d003      	beq.n	80008c6 <fsmVerPedRun+0x92>
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <fsmVerPedRun+0x164>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d155      	bne.n	8000972 <fsmVerPedRun+0x13e>
				ver_ped = WALK_STOP;
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <fsmVerPedRun+0x150>)
 80008c8:	2210      	movs	r2, #16
 80008ca:	601a      	str	r2, [r3, #0]
			}
			break;
 80008cc:	e051      	b.n	8000972 <fsmVerPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 80008ce:	2003      	movs	r0, #3
 80008d0:	f7ff fd6a 	bl	80003a8 <isButtonPressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <fsmVerPedRun+0xb2>
				ver_ped = PED_OFF;
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <fsmVerPedRun+0x150>)
 80008dc:	220c      	movs	r2, #12
 80008de:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <fsmVerPedRun+0x160>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(1) <= 300){
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fe1e 	bl	8001528 <currentCounter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80008f2:	dc40      	bgt.n	8000976 <fsmVerPedRun+0x142>
				ver_ped = BUZZER_ON;
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <fsmVerPedRun+0x150>)
 80008f6:	220f      	movs	r2, #15
 80008f8:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 80008fa:	2164      	movs	r1, #100	; 0x64
 80008fc:	2002      	movs	r0, #2
 80008fe:	f000 fe37 	bl	8001570 <setTimer>
			}
			break;
 8000902:	e038      	b.n	8000976 <fsmVerPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000904:	2003      	movs	r0, #3
 8000906:	f7ff fd4f 	bl	80003a8 <isButtonPressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d005      	beq.n	800091c <fsmVerPedRun+0xe8>
				ver_ped = PED_OFF;
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <fsmVerPedRun+0x150>)
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <fsmVerPedRun+0x160>)
 8000918:	220c      	movs	r2, #12
 800091a:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_GREEN){
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <fsmVerPedRun+0x164>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d12a      	bne.n	800097a <fsmVerPedRun+0x146>
				ver_ped = WALK_STOP;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <fsmVerPedRun+0x150>)
 8000926:	2210      	movs	r2, #16
 8000928:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <fsmVerPedRun+0x154>)
 800092c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000930:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <fsmVerPedRun+0x158>)
 8000934:	f240 2226 	movw	r2, #550	; 0x226
 8000938:	601a      	str	r2, [r3, #0]
				state = 0;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <fsmVerPedRun+0x15c>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000940:	e01b      	b.n	800097a <fsmVerPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 8000942:	2003      	movs	r0, #3
 8000944:	f7ff fd30 	bl	80003a8 <isButtonPressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d005      	beq.n	800095a <fsmVerPedRun+0x126>
				ver_ped = PED_OFF;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <fsmVerPedRun+0x150>)
 8000950:	220c      	movs	r2, #12
 8000952:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <fsmVerPedRun+0x160>)
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
			}
			if(vertical_status == AUTO_RED){
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <fsmVerPedRun+0x164>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d10d      	bne.n	800097e <fsmVerPedRun+0x14a>
				ver_ped = WALK_ALLOW;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <fsmVerPedRun+0x150>)
 8000964:	220e      	movs	r2, #14
 8000966:	601a      	str	r2, [r3, #0]
			}
			break;
 8000968:	e009      	b.n	800097e <fsmVerPedRun+0x14a>
		default:
			break;
 800096a:	bf00      	nop
 800096c:	e008      	b.n	8000980 <fsmVerPedRun+0x14c>
			break;
 800096e:	bf00      	nop
 8000970:	e006      	b.n	8000980 <fsmVerPedRun+0x14c>
			break;
 8000972:	bf00      	nop
 8000974:	e004      	b.n	8000980 <fsmVerPedRun+0x14c>
			break;
 8000976:	bf00      	nop
 8000978:	e002      	b.n	8000980 <fsmVerPedRun+0x14c>
			break;
 800097a:	bf00      	nop
 800097c:	e000      	b.n	8000980 <fsmVerPedRun+0x14c>
			break;
 800097e:	bf00      	nop
	}
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000000 	.word	0x20000000
 8000988:	20000008 	.word	0x20000008
 800098c:	2000000c 	.word	0x2000000c
 8000990:	200000b8 	.word	0x200000b8
 8000994:	20000004 	.word	0x20000004
 8000998:	200000b4 	.word	0x200000b4

0800099c <fsmHorPedRun>:

void fsmHorPedRun(){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	switch(hor_ped){
 80009a0:	4b52      	ldr	r3, [pc, #328]	; (8000aec <fsmHorPedRun+0x150>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3b0c      	subs	r3, #12
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	f200 8093 	bhi.w	8000ad2 <fsmHorPedRun+0x136>
 80009ac:	a201      	add	r2, pc, #4	; (adr r2, 80009b4 <fsmHorPedRun+0x18>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009c9 	.word	0x080009c9
 80009b8:	080009f9 	.word	0x080009f9
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a6d 	.word	0x08000a6d
 80009c4:	08000aab 	.word	0x08000aab
		case PED_OFF:
			//Reset buzzer
			buzzer_time = BUZZER_time;
 80009c8:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <fsmHorPedRun+0x154>)
 80009ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009ce:	601a      	str	r2, [r3, #0]
			pul = BUZZER_pul;
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <fsmHorPedRun+0x158>)
 80009d2:	f240 2226 	movw	r2, #550	; 0x226
 80009d6:	601a      	str	r2, [r3, #0]
			state = 1;
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <fsmHorPedRun+0x15c>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(BUTTON_PED)){
 80009de:	2003      	movs	r0, #3
 80009e0:	f7ff fce2 	bl	80003a8 <isButtonPressed>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d075      	beq.n	8000ad6 <fsmHorPedRun+0x13a>
				ver_ped = PED_ON;
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <fsmHorPedRun+0x160>)
 80009ec:	220d      	movs	r2, #13
 80009ee:	601a      	str	r2, [r3, #0]
				hor_ped = PED_ON;
 80009f0:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <fsmHorPedRun+0x150>)
 80009f2:	220d      	movs	r2, #13
 80009f4:	601a      	str	r2, [r3, #0]
			}
			break;
 80009f6:	e06e      	b.n	8000ad6 <fsmHorPedRun+0x13a>
		case PED_ON:
			if(isButtonPressed(BUTTON_PED)){
 80009f8:	2003      	movs	r0, #3
 80009fa:	f7ff fcd5 	bl	80003a8 <isButtonPressed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <fsmHorPedRun+0x74>
				ver_ped = PED_OFF;
 8000a04:	4b3d      	ldr	r3, [pc, #244]	; (8000afc <fsmHorPedRun+0x160>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <fsmHorPedRun+0x150>)
 8000a0c:	220c      	movs	r2, #12
 8000a0e:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 8000a10:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <fsmHorPedRun+0x164>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d102      	bne.n	8000a1e <fsmHorPedRun+0x82>
				hor_ped = WALK_ALLOW;
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <fsmHorPedRun+0x150>)
 8000a1a:	220e      	movs	r2, #14
 8000a1c:	601a      	str	r2, [r3, #0]
			}
			if((horizontal_status == AUTO_GREEN) || (horizontal_status == AUTO_YELLOW)){
 8000a1e:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <fsmHorPedRun+0x164>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d003      	beq.n	8000a2e <fsmHorPedRun+0x92>
 8000a26:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <fsmHorPedRun+0x164>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d155      	bne.n	8000ada <fsmHorPedRun+0x13e>
				hor_ped = WALK_STOP;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <fsmHorPedRun+0x150>)
 8000a30:	2210      	movs	r2, #16
 8000a32:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a34:	e051      	b.n	8000ada <fsmHorPedRun+0x13e>
		case WALK_ALLOW:
			if(isButtonPressed(BUTTON_PED)){
 8000a36:	2003      	movs	r0, #3
 8000a38:	f7ff fcb6 	bl	80003a8 <isButtonPressed>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d005      	beq.n	8000a4e <fsmHorPedRun+0xb2>
				ver_ped = PED_OFF;
 8000a42:	4b2e      	ldr	r3, [pc, #184]	; (8000afc <fsmHorPedRun+0x160>)
 8000a44:	220c      	movs	r2, #12
 8000a46:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <fsmHorPedRun+0x150>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
			}
			if(currentCounter(0) <= 300){
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fd6a 	bl	8001528 <currentCounter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a5a:	dc40      	bgt.n	8000ade <fsmHorPedRun+0x142>
				hor_ped = BUZZER_ON;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <fsmHorPedRun+0x150>)
 8000a5e:	220f      	movs	r2, #15
 8000a60:	601a      	str	r2, [r3, #0]
				setTimer(2, 100);
 8000a62:	2164      	movs	r1, #100	; 0x64
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 fd83 	bl	8001570 <setTimer>
			}
			break;
 8000a6a:	e038      	b.n	8000ade <fsmHorPedRun+0x142>
		case BUZZER_ON:
			if(isButtonPressed(BUTTON_PED)){
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f7ff fc9b 	bl	80003a8 <isButtonPressed>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d005      	beq.n	8000a84 <fsmHorPedRun+0xe8>
				ver_ped = PED_OFF;
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <fsmHorPedRun+0x160>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <fsmHorPedRun+0x150>)
 8000a80:	220c      	movs	r2, #12
 8000a82:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_GREEN){
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <fsmHorPedRun+0x164>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d12a      	bne.n	8000ae2 <fsmHorPedRun+0x146>
				hor_ped = WALK_STOP;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <fsmHorPedRun+0x150>)
 8000a8e:	2210      	movs	r2, #16
 8000a90:	601a      	str	r2, [r3, #0]
				//Reset buzzer
				buzzer_time = BUZZER_time;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <fsmHorPedRun+0x154>)
 8000a94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a98:	601a      	str	r2, [r3, #0]
				pul = BUZZER_pul;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <fsmHorPedRun+0x158>)
 8000a9c:	f240 2226 	movw	r2, #550	; 0x226
 8000aa0:	601a      	str	r2, [r3, #0]
				state = 0;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <fsmHorPedRun+0x15c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
			}
			break;
 8000aa8:	e01b      	b.n	8000ae2 <fsmHorPedRun+0x146>
		case WALK_STOP:
			if(isButtonPressed(BUTTON_PED)){
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f7ff fc7c 	bl	80003a8 <isButtonPressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <fsmHorPedRun+0x126>
				ver_ped = PED_OFF;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <fsmHorPedRun+0x160>)
 8000ab8:	220c      	movs	r2, #12
 8000aba:	601a      	str	r2, [r3, #0]
				hor_ped = PED_OFF;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <fsmHorPedRun+0x150>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
			}
			if(horizontal_status == AUTO_RED){
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <fsmHorPedRun+0x164>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10d      	bne.n	8000ae6 <fsmHorPedRun+0x14a>
				hor_ped = WALK_ALLOW;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <fsmHorPedRun+0x150>)
 8000acc:	220e      	movs	r2, #14
 8000ace:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ad0:	e009      	b.n	8000ae6 <fsmHorPedRun+0x14a>
		default:
			break;
 8000ad2:	bf00      	nop
 8000ad4:	e008      	b.n	8000ae8 <fsmHorPedRun+0x14c>
			break;
 8000ad6:	bf00      	nop
 8000ad8:	e006      	b.n	8000ae8 <fsmHorPedRun+0x14c>
			break;
 8000ada:	bf00      	nop
 8000adc:	e004      	b.n	8000ae8 <fsmHorPedRun+0x14c>
			break;
 8000ade:	bf00      	nop
 8000ae0:	e002      	b.n	8000ae8 <fsmHorPedRun+0x14c>
			break;
 8000ae2:	bf00      	nop
 8000ae4:	e000      	b.n	8000ae8 <fsmHorPedRun+0x14c>
			break;
 8000ae6:	bf00      	nop
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000004 	.word	0x20000004
 8000af0:	20000008 	.word	0x20000008
 8000af4:	2000000c 	.word	0x2000000c
 8000af8:	200000b8 	.word	0x200000b8
 8000afc:	20000000 	.word	0x20000000
 8000b00:	200000b0 	.word	0x200000b0

08000b04 <fsmPedestrianModeRun>:

void fsmPedestrianModeRun() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	fsmVerPedRun();
 8000b08:	f7ff fe94 	bl	8000834 <fsmVerPedRun>
	fsmHorPedRun();
 8000b0c:	f7ff ff46 	bl	800099c <fsmHorPedRun>

	switch(ver_ped){
 8000b10:	4b9a      	ldr	r3, [pc, #616]	; (8000d7c <fsmPedestrianModeRun+0x278>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3b0c      	subs	r3, #12
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	f200 8090 	bhi.w	8000c3c <fsmPedestrianModeRun+0x138>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <fsmPedestrianModeRun+0x20>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b39 	.word	0x08000b39
 8000b28:	08000c3d 	.word	0x08000c3d
 8000b2c:	08000b51 	.word	0x08000b51
 8000b30:	08000b69 	.word	0x08000b69
 8000b34:	08000c25 	.word	0x08000c25
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4890      	ldr	r0, [pc, #576]	; (8000d80 <fsmPedestrianModeRun+0x27c>)
 8000b3e:	f001 fa78 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	488e      	ldr	r0, [pc, #568]	; (8000d84 <fsmPedestrianModeRun+0x280>)
 8000b4a:	f001 fa72 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000b4e:	e078      	b.n	8000c42 <fsmPedestrianModeRun+0x13e>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_OFF);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2104      	movs	r1, #4
 8000b54:	488a      	ldr	r0, [pc, #552]	; (8000d80 <fsmPedestrianModeRun+0x27c>)
 8000b56:	f001 fa6c 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_ON);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b60:	4888      	ldr	r0, [pc, #544]	; (8000d84 <fsmPedestrianModeRun+0x280>)
 8000b62:	f001 fa66 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000b66:	e06c      	b.n	8000c42 <fsmPedestrianModeRun+0x13e>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 fced 	bl	8001548 <isTimerUp>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d028      	beq.n	8000bc6 <fsmPedestrianModeRun+0xc2>
 8000b74:	4b84      	ldr	r3, [pc, #528]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d124      	bne.n	8000bc6 <fsmPedestrianModeRun+0xc2>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, pul);
 8000b7c:	4b83      	ldr	r3, [pc, #524]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b83      	ldr	r3, [pc, #524]	; (8000d90 <fsmPedestrianModeRun+0x28c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000b86:	4b83      	ldr	r3, [pc, #524]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fcef 	bl	8001570 <setTimer>
				state = 1 - state;
 8000b92:	4b7d      	ldr	r3, [pc, #500]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f1c3 0301 	rsb	r3, r3, #1
 8000b9a:	4a7b      	ldr	r2, [pc, #492]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000b9c:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000b9e:	4b7b      	ldr	r3, [pc, #492]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	dc04      	bgt.n	8000bb4 <fsmPedestrianModeRun+0xb0>
 8000baa:	4b78      	ldr	r3, [pc, #480]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3364      	adds	r3, #100	; 0x64
 8000bb0:	4a76      	ldr	r2, [pc, #472]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000bb2:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000bb4:	4b77      	ldr	r3, [pc, #476]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b64      	cmp	r3, #100	; 0x64
 8000bba:	dd04      	ble.n	8000bc6 <fsmPedestrianModeRun+0xc2>
 8000bbc:	4b75      	ldr	r3, [pc, #468]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3b64      	subs	r3, #100	; 0x64
 8000bc2:	4a74      	ldr	r2, [pc, #464]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000bc4:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 fcbe 	bl	8001548 <isTimerUp>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d036      	beq.n	8000c40 <fsmPedestrianModeRun+0x13c>
 8000bd2:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d132      	bne.n	8000c40 <fsmPedestrianModeRun+0x13c>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_2, 0);
 8000bda:	4b6d      	ldr	r3, [pc, #436]	; (8000d90 <fsmPedestrianModeRun+0x28c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	639a      	str	r2, [r3, #56]	; 0x38
				setTimer(2, buzzer_time);
 8000be2:	4b6c      	ldr	r3, [pc, #432]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4619      	mov	r1, r3
 8000be8:	2002      	movs	r0, #2
 8000bea:	f000 fcc1 	bl	8001570 <setTimer>
				state = 1 - state;
 8000bee:	4b66      	ldr	r3, [pc, #408]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f1c3 0301 	rsb	r3, r3, #1
 8000bf6:	4a64      	ldr	r2, [pc, #400]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000bf8:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000bfa:	4b64      	ldr	r3, [pc, #400]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000c02:	4293      	cmp	r3, r2
 8000c04:	dc04      	bgt.n	8000c10 <fsmPedestrianModeRun+0x10c>
 8000c06:	4b61      	ldr	r3, [pc, #388]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3364      	adds	r3, #100	; 0x64
 8000c0c:	4a5f      	ldr	r2, [pc, #380]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000c0e:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000c10:	4b60      	ldr	r3, [pc, #384]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b64      	cmp	r3, #100	; 0x64
 8000c16:	dd13      	ble.n	8000c40 <fsmPedestrianModeRun+0x13c>
 8000c18:	4b5e      	ldr	r3, [pc, #376]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3b64      	subs	r3, #100	; 0x64
 8000c1e:	4a5d      	ldr	r2, [pc, #372]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000c20:	6013      	str	r3, [r2, #0]
			}
			break;
 8000c22:	e00d      	b.n	8000c40 <fsmPedestrianModeRun+0x13c>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P2_GPIO_Port, LED_RED_P2_Pin, LED_ON);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2104      	movs	r1, #4
 8000c28:	4855      	ldr	r0, [pc, #340]	; (8000d80 <fsmPedestrianModeRun+0x27c>)
 8000c2a:	f001 fa02 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P2_GPIO_Port, LED_GREEN_P2_Pin, LED_OFF);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c34:	4853      	ldr	r0, [pc, #332]	; (8000d84 <fsmPedestrianModeRun+0x280>)
 8000c36:	f001 f9fc 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000c3a:	e002      	b.n	8000c42 <fsmPedestrianModeRun+0x13e>
		default:
			break;
 8000c3c:	bf00      	nop
 8000c3e:	e000      	b.n	8000c42 <fsmPedestrianModeRun+0x13e>
			break;
 8000c40:	bf00      	nop
	}

	switch(hor_ped){
 8000c42:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <fsmPedestrianModeRun+0x294>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3b0c      	subs	r3, #12
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	f200 8092 	bhi.w	8000d72 <fsmPedestrianModeRun+0x26e>
 8000c4e:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <fsmPedestrianModeRun+0x150>)
 8000c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c54:	08000c69 	.word	0x08000c69
 8000c58:	08000d73 	.word	0x08000d73
 8000c5c:	08000c83 	.word	0x08000c83
 8000c60:	08000c9d 	.word	0x08000c9d
 8000c64:	08000d59 	.word	0x08000d59
		case PED_OFF:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6e:	4844      	ldr	r0, [pc, #272]	; (8000d80 <fsmPedestrianModeRun+0x27c>)
 8000c70:	f001 f9df 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7a:	4842      	ldr	r0, [pc, #264]	; (8000d84 <fsmPedestrianModeRun+0x280>)
 8000c7c:	f001 f9d9 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000c80:	e07a      	b.n	8000d78 <fsmPedestrianModeRun+0x274>
		case PED_ON:
			break;
		case WALK_ALLOW:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_OFF);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c88:	483d      	ldr	r0, [pc, #244]	; (8000d80 <fsmPedestrianModeRun+0x27c>)
 8000c8a:	f001 f9d2 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_ON);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	483b      	ldr	r0, [pc, #236]	; (8000d84 <fsmPedestrianModeRun+0x280>)
 8000c96:	f001 f9cc 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000c9a:	e06d      	b.n	8000d78 <fsmPedestrianModeRun+0x274>
		case BUZZER_ON:
			if(isTimerUp(2) && state == 1){
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fc53 	bl	8001548 <isTimerUp>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d028      	beq.n	8000cfa <fsmPedestrianModeRun+0x1f6>
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d124      	bne.n	8000cfa <fsmPedestrianModeRun+0x1f6>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, pul);
 8000cb0:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <fsmPedestrianModeRun+0x28c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f000 fc55 	bl	8001570 <setTimer>
				state = 1 - state;
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f1c3 0301 	rsb	r3, r3, #1
 8000cce:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000cd0:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	dc04      	bgt.n	8000ce8 <fsmPedestrianModeRun+0x1e4>
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3364      	adds	r3, #100	; 0x64
 8000ce4:	4a29      	ldr	r2, [pc, #164]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000ce6:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b64      	cmp	r3, #100	; 0x64
 8000cee:	dd04      	ble.n	8000cfa <fsmPedestrianModeRun+0x1f6>
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3b64      	subs	r3, #100	; 0x64
 8000cf6:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000cf8:	6013      	str	r3, [r2, #0]
			}
			if(isTimerUp(2) && state == 0){
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f000 fc24 	bl	8001548 <isTimerUp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d037      	beq.n	8000d76 <fsmPedestrianModeRun+0x272>
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d133      	bne.n	8000d76 <fsmPedestrianModeRun+0x272>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <fsmPedestrianModeRun+0x28c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(2, buzzer_time);
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f000 fc27 	bl	8001570 <setTimer>
				state = 1 - state;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1c3 0301 	rsb	r3, r3, #1
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <fsmPedestrianModeRun+0x284>)
 8000d2c:	6013      	str	r3, [r2, #0]
				if(pul < 950) pul += 100;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000d36:	4293      	cmp	r3, r2
 8000d38:	dc04      	bgt.n	8000d44 <fsmPedestrianModeRun+0x240>
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3364      	adds	r3, #100	; 0x64
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <fsmPedestrianModeRun+0x288>)
 8000d42:	6013      	str	r3, [r2, #0]
				if(buzzer_time > 100) buzzer_time -= 100;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b64      	cmp	r3, #100	; 0x64
 8000d4a:	dd14      	ble.n	8000d76 <fsmPedestrianModeRun+0x272>
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b64      	subs	r3, #100	; 0x64
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <fsmPedestrianModeRun+0x290>)
 8000d54:	6013      	str	r3, [r2, #0]
			}
			break;
 8000d56:	e00e      	b.n	8000d76 <fsmPedestrianModeRun+0x272>
		case WALK_STOP:
			HAL_GPIO_WritePin(LED_RED_P1_GPIO_Port, LED_RED_P1_Pin, LED_ON);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <fsmPedestrianModeRun+0x27c>)
 8000d60:	f001 f967 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_P1_GPIO_Port, LED_GREEN_P1_Pin, LED_OFF);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <fsmPedestrianModeRun+0x280>)
 8000d6c:	f001 f961 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000d70:	e002      	b.n	8000d78 <fsmPedestrianModeRun+0x274>
		default:
			break;
 8000d72:	bf00      	nop
 8000d74:	e000      	b.n	8000d78 <fsmPedestrianModeRun+0x274>
			break;
 8000d76:	bf00      	nop
	}


}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	40010800 	.word	0x40010800
 8000d88:	200000b8 	.word	0x200000b8
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	2000011c 	.word	0x2000011c
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <fsmTuningModeRun>:
#include "fsm_tuning_mode.h"

int time_count = 0;

void fsmTuningModeRun() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	// FSM for TUNING MODE

	switch (mode) {
 8000da0:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <fsmTuningModeRun+0x154>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b0b      	cmp	r3, #11
 8000da6:	d06d      	beq.n	8000e84 <fsmTuningModeRun+0xe8>
 8000da8:	2b0b      	cmp	r3, #11
 8000daa:	f300 809e 	bgt.w	8000eea <fsmTuningModeRun+0x14e>
 8000dae:	2b09      	cmp	r3, #9
 8000db0:	d002      	beq.n	8000db8 <fsmTuningModeRun+0x1c>
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d033      	beq.n	8000e1e <fsmTuningModeRun+0x82>
			sendTimeInc();

			break;

		default:
			break;
 8000db6:	e098      	b.n	8000eea <fsmTuningModeRun+0x14e>
			if (isButtonPressed(BUTTON_MODE)) {
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff faf5 	bl	80003a8 <isButtonPressed>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <fsmTuningModeRun+0x2e>
				mode = AUTO_MODE;
 8000dc4:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <fsmTuningModeRun+0x154>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff faec 	bl	80003a8 <isButtonPressed>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <fsmTuningModeRun+0x4a>
				RED_time = time_count * 1000;
 8000dd6:	4b47      	ldr	r3, [pc, #284]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	4a45      	ldr	r2, [pc, #276]	; (8000ef8 <fsmTuningModeRun+0x15c>)
 8000de4:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff fade 	bl	80003a8 <isButtonPressed>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <fsmTuningModeRun+0x62>
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff faf2 	bl	80003dc <isButtonLongPressed>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00c      	beq.n	8000e18 <fsmTuningModeRun+0x7c>
				if (time_count >= 99) time_count = 5;
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b62      	cmp	r3, #98	; 0x62
 8000e04:	dd03      	ble.n	8000e0e <fsmTuningModeRun+0x72>
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e08:	2205      	movs	r2, #5
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e004      	b.n	8000e18 <fsmTuningModeRun+0x7c>
				else time_count++;
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a37      	ldr	r2, [pc, #220]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e16:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000e18:	f000 fd04 	bl	8001824 <sendTimeInc>
			break;
 8000e1c:	e066      	b.n	8000eec <fsmTuningModeRun+0x150>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fac2 	bl	80003a8 <isButtonPressed>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <fsmTuningModeRun+0x94>
				mode = AUTO_MODE;
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <fsmTuningModeRun+0x154>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff fab9 	bl	80003a8 <isButtonPressed>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d007      	beq.n	8000e4c <fsmTuningModeRun+0xb0>
				GREEN_time = time_count * 1000;
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <fsmTuningModeRun+0x160>)
 8000e4a:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff faab 	bl	80003a8 <isButtonPressed>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <fsmTuningModeRun+0xc8>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fabf 	bl	80003dc <isButtonLongPressed>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00c      	beq.n	8000e7e <fsmTuningModeRun+0xe2>
				if (time_count >= 89) time_count = 3;
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b58      	cmp	r3, #88	; 0x58
 8000e6a:	dd03      	ble.n	8000e74 <fsmTuningModeRun+0xd8>
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e004      	b.n	8000e7e <fsmTuningModeRun+0xe2>
				else time_count++;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000e7c:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000e7e:	f000 fcd1 	bl	8001824 <sendTimeInc>
			break;
 8000e82:	e033      	b.n	8000eec <fsmTuningModeRun+0x150>
			if (isButtonPressed(BUTTON_MODE)) {
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fa8f 	bl	80003a8 <isButtonPressed>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <fsmTuningModeRun+0xfa>
				mode = AUTO_MODE;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <fsmTuningModeRun+0x154>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_SET)) {
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fa86 	bl	80003a8 <isButtonPressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <fsmTuningModeRun+0x116>
				YELLOW_time = time_count * 1000;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <fsmTuningModeRun+0x164>)
 8000eb0:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_INC) || isButtonLongPressed(BUTTON_INC)) {
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f7ff fa78 	bl	80003a8 <isButtonPressed>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <fsmTuningModeRun+0x12e>
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fa8c 	bl	80003dc <isButtonLongPressed>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <fsmTuningModeRun+0x148>
				if (time_count >= 10) time_count = 2;
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b09      	cmp	r3, #9
 8000ed0:	dd03      	ble.n	8000eda <fsmTuningModeRun+0x13e>
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e004      	b.n	8000ee4 <fsmTuningModeRun+0x148>
				else time_count++;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <fsmTuningModeRun+0x158>)
 8000ee2:	6013      	str	r3, [r2, #0]
			sendTimeInc();
 8000ee4:	f000 fc9e 	bl	8001824 <sendTimeInc>
			break;
 8000ee8:	e000      	b.n	8000eec <fsmTuningModeRun+0x150>
			break;
 8000eea:	bf00      	nop
	}
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000c0 	.word	0x200000c0
 8000ef4:	200000bc 	.word	0x200000bc
 8000ef8:	20000018 	.word	0x20000018
 8000efc:	2000001c 	.word	0x2000001c
 8000f00:	20000020 	.word	0x20000020

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f000 fcd8 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f81c 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 f908 	bl	8001124 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f14:	f000 f8dc 	bl	80010d0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f18:	f000 f858 	bl	8000fcc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0x40>)
 8000f1e:	f001 fd2d 	bl	800297c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <main+0x40>)
 8000f26:	f001 fdd3 	bl	8002ad0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <main+0x40>)
 8000f2e:	f001 fdcf 	bl	8002ad0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsmAutoModeRun();
 8000f32:	f7ff fb91 	bl	8000658 <fsmAutoModeRun>
	  fsmManualModeRun();
 8000f36:	f7ff fbaf 	bl	8000698 <fsmManualModeRun>
	  fsmTuningModeRun();
 8000f3a:	f7ff ff2f 	bl	8000d9c <fsmTuningModeRun>
	  fsmPedestrianModeRun();
 8000f3e:	f7ff fde1 	bl	8000b04 <fsmPedestrianModeRun>
	  fsmAutoModeRun();
 8000f42:	e7f6      	b.n	8000f32 <main+0x2e>
 8000f44:	2000011c 	.word	0x2000011c

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b090      	sub	sp, #64	; 0x40
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	2228      	movs	r2, #40	; 0x28
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f920 	bl	800419c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f72:	2310      	movs	r3, #16
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f7e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f88d 	bl	80020a8 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f94:	f000 f972 	bl	800127c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 faf8 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fbe:	f000 f95d 	bl	800127c <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3740      	adds	r7, #64	; 0x40
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	; 0x38
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8000ffe:	4a33      	ldr	r2, [pc, #204]	; (80010cc <MX_TIM3_Init+0x100>)
 8001000:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8001004:	223f      	movs	r2, #63	; 0x3f
 8001006:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <MX_TIM3_Init+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8001010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001014:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_TIM3_Init+0xfc>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001022:	4829      	ldr	r0, [pc, #164]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8001024:	f001 fc5a 	bl	80028dc <HAL_TIM_Base_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800102e:	f000 f925 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103c:	4619      	mov	r1, r3
 800103e:	4822      	ldr	r0, [pc, #136]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8001040:	f001 ffae 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800104a:	f000 f917 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800104e:	481e      	ldr	r0, [pc, #120]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8001050:	f001 fce6 	bl	8002a20 <HAL_TIM_PWM_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800105a:	f000 f90f 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4619      	mov	r1, r3
 800106c:	4816      	ldr	r0, [pc, #88]	; (80010c8 <MX_TIM3_Init+0xfc>)
 800106e:	f002 fb23 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001078:	f000 f900 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107c:	2360      	movs	r3, #96	; 0x60
 800107e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_TIM3_Init+0xfc>)
 8001094:	f001 fec6 	bl	8002e24 <HAL_TIM_PWM_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800109e:	f000 f8ed 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2204      	movs	r2, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM3_Init+0xfc>)
 80010aa:	f001 febb 	bl	8002e24 <HAL_TIM_PWM_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010b4:	f000 f8e2 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM3_Init+0xfc>)
 80010ba:	f000 f93d 	bl	8001338 <HAL_TIM_MspPostInit>

}
 80010be:	bf00      	nop
 80010c0:	3738      	adds	r7, #56	; 0x38
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000011c 	.word	0x2000011c
 80010cc:	40000400 	.word	0x40000400

080010d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_USART2_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART2_UART_Init+0x4c>)
 8001108:	f002 fb46 	bl	8003798 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 f8b3 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000017c 	.word	0x2000017c
 8001120:	40004400 	.word	0x40004400

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <MX_GPIO_Init+0x12c>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a44      	ldr	r2, [pc, #272]	; (8001250 <MX_GPIO_Init+0x12c>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001156:	f043 0320 	orr.w	r3, r3, #32
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <MX_GPIO_Init+0x12c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <MX_GPIO_Init+0x12c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a38      	ldr	r2, [pc, #224]	; (8001250 <MX_GPIO_Init+0x12c>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a32      	ldr	r2, [pc, #200]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <MX_GPIO_Init+0x12c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 800119e:	482d      	ldr	r0, [pc, #180]	; (8001254 <MX_GPIO_Init+0x130>)
 80011a0:	f000 ff47 	bl	8002032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 80011a4:	2200      	movs	r2, #0
 80011a6:	f240 413c 	movw	r1, #1084	; 0x43c
 80011aa:	482b      	ldr	r0, [pc, #172]	; (8001258 <MX_GPIO_Init+0x134>)
 80011ac:	f000 ff41 	bl	8002032 <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_GPIO_Init+0x138>)
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	4826      	ldr	r0, [pc, #152]	; (8001260 <MX_GPIO_Init+0x13c>)
 80011c6:	f000 fd99 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_PED_Pin BUTTON_MODE_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_PED_Pin|BUTTON_MODE_Pin|BUTTON_SET_Pin;
 80011ca:	2313      	movs	r3, #19
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <MX_GPIO_Init+0x130>)
 80011de:	f000 fd8d 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_GREEN_P1_Pin LED_GREEN_P2_Pin LED_RED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_GREEN_P1_Pin|LED_GREEN_P2_Pin|LED_RED_1_Pin;
 80011e2:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <MX_GPIO_Init+0x130>)
 80011fc:	f000 fd7e 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INC_Pin */
  GPIO_InitStruct.Pin = BUTTON_INC_Pin;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INC_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <MX_GPIO_Init+0x134>)
 8001214:	f000 fd72 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_P2_Pin LED_RED_P1_Pin LED_GREEN_1_Pin LED_GREEN_2_Pin
                           LED_RED_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_P2_Pin|LED_RED_P1_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 8001218:	f240 433c 	movw	r3, #1084	; 0x43c
 800121c:	613b      	str	r3, [r7, #16]
                          |LED_RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <MX_GPIO_Init+0x134>)
 8001232:	f000 fd63 	bl	8001cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2028      	movs	r0, #40	; 0x28
 800123c:	f000 fc77 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001240:	2028      	movs	r0, #40	; 0x28
 8001242:	f000 fc90 	bl	8001b66 <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00
 800125c:	10110000 	.word	0x10110000
 8001260:	40011000 	.word	0x40011000

08001264 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	timerRun();
 800126c:	f000 f99e 	bl	80015ac <timerRun>
	getKeyInput();
 8001270:	f7ff f920 	bl	80004b4 <getKeyInput>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_MspInit+0x5c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x5c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x60>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_MspInit+0x60>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000

080012ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_TIM_Base_MspInit+0x44>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d113      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_TIM_Base_MspInit+0x48>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_TIM_Base_MspInit+0x48>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_TIM_Base_MspInit+0x48>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f000 fc07 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001320:	201d      	movs	r0, #29
 8001322:	f000 fc20 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40000400 	.word	0x40000400
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_TIM_MspPostInit+0x58>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d117      	bne.n	8001388 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_TIM_MspPostInit+0x5c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_TIM_MspPostInit+0x5c>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_TIM_MspPostInit+0x5c>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001370:	23c0      	movs	r3, #192	; 0xc0
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_TIM_MspPostInit+0x60>)
 8001384:	f000 fcba 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40000400 	.word	0x40000400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800

0800139c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_UART_MspInit+0x80>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d12b      	bne.n	8001414 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_UART_MspInit+0x84>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_UART_MspInit+0x84>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c6:	61d3      	str	r3, [r2, #28]
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_UART_MspInit+0x84>)
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_UART_MspInit+0x84>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_UART_MspInit+0x84>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_UART_MspInit+0x84>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ec:	230c      	movs	r3, #12
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <HAL_UART_MspInit+0x88>)
 8001400:	f000 fc7c 	bl	8001cfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	2026      	movs	r0, #38	; 0x26
 800140a:	f000 fb90 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800140e:	2026      	movs	r0, #38	; 0x26
 8001410:	f000 fba9 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40004400 	.word	0x40004400
 8001420:	40021000 	.word	0x40021000
 8001424:	40010800 	.word	0x40010800

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146e:	f000 fa6b 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <TIM3_IRQHandler+0x10>)
 800147e:	f001 fbc9 	bl	8002c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000011c 	.word	0x2000011c

0800148c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <USART2_IRQHandler+0x10>)
 8001492:	f002 fa61 	bl	8003958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000017c 	.word	0x2000017c

080014a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a8:	f000 fddc 	bl	8002064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f002 fe32 	bl	8004148 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20005000 	.word	0x20005000
 8001510:	00000400 	.word	0x00000400
 8001514:	200000c4 	.word	0x200000c4
 8001518:	20000208 	.word	0x20000208

0800151c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <currentCounter>:
#include "timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

int currentCounter(int timer) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	return timer_counter[timer];
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <currentCounter+0x1c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000164 	.word	0x20000164

08001548 <isTimerUp>:

int isTimerUp(int timer) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <isTimerUp+0x24>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	2b01      	cmp	r3, #1
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000170 	.word	0x20000170

08001570 <setTimer>:

void setTimer(int timer, int duration){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration / timer_cycle;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <setTimer+0x30>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	fb92 f2f3 	sdiv	r2, r2, r3
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <setTimer+0x34>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <setTimer+0x38>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2100      	movs	r1, #0
 8001592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000010 	.word	0x20000010
 80015a4:	20000164 	.word	0x20000164
 80015a8:	20000170 	.word	0x20000170

080015ac <timerRun>:
void timerRun(){
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	e01c      	b.n	80015f2 <timerRun+0x46>
		if(timer_counter[timer] > 0){
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <timerRun+0x58>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd13      	ble.n	80015ec <timerRun+0x40>
			timer_counter[timer]--;
 80015c4:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <timerRun+0x58>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <timerRun+0x58>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0) {
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <timerRun+0x58>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d104      	bne.n	80015ec <timerRun+0x40>
				timer_flag[timer] = 1;
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <timerRun+0x5c>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2101      	movs	r1, #1
 80015e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < NO_OF_TIMER; timer++) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3301      	adds	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	dddf      	ble.n	80015b8 <timerRun+0xc>
			}
		}
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000164 	.word	0x20000164
 8001608:	20000170 	.word	0x20000170

0800160c <sendTimerCounter>:
int count1 = 0;
int count2 = 0;
char str[50];
UART_HandleTypeDef huart2;

void sendTimerCounter() {
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	if (count1 != currentCounter(0) / 100) {
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ff89 	bl	8001528 <currentCounter>
 8001616:	4603      	mov	r3, r0
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <sendTimerCounter+0xac>)
 800161a:	fb82 1203 	smull	r1, r2, r2, r3
 800161e:	1152      	asrs	r2, r2, #5
 8001620:	17db      	asrs	r3, r3, #31
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <sendTimerCounter+0xb0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d01a      	beq.n	8001662 <sendTimerCounter+0x56>
	  count1 = currentCounter(0) / 100;
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff ff7b 	bl	8001528 <currentCounter>
 8001632:	4603      	mov	r3, r0
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <sendTimerCounter+0xac>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	1152      	asrs	r2, r2, #5
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <sendTimerCounter+0xb0>)
 8001642:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "H: ", count1), 100);
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <sendTimerCounter+0xb0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <sendTimerCounter+0xb4>)
 800164a:	491e      	ldr	r1, [pc, #120]	; (80016c4 <sendTimerCounter+0xb8>)
 800164c:	481e      	ldr	r0, [pc, #120]	; (80016c8 <sendTimerCounter+0xbc>)
 800164e:	f002 fdad 	bl	80041ac <siprintf>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	2364      	movs	r3, #100	; 0x64
 8001658:	491b      	ldr	r1, [pc, #108]	; (80016c8 <sendTimerCounter+0xbc>)
 800165a:	481c      	ldr	r0, [pc, #112]	; (80016cc <sendTimerCounter+0xc0>)
 800165c:	f002 f8e9 	bl	8003832 <HAL_UART_Transmit>

	else if (count2 != currentCounter(1) / 100) {
	  count2 = currentCounter(1) / 100;
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "V: ", count2), 100);
	}
}
 8001660:	e027      	b.n	80016b2 <sendTimerCounter+0xa6>
	else if (count2 != currentCounter(1) / 100) {
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff ff60 	bl	8001528 <currentCounter>
 8001668:	4603      	mov	r3, r0
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <sendTimerCounter+0xac>)
 800166c:	fb82 1203 	smull	r1, r2, r2, r3
 8001670:	1152      	asrs	r2, r2, #5
 8001672:	17db      	asrs	r3, r3, #31
 8001674:	1ad2      	subs	r2, r2, r3
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <sendTimerCounter+0xc4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d019      	beq.n	80016b2 <sendTimerCounter+0xa6>
	  count2 = currentCounter(1) / 100;
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff ff52 	bl	8001528 <currentCounter>
 8001684:	4603      	mov	r3, r0
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <sendTimerCounter+0xac>)
 8001688:	fb82 1203 	smull	r1, r2, r2, r3
 800168c:	1152      	asrs	r2, r2, #5
 800168e:	17db      	asrs	r3, r3, #31
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <sendTimerCounter+0xc4>)
 8001694:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "V: ", count2), 100);
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <sendTimerCounter+0xc4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <sendTimerCounter+0xc8>)
 800169c:	4909      	ldr	r1, [pc, #36]	; (80016c4 <sendTimerCounter+0xb8>)
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <sendTimerCounter+0xbc>)
 80016a0:	f002 fd84 	bl	80041ac <siprintf>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	4907      	ldr	r1, [pc, #28]	; (80016c8 <sendTimerCounter+0xbc>)
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <sendTimerCounter+0xc0>)
 80016ae:	f002 f8c0 	bl	8003832 <HAL_UART_Transmit>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	51eb851f 	.word	0x51eb851f
 80016bc:	200000cc 	.word	0x200000cc
 80016c0:	08004a38 	.word	0x08004a38
 80016c4:	08004a3c 	.word	0x08004a3c
 80016c8:	200001c0 	.word	0x200001c0
 80016cc:	2000017c 	.word	0x2000017c
 80016d0:	200000d0 	.word	0x200000d0
 80016d4:	08004a44 	.word	0x08004a44

080016d8 <sendTimeDuration>:

void sendTimeDuration() {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	switch (mode) {
 80016dc:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <sendTimeDuration+0x11c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3b05      	subs	r3, #5
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d87d      	bhi.n	80017e2 <sendTimeDuration+0x10a>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <sendTimeDuration+0x14>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	08001705 	.word	0x08001705
 80016f4:	0800174f 	.word	0x0800174f
 80016f8:	08001799 	.word	0x08001799
		case MAN_MODE:
			count = 0;
 80016fc:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <sendTimeDuration+0x120>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
			break;
 8001702:	e075      	b.n	80017f0 <sendTimeDuration+0x118>

		case MAN_RED:
			if (count != RED_time / 1000) {
 8001704:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <sendTimeDuration+0x124>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <sendTimeDuration+0x128>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1192      	asrs	r2, r2, #6
 8001710:	17db      	asrs	r3, r3, #31
 8001712:	1ad2      	subs	r2, r2, r3
 8001714:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <sendTimeDuration+0x120>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d064      	beq.n	80017e6 <sendTimeDuration+0x10e>
				count = RED_time / 1000;
 800171c:	4b37      	ldr	r3, [pc, #220]	; (80017fc <sendTimeDuration+0x124>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a37      	ldr	r2, [pc, #220]	; (8001800 <sendTimeDuration+0x128>)
 8001722:	fb82 1203 	smull	r1, r2, r2, r3
 8001726:	1192      	asrs	r2, r2, #6
 8001728:	17db      	asrs	r3, r3, #31
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <sendTimeDuration+0x120>)
 800172e:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Red = ", count), 100);
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <sendTimeDuration+0x120>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a33      	ldr	r2, [pc, #204]	; (8001804 <sendTimeDuration+0x12c>)
 8001736:	4934      	ldr	r1, [pc, #208]	; (8001808 <sendTimeDuration+0x130>)
 8001738:	4834      	ldr	r0, [pc, #208]	; (800180c <sendTimeDuration+0x134>)
 800173a:	f002 fd37 	bl	80041ac <siprintf>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	4931      	ldr	r1, [pc, #196]	; (800180c <sendTimeDuration+0x134>)
 8001746:	4832      	ldr	r0, [pc, #200]	; (8001810 <sendTimeDuration+0x138>)
 8001748:	f002 f873 	bl	8003832 <HAL_UART_Transmit>
			}
			break;
 800174c:	e04b      	b.n	80017e6 <sendTimeDuration+0x10e>

		case MAN_GREEN:
			if (count != GREEN_time / 1000) {
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <sendTimeDuration+0x13c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <sendTimeDuration+0x128>)
 8001754:	fb82 1203 	smull	r1, r2, r2, r3
 8001758:	1192      	asrs	r2, r2, #6
 800175a:	17db      	asrs	r3, r3, #31
 800175c:	1ad2      	subs	r2, r2, r3
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <sendTimeDuration+0x120>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d041      	beq.n	80017ea <sendTimeDuration+0x112>
				count = GREEN_time / 1000;
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <sendTimeDuration+0x13c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a25      	ldr	r2, [pc, #148]	; (8001800 <sendTimeDuration+0x128>)
 800176c:	fb82 1203 	smull	r1, r2, r2, r3
 8001770:	1192      	asrs	r2, r2, #6
 8001772:	17db      	asrs	r3, r3, #31
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <sendTimeDuration+0x120>)
 8001778:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Green = ", count), 100);
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <sendTimeDuration+0x120>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a26      	ldr	r2, [pc, #152]	; (8001818 <sendTimeDuration+0x140>)
 8001780:	4921      	ldr	r1, [pc, #132]	; (8001808 <sendTimeDuration+0x130>)
 8001782:	4822      	ldr	r0, [pc, #136]	; (800180c <sendTimeDuration+0x134>)
 8001784:	f002 fd12 	bl	80041ac <siprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	2364      	movs	r3, #100	; 0x64
 800178e:	491f      	ldr	r1, [pc, #124]	; (800180c <sendTimeDuration+0x134>)
 8001790:	481f      	ldr	r0, [pc, #124]	; (8001810 <sendTimeDuration+0x138>)
 8001792:	f002 f84e 	bl	8003832 <HAL_UART_Transmit>
			}
			break;
 8001796:	e028      	b.n	80017ea <sendTimeDuration+0x112>

		case MAN_YELLOW:
			if (count != YELLOW_time / 1000) {
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <sendTimeDuration+0x144>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a18      	ldr	r2, [pc, #96]	; (8001800 <sendTimeDuration+0x128>)
 800179e:	fb82 1203 	smull	r1, r2, r2, r3
 80017a2:	1192      	asrs	r2, r2, #6
 80017a4:	17db      	asrs	r3, r3, #31
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <sendTimeDuration+0x120>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d01e      	beq.n	80017ee <sendTimeDuration+0x116>
				count = YELLOW_time / 1000;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <sendTimeDuration+0x144>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <sendTimeDuration+0x128>)
 80017b6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ba:	1192      	asrs	r2, r2, #6
 80017bc:	17db      	asrs	r3, r3, #31
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <sendTimeDuration+0x120>)
 80017c2:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d\r\n", "Yellow = ", count), 100);
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <sendTimeDuration+0x120>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a15      	ldr	r2, [pc, #84]	; (8001820 <sendTimeDuration+0x148>)
 80017ca:	490f      	ldr	r1, [pc, #60]	; (8001808 <sendTimeDuration+0x130>)
 80017cc:	480f      	ldr	r0, [pc, #60]	; (800180c <sendTimeDuration+0x134>)
 80017ce:	f002 fced 	bl	80041ac <siprintf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	490c      	ldr	r1, [pc, #48]	; (800180c <sendTimeDuration+0x134>)
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <sendTimeDuration+0x138>)
 80017dc:	f002 f829 	bl	8003832 <HAL_UART_Transmit>
			}
			break;
 80017e0:	e005      	b.n	80017ee <sendTimeDuration+0x116>

		default:
			break;
 80017e2:	bf00      	nop
 80017e4:	e004      	b.n	80017f0 <sendTimeDuration+0x118>
			break;
 80017e6:	bf00      	nop
 80017e8:	e002      	b.n	80017f0 <sendTimeDuration+0x118>
			break;
 80017ea:	bf00      	nop
 80017ec:	e000      	b.n	80017f0 <sendTimeDuration+0x118>
			break;
 80017ee:	bf00      	nop
	}
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200000c0 	.word	0x200000c0
 80017f8:	200000c8 	.word	0x200000c8
 80017fc:	20000018 	.word	0x20000018
 8001800:	10624dd3 	.word	0x10624dd3
 8001804:	08004a48 	.word	0x08004a48
 8001808:	08004a3c 	.word	0x08004a3c
 800180c:	200001c0 	.word	0x200001c0
 8001810:	2000017c 	.word	0x2000017c
 8001814:	2000001c 	.word	0x2000001c
 8001818:	08004a50 	.word	0x08004a50
 800181c:	20000020 	.word	0x20000020
 8001820:	08004a5c 	.word	0x08004a5c

08001824 <sendTimeInc>:

void sendTimeInc() {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	if (count != time_count) {
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <sendTimeInc+0x38>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <sendTimeInc+0x3c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d011      	beq.n	8001858 <sendTimeInc+0x34>
		count = time_count;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <sendTimeInc+0x3c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a08      	ldr	r2, [pc, #32]	; (800185c <sendTimeInc+0x38>)
 800183a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, str, sprintf(str, "%d\r\n", count), 100);
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <sendTimeInc+0x38>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <sendTimeInc+0x40>)
 8001844:	4808      	ldr	r0, [pc, #32]	; (8001868 <sendTimeInc+0x44>)
 8001846:	f002 fcb1 	bl	80041ac <siprintf>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	2364      	movs	r3, #100	; 0x64
 8001850:	4905      	ldr	r1, [pc, #20]	; (8001868 <sendTimeInc+0x44>)
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <sendTimeInc+0x48>)
 8001854:	f001 ffed 	bl	8003832 <HAL_UART_Transmit>
	}
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000c8 	.word	0x200000c8
 8001860:	200000bc 	.word	0x200000bc
 8001864:	08004a68 	.word	0x08004a68
 8001868:	200001c0 	.word	0x200001c0
 800186c:	2000017c 	.word	0x2000017c

08001870 <Reset_Handler>:
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopFillZerobss+0x12>)
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopFillZerobss+0x1a>)
 8001876:	2300      	movs	r3, #0
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:
 800187a:	58d4      	ldr	r4, [r2, r3]
 800187c:	50c4      	str	r4, [r0, r3]
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:
 8001880:	18c4      	adds	r4, r0, r3
 8001882:	428c      	cmp	r4, r1
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopFillZerobss+0x1e>)
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopFillZerobss+0x22>)
 800188a:	2300      	movs	r3, #0
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:
 8001892:	42a2      	cmp	r2, r4
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>
 8001896:	f7ff fe41 	bl	800151c <SystemInit>
 800189a:	f002 fc5b 	bl	8004154 <__libc_init_array>
 800189e:	f7ff fb31 	bl	8000f04 <main>
 80018a2:	4770      	bx	lr
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000094 	.word	0x20000094
 80018ac:	08004ad4 	.word	0x08004ad4
 80018b0:	20000094 	.word	0x20000094
 80018b4:	20000208 	.word	0x20000208

080018b8 <ADC1_2_IRQHandler>:
 80018b8:	e7fe      	b.n	80018b8 <ADC1_2_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x28>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f923 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fcd6 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40022000 	.word	0x40022000

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f93b 	bl	8001b82 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f903 	bl	8001b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000024 	.word	0x20000024
 8001940:	2000002c 	.word	0x2000002c
 8001944:	20000028 	.word	0x20000028

08001948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x1c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x20>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_IncTick+0x20>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	2000002c 	.word	0x2000002c
 8001968:	200001f4 	.word	0x200001f4

0800196c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_GetTick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	200001f4 	.word	0x200001f4

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4906      	ldr	r1, [pc, #24]	; (8001a18 <__NVIC_EnableIRQ+0x34>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f7ff ff90 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff2d 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff42 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff90 	bl	8001a70 <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5f 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff35 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffa2 	bl	8001ad4 <SysTick_Config>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e020      	b.n	8001c04 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 020e 	bic.w	r2, r2, #14
 8001bd0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d005      	beq.n	8001c32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e051      	b.n	8001cd6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 020e 	bic.w	r2, r2, #14
 8001c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_DMA_Abort_IT+0xd0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d029      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0xa0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <HAL_DMA_Abort_IT+0xd4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d022      	beq.n	8001cac <HAL_DMA_Abort_IT+0x9c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <HAL_DMA_Abort_IT+0xd8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d01a      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x96>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_DMA_Abort_IT+0xdc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d012      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x90>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <HAL_DMA_Abort_IT+0xe0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00a      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x8a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_DMA_Abort_IT+0xe4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d102      	bne.n	8001c94 <HAL_DMA_Abort_IT+0x84>
 8001c8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c92:	e00e      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xa2>
 8001c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c98:	e00b      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xa2>
 8001c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c9e:	e008      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xa2>
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	e005      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xa2>
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	e002      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xa2>
 8001cac:	2310      	movs	r3, #16
 8001cae:	e000      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xa2>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_DMA_Abort_IT+0xe8>)
 8001cb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
    } 
  }
  return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40020008 	.word	0x40020008
 8001ce4:	4002001c 	.word	0x4002001c
 8001ce8:	40020030 	.word	0x40020030
 8001cec:	40020044 	.word	0x40020044
 8001cf0:	40020058 	.word	0x40020058
 8001cf4:	4002006c 	.word	0x4002006c
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b08b      	sub	sp, #44	; 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	e169      	b.n	8001fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d10:	2201      	movs	r2, #1
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8158 	bne.w	8001fde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a9a      	ldr	r2, [pc, #616]	; (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d38:	4a98      	ldr	r2, [pc, #608]	; (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d875      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d3e:	4a98      	ldr	r2, [pc, #608]	; (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d058      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d44:	4a96      	ldr	r2, [pc, #600]	; (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d86f      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d4a:	4a96      	ldr	r2, [pc, #600]	; (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d052      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d50:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d869      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d56:	4a94      	ldr	r2, [pc, #592]	; (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04c      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a92      	ldr	r2, [pc, #584]	; (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d863      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d62:	4a92      	ldr	r2, [pc, #584]	; (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d046      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d68:	4a90      	ldr	r2, [pc, #576]	; (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d85d      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d82a      	bhi.n	8001dc8 <HAL_GPIO_Init+0xcc>
 8001d72:	2b12      	cmp	r3, #18
 8001d74:	d859      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_GPIO_Init+0x80>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001df7 	.word	0x08001df7
 8001d80:	08001dd1 	.word	0x08001dd1
 8001d84:	08001de3 	.word	0x08001de3
 8001d88:	08001e25 	.word	0x08001e25
 8001d8c:	08001e2b 	.word	0x08001e2b
 8001d90:	08001e2b 	.word	0x08001e2b
 8001d94:	08001e2b 	.word	0x08001e2b
 8001d98:	08001e2b 	.word	0x08001e2b
 8001d9c:	08001e2b 	.word	0x08001e2b
 8001da0:	08001e2b 	.word	0x08001e2b
 8001da4:	08001e2b 	.word	0x08001e2b
 8001da8:	08001e2b 	.word	0x08001e2b
 8001dac:	08001e2b 	.word	0x08001e2b
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e2b 	.word	0x08001e2b
 8001db8:	08001e2b 	.word	0x08001e2b
 8001dbc:	08001e2b 	.word	0x08001e2b
 8001dc0:	08001dd9 	.word	0x08001dd9
 8001dc4:	08001ded 	.word	0x08001ded
 8001dc8:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <HAL_GPIO_Init+0x2b4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dce:	e02c      	b.n	8001e2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e029      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e024      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	3308      	adds	r3, #8
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e01f      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	330c      	adds	r3, #12
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e01a      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e013      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	611a      	str	r2, [r3, #16]
          break;
 8001e16:	e009      	b.n	8001e2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	615a      	str	r2, [r3, #20]
          break;
 8001e22:	e003      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          break;
 8001e2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d801      	bhi.n	8001e36 <HAL_GPIO_Init+0x13a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_Init+0x13e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d802      	bhi.n	8001e48 <HAL_GPIO_Init+0x14c>
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x152>
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3b08      	subs	r3, #8
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	210f      	movs	r1, #15
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80b1 	beq.w	8001fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <HAL_GPIO_Init+0x2c0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_GPIO_Init+0x1ec>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <HAL_GPIO_Init+0x2c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3e      	ldr	r2, [pc, #248]	; (8001fc4 <HAL_GPIO_Init+0x2c8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1e4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3d      	ldr	r2, [pc, #244]	; (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1e0>
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e006      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001efa:	492f      	ldr	r1, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	492c      	ldr	r1, [pc, #176]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4928      	ldr	r1, [pc, #160]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	491e      	ldr	r1, [pc, #120]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4918      	ldr	r1, [pc, #96]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4914      	ldr	r1, [pc, #80]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d021      	beq.n	8001fd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
 8001f98:	e021      	b.n	8001fde <HAL_GPIO_Init+0x2e2>
 8001f9a:	bf00      	nop
 8001f9c:	10320000 	.word	0x10320000
 8001fa0:	10310000 	.word	0x10310000
 8001fa4:	10220000 	.word	0x10220000
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	10110000 	.word	0x10110000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400
 8001fcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f47f ae8e 	bne.w	8001d10 <HAL_GPIO_Init+0x14>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	372c      	adds	r7, #44	; 0x2c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002042:	787b      	ldrb	r3, [r7, #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204e:	e003      	b.n	8002058 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	041a      	lsls	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f806 	bl	8002094 <HAL_GPIO_EXTI_Callback>
  }
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e26c      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c8:	4b92      	ldr	r3, [pc, #584]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00c      	beq.n	80020ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d112      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ee:	4b89      	ldr	r3, [pc, #548]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d06c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x12c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d168      	bne.n	80021d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e246      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x76>
 8002110:	4b80      	ldr	r3, [pc, #512]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a7f      	ldr	r2, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e02e      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x98>
 8002126:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b78      	ldr	r3, [pc, #480]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a77      	ldr	r2, [pc, #476]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0xbc>
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a71      	ldr	r2, [pc, #452]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002164:	4b6b      	ldr	r3, [pc, #428]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6a      	ldr	r2, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a67      	ldr	r2, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fbf2 	bl	800196c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fbee 	bl	800196c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1fa      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xe4>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fbde 	bl	800196c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fbda 	bl	800196c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1e6      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x10c>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e2:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ee:	4b49      	ldr	r3, [pc, #292]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1ba      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4939      	ldr	r1, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e03a      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fb93 	bl	800196c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7ff fb8f 	bl	800196c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e19b      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4927      	ldr	r1, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fb72 	bl	800196c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7ff fb6e 	bl	800196c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e17a      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03a      	beq.n	800232c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d019      	beq.n	80022f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_RCC_OscConfig+0x274>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7ff fb52 	bl	800196c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff fb4e 	bl	800196c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e15a      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f000 fad8 	bl	80028a0 <RCC_Delay>
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_OscConfig+0x274>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7ff fb38 	bl	800196c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fe:	e00f      	b.n	8002320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7ff fb34 	bl	800196c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d908      	bls.n	8002320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e140      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	42420000 	.word	0x42420000
 800231c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	4b9e      	ldr	r3, [pc, #632]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e9      	bne.n	8002300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a6 	beq.w	8002486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b97      	ldr	r3, [pc, #604]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b94      	ldr	r3, [pc, #592]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a93      	ldr	r2, [pc, #588]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b91      	ldr	r3, [pc, #580]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <HAL_RCC_OscConfig+0x4f8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	4b8b      	ldr	r3, [pc, #556]	; (80025a0 <HAL_RCC_OscConfig+0x4f8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a8a      	ldr	r2, [pc, #552]	; (80025a0 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237e:	f7ff faf5 	bl	800196c <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7ff faf1 	bl	800196c <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0fd      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <HAL_RCC_OscConfig+0x4f8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x312>
 80023ac:	4b7b      	ldr	r3, [pc, #492]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a7a      	ldr	r2, [pc, #488]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e02d      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x334>
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a72      	ldr	r2, [pc, #456]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	e01c      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x356>
 80023e4:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a6c      	ldr	r2, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a69      	ldr	r2, [pc, #420]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a66      	ldr	r2, [pc, #408]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b64      	ldr	r3, [pc, #400]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a63      	ldr	r2, [pc, #396]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7ff faa5 	bl	800196c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7ff faa1 	bl	800196c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0ab      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <HAL_RCC_OscConfig+0x37e>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff fa8f 	bl	800196c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7ff fa8b 	bl	800196c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e095      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b48      	ldr	r3, [pc, #288]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a47      	ldr	r2, [pc, #284]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8081 	beq.w	8002592 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002490:	4b42      	ldr	r3, [pc, #264]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d061      	beq.n	8002560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d146      	bne.n	8002532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_OscConfig+0x4fc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7ff fa5f 	bl	800196c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7ff fa5b 	bl	800196c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e067      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d108      	bne.n	80024ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	492d      	ldr	r1, [pc, #180]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a19      	ldr	r1, [r3, #32]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	430b      	orrs	r3, r1
 80024fe:	4927      	ldr	r1, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x4fc>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7ff fa2f 	bl	800196c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff fa2b 	bl	800196c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e037      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x46a>
 8002530:	e02f      	b.n	8002592 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_RCC_OscConfig+0x4fc>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fa18 	bl	800196c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff fa14 	bl	800196c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e020      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x498>
 800255e:	e018      	b.n	8002592 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x4f4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	429a      	cmp	r2, r3
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
 80025a4:	42420060 	.word	0x42420060

080025a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0d0      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d910      	bls.n	80025ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b67      	ldr	r3, [pc, #412]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4965      	ldr	r1, [pc, #404]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b63      	ldr	r3, [pc, #396]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b8      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a58      	ldr	r2, [pc, #352]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002626:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	494d      	ldr	r1, [pc, #308]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d040      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d115      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07f      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e073      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06b      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4936      	ldr	r1, [pc, #216]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7ff f968 	bl	800196c <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7ff f964 	bl	800196c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e053      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d210      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4922      	ldr	r1, [pc, #136]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e032      	b.n	800275e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4916      	ldr	r1, [pc, #88]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	490e      	ldr	r1, [pc, #56]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002736:	f000 f821 	bl	800277c <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	490a      	ldr	r1, [pc, #40]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1cc>)
 8002750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1d0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f8c6 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40022000 	.word	0x40022000
 800276c:	40021000 	.word	0x40021000
 8002770:	08004a80 	.word	0x08004a80
 8002774:	20000024 	.word	0x20000024
 8002778:	20000028 	.word	0x20000028

0800277c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800277c:	b490      	push	{r4, r7}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002784:	1d3c      	adds	r4, r7, #4
 8002786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800278c:	f240 2301 	movw	r3, #513	; 0x201
 8002790:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x40>
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x46>
 80027ba:	e02d      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027be:	623b      	str	r3, [r7, #32]
      break;
 80027c0:	e02d      	b.n	800281e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	0c9b      	lsrs	r3, r3, #18
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ce:	4413      	add	r3, r2
 80027d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c5b      	lsrs	r3, r3, #17
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ee:	4413      	add	r3, r2
 80027f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fa:	fb02 f203 	mul.w	r2, r2, r3
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	e004      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <HAL_RCC_GetSysClockFreq+0xbc>)
 800280c:	fb02 f303 	mul.w	r3, r2, r3
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	623b      	str	r3, [r7, #32]
      break;
 8002816:	e002      	b.n	800281e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281a:	623b      	str	r3, [r7, #32]
      break;
 800281c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281e:	6a3b      	ldr	r3, [r7, #32]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bc90      	pop	{r4, r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	08004a70 	.word	0x08004a70
 8002830:	40021000 	.word	0x40021000
 8002834:	007a1200 	.word	0x007a1200
 8002838:	003d0900 	.word	0x003d0900

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <HAL_RCC_GetHCLKFreq+0x10>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	20000024 	.word	0x20000024

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002854:	f7ff fff2 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4903      	ldr	r1, [pc, #12]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	08004a90 	.word	0x08004a90

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800287c:	f7ff ffde 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0adb      	lsrs	r3, r3, #11
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	08004a90 	.word	0x08004a90

080028a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <RCC_Delay+0x34>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <RCC_Delay+0x38>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0a5b      	lsrs	r3, r3, #9
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028bc:	bf00      	nop
  }
  while (Delay --);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	60fa      	str	r2, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <RCC_Delay+0x1c>
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000024 	.word	0x20000024
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e041      	b.n	8002972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe fcf2 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	4619      	mov	r1, r3
 800291a:	4610      	mov	r0, r2
 800291c:	f000 fc28 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d001      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e03a      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <HAL_TIM_Base_Start_IT+0x98>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00e      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x58>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029be:	d009      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x58>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <HAL_TIM_Base_Start_IT+0x9c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x58>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <HAL_TIM_Base_Start_IT+0xa0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d010      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	e007      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e041      	b.n	8002ab6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f839 	bl	8002abe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fb86 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_TIM_PWM_Start+0x24>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e022      	b.n	8002b3a <HAL_TIM_PWM_Start+0x6a>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d109      	bne.n	8002b0e <HAL_TIM_PWM_Start+0x3e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e015      	b.n	8002b3a <HAL_TIM_PWM_Start+0x6a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d109      	bne.n	8002b28 <HAL_TIM_PWM_Start+0x58>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e008      	b.n	8002b3a <HAL_TIM_PWM_Start+0x6a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e05e      	b.n	8002c00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_PWM_Start+0x82>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b50:	e013      	b.n	8002b7a <HAL_TIM_PWM_Start+0xaa>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Start+0x92>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b60:	e00b      	b.n	8002b7a <HAL_TIM_PWM_Start+0xaa>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Start+0xa2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b70:	e003      	b.n	8002b7a <HAL_TIM_PWM_Start+0xaa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd74 	bl	8003670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <HAL_TIM_PWM_Start+0x138>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_TIM_PWM_Start+0x138>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00e      	beq.n	8002bca <HAL_TIM_PWM_Start+0xfa>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb4:	d009      	beq.n	8002bca <HAL_TIM_PWM_Start+0xfa>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_TIM_PWM_Start+0x13c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d004      	beq.n	8002bca <HAL_TIM_PWM_Start+0xfa>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_TIM_PWM_Start+0x140>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d111      	bne.n	8002bee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b06      	cmp	r3, #6
 8002bda:	d010      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bec:	e007      	b.n	8002bfe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40000800 	.word	0x40000800

08002c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0202 	mvn.w	r2, #2
 8002c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa6f 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa62 	bl	8003128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fa71 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0204 	mvn.w	r2, #4
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa45 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa38 	bl	8003128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa47 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0208 	mvn.w	r2, #8
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2204      	movs	r2, #4
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa1b 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa0e 	bl	8003128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fa1d 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0210 	mvn.w	r2, #16
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2208      	movs	r2, #8
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f9f1 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f9e4 	bl	8003128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f9f3 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0201 	mvn.w	r2, #1
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fa66 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d107      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fce1 	bl	8003786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d10e      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9b7 	bl	800315e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0220 	mvn.w	r2, #32
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fcac 	bl	8003774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0ac      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	f200 809f 	bhi.w	8002f8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08002f8d 	.word	0x08002f8d
 8002e5c:	08002f8d 	.word	0x08002f8d
 8002e60:	08002f8d 	.word	0x08002f8d
 8002e64:	08002ec9 	.word	0x08002ec9
 8002e68:	08002f8d 	.word	0x08002f8d
 8002e6c:	08002f8d 	.word	0x08002f8d
 8002e70:	08002f8d 	.word	0x08002f8d
 8002e74:	08002f0b 	.word	0x08002f0b
 8002e78:	08002f8d 	.word	0x08002f8d
 8002e7c:	08002f8d 	.word	0x08002f8d
 8002e80:	08002f8d 	.word	0x08002f8d
 8002e84:	08002f4b 	.word	0x08002f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f9d0 	bl	8003234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0208 	orr.w	r2, r2, #8
 8002ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6999      	ldr	r1, [r3, #24]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]
      break;
 8002ec6:	e062      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa16 	bl	8003300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6999      	ldr	r1, [r3, #24]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	021a      	lsls	r2, r3, #8
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	619a      	str	r2, [r3, #24]
      break;
 8002f08:	e041      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fa5f 	bl	80033d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0208 	orr.w	r2, r2, #8
 8002f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0204 	bic.w	r2, r2, #4
 8002f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	61da      	str	r2, [r3, #28]
      break;
 8002f48:	e021      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 faa9 	bl	80034a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	61da      	str	r2, [r3, #28]
      break;
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIM_ConfigClockSource+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0b3      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x180>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff0:	d03e      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	f200 8087 	bhi.w	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	f000 8085 	beq.w	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d87f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d01a      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0xa2>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d87b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d050      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x116>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d877      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d03c      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xf6>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d873      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d058      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x136>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d86f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d064      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d86b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d060      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d867      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d05a      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003040:	e062      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f000 faee 	bl	8003632 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003064:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	609a      	str	r2, [r3, #8]
      break;
 800306e:	e04e      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f000 fad7 	bl	8003632 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003092:	609a      	str	r2, [r3, #8]
      break;
 8003094:	e03b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fa4e 	bl	8003544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2150      	movs	r1, #80	; 0x50
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 faa5 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80030b4:	e02b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fa6c 	bl	80035a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2160      	movs	r1, #96	; 0x60
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa95 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80030d4:	e01b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fa2e 	bl	8003544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa85 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80030f4:	e00b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f000 fa7c 	bl	80035fe <TIM_ITRx_SetConfig>
        break;
 8003106:	e002      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800310c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a29      	ldr	r2, [pc, #164]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00b      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d007      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a26      	ldr	r2, [pc, #152]	; (800322c <TIM_Base_SetConfig+0xbc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a25      	ldr	r2, [pc, #148]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d108      	bne.n	80031b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <TIM_Base_SetConfig+0xbc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800

08003234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0201 	bic.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f023 0302 	bic.w	r3, r3, #2
 800327c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <TIM_OC1_SetConfig+0xc8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10c      	bne.n	80032aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0308 	bic.w	r3, r3, #8
 8003296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <TIM_OC1_SetConfig+0xc8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40012c00 	.word	0x40012c00

08003300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0210 	bic.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0320 	bic.w	r3, r3, #32
 800334a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <TIM_OC2_SetConfig+0xd0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10d      	bne.n	800337c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <TIM_OC2_SetConfig+0xd0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d113      	bne.n	80033ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800338a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <TIM_OC3_SetConfig+0xd0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10d      	bne.n	800344e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <TIM_OC3_SetConfig+0xd0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d113      	bne.n	800347e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800345c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	621a      	str	r2, [r3, #32]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00

080034a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	031b      	lsls	r3, r3, #12
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <TIM_OC4_SetConfig+0x98>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d109      	bne.n	800351c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00

08003544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0201 	bic.w	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 030a 	bic.w	r3, r3, #10
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 0210 	bic.w	r2, r3, #16
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	031b      	lsls	r3, r3, #12
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 0307 	orr.w	r3, r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	021a      	lsls	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	431a      	orrs	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	609a      	str	r2, [r3, #8]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2201      	movs	r2, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e046      	b.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d009      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10c      	bne.n	800374c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4313      	orrs	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800

08003774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e03f      	b.n	800382a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fdec 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fc25 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b08a      	sub	sp, #40	; 0x28
 8003836:	af02      	add	r7, sp, #8
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	d17c      	bne.n	800394c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_UART_Transmit+0x2c>
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e075      	b.n	800394e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_UART_Transmit+0x3e>
 800386c:	2302      	movs	r3, #2
 800386e:	e06e      	b.n	800394e <HAL_UART_Transmit+0x11c>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2221      	movs	r2, #33	; 0x21
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003886:	f7fe f871 	bl	800196c <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a0:	d108      	bne.n	80038b4 <HAL_UART_Transmit+0x82>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e003      	b.n	80038bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038c4:	e02a      	b.n	800391c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fa11 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e036      	b.n	800394e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3302      	adds	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e007      	b.n	800390e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1cf      	bne.n	80038c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2140      	movs	r1, #64	; 0x40
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f9e1 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e006      	b.n	800394e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_UART_IRQHandler+0x52>
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa99 	bl	8003eda <UART_Receive_IT>
      return;
 80039a8:	e17b      	b.n	8003ca2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80b1 	beq.w	8003b14 <HAL_UART_IRQHandler+0x1bc>
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_UART_IRQHandler+0x70>
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80a6 	beq.w	8003b14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_UART_IRQHandler+0x90>
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_UART_IRQHandler+0xb0>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f043 0202 	orr.w	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_UART_IRQHandler+0xd0>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f043 0204 	orr.w	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00f      	beq.n	8003a52 <HAL_UART_IRQHandler+0xfa>
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <HAL_UART_IRQHandler+0xee>
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f043 0208 	orr.w	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 811e 	beq.w	8003c98 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_UART_IRQHandler+0x11e>
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fa32 	bl	8003eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_UART_IRQHandler+0x146>
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d031      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f974 	bl	8003d8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d023      	beq.n	8003afa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d013      	beq.n	8003af2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	4a76      	ldr	r2, [pc, #472]	; (8003ca8 <HAL_UART_IRQHandler+0x350>)
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe f89a 	bl	8001c10 <HAL_DMA_Abort_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	e00e      	b.n	8003b10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8ec 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e00a      	b.n	8003b10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8e8 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e006      	b.n	8003b10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8e4 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b0e:	e0c3      	b.n	8003c98 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	bf00      	nop
    return;
 8003b12:	e0c1      	b.n	8003c98 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f040 80a1 	bne.w	8003c60 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 809b 	beq.w	8003c60 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8095 	beq.w	8003c60 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d04e      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b64:	8a3b      	ldrh	r3, [r7, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8098 	beq.w	8003c9c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b70:	8a3a      	ldrh	r2, [r7, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	f080 8092 	bcs.w	8003c9c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8a3a      	ldrh	r2, [r7, #16]
 8003b7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d02b      	beq.n	8003be0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0210 	bic.w	r2, r2, #16
 8003bd4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd ffdd 	bl	8001b9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f876 	bl	8003ce2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bf6:	e051      	b.n	8003c9c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d047      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c10:	8a7b      	ldrh	r3, [r7, #18]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d044      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c24:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0210 	bic.w	r2, r2, #16
 8003c52:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c54:	8a7b      	ldrh	r3, [r7, #18]
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f842 	bl	8003ce2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c5e:	e01f      	b.n	8003ca0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_UART_IRQHandler+0x324>
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8c9 	bl	8003e0c <UART_Transmit_IT>
    return;
 8003c7a:	e012      	b.n	8003ca2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x34a>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f90a 	bl	8003eaa <UART_EndTransmit_IT>
    return;
 8003c96:	e004      	b.n	8003ca2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003c98:	bf00      	nop
 8003c9a:	e002      	b.n	8003ca2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c9c:	bf00      	nop
 8003c9e:	e000      	b.n	8003ca2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ca0:	bf00      	nop
  }
}
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	08003de5 	.word	0x08003de5

08003cac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	e02c      	b.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d028      	beq.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d18:	f7fd fe28 	bl	800196c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d21d      	bcs.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e00f      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d0c3      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003da2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d107      	bne.n	8003dcc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0210 	bic.w	r2, r2, #16
 8003dca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff ff66 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b21      	cmp	r3, #33	; 0x21
 8003e1e:	d13e      	bne.n	8003e9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d114      	bne.n	8003e54 <UART_Transmit_IT+0x48>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d110      	bne.n	8003e54 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	1c9a      	adds	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]
 8003e52:	e008      	b.n	8003e66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	1c59      	adds	r1, r3, #1
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6211      	str	r1, [r2, #32]
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4619      	mov	r1, r3
 8003e74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff feee 	bl	8003cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	f040 8099 	bne.w	8004022 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef8:	d117      	bne.n	8003f2a <UART_Receive_IT+0x50>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d113      	bne.n	8003f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
 8003f28:	e026      	b.n	8003f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d007      	beq.n	8003f4e <UART_Receive_IT+0x74>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <UART_Receive_IT+0x82>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e008      	b.n	8003f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4619      	mov	r1, r3
 8003f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d148      	bne.n	800401e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0220 	bic.w	r2, r2, #32
 8003f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d123      	bne.n	8004014 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0210 	bic.w	r2, r2, #16
 8003fe0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d10a      	bne.n	8004006 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fe68 	bl	8003ce2 <HAL_UARTEx_RxEventCallback>
 8004012:	e002      	b.n	800401a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff fe52 	bl	8003cbe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e002      	b.n	8004024 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004066:	f023 030c 	bic.w	r3, r3, #12
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	430b      	orrs	r3, r1
 8004072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2c      	ldr	r2, [pc, #176]	; (8004140 <UART_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fbf0 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	e002      	b.n	80040a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe fbd8 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <UART_SetConfig+0x118>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a15      	ldr	r2, [pc, #84]	; (8004144 <UART_SetConfig+0x118>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	4419      	add	r1, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	440a      	add	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013800 	.word	0x40013800
 8004144:	51eb851f 	.word	0x51eb851f

08004148 <__errno>:
 8004148:	4b01      	ldr	r3, [pc, #4]	; (8004150 <__errno+0x8>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000030 	.word	0x20000030

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	2600      	movs	r6, #0
 8004158:	4d0c      	ldr	r5, [pc, #48]	; (800418c <__libc_init_array+0x38>)
 800415a:	4c0d      	ldr	r4, [pc, #52]	; (8004190 <__libc_init_array+0x3c>)
 800415c:	1b64      	subs	r4, r4, r5
 800415e:	10a4      	asrs	r4, r4, #2
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	f000 fc5c 	bl	8004a20 <_init>
 8004168:	2600      	movs	r6, #0
 800416a:	4d0a      	ldr	r5, [pc, #40]	; (8004194 <__libc_init_array+0x40>)
 800416c:	4c0a      	ldr	r4, [pc, #40]	; (8004198 <__libc_init_array+0x44>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	08004acc 	.word	0x08004acc
 8004190:	08004acc 	.word	0x08004acc
 8004194:	08004acc 	.word	0x08004acc
 8004198:	08004ad0 	.word	0x08004ad0

0800419c <memset>:
 800419c:	4603      	mov	r3, r0
 800419e:	4402      	add	r2, r0
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d100      	bne.n	80041a6 <memset+0xa>
 80041a4:	4770      	bx	lr
 80041a6:	f803 1b01 	strb.w	r1, [r3], #1
 80041aa:	e7f9      	b.n	80041a0 <memset+0x4>

080041ac <siprintf>:
 80041ac:	b40e      	push	{r1, r2, r3}
 80041ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041b2:	b500      	push	{lr}
 80041b4:	b09c      	sub	sp, #112	; 0x70
 80041b6:	ab1d      	add	r3, sp, #116	; 0x74
 80041b8:	9002      	str	r0, [sp, #8]
 80041ba:	9006      	str	r0, [sp, #24]
 80041bc:	9107      	str	r1, [sp, #28]
 80041be:	9104      	str	r1, [sp, #16]
 80041c0:	4808      	ldr	r0, [pc, #32]	; (80041e4 <siprintf+0x38>)
 80041c2:	4909      	ldr	r1, [pc, #36]	; (80041e8 <siprintf+0x3c>)
 80041c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	6800      	ldr	r0, [r0, #0]
 80041cc:	a902      	add	r1, sp, #8
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	f000 f868 	bl	80042a4 <_svfiprintf_r>
 80041d4:	2200      	movs	r2, #0
 80041d6:	9b02      	ldr	r3, [sp, #8]
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	b01c      	add	sp, #112	; 0x70
 80041dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e0:	b003      	add	sp, #12
 80041e2:	4770      	bx	lr
 80041e4:	20000030 	.word	0x20000030
 80041e8:	ffff0208 	.word	0xffff0208

080041ec <__ssputs_r>:
 80041ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f0:	688e      	ldr	r6, [r1, #8]
 80041f2:	4682      	mov	sl, r0
 80041f4:	429e      	cmp	r6, r3
 80041f6:	460c      	mov	r4, r1
 80041f8:	4690      	mov	r8, r2
 80041fa:	461f      	mov	r7, r3
 80041fc:	d838      	bhi.n	8004270 <__ssputs_r+0x84>
 80041fe:	898a      	ldrh	r2, [r1, #12]
 8004200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004204:	d032      	beq.n	800426c <__ssputs_r+0x80>
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	6909      	ldr	r1, [r1, #16]
 800420a:	3301      	adds	r3, #1
 800420c:	eba5 0901 	sub.w	r9, r5, r1
 8004210:	6965      	ldr	r5, [r4, #20]
 8004212:	444b      	add	r3, r9
 8004214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800421c:	106d      	asrs	r5, r5, #1
 800421e:	429d      	cmp	r5, r3
 8004220:	bf38      	it	cc
 8004222:	461d      	movcc	r5, r3
 8004224:	0553      	lsls	r3, r2, #21
 8004226:	d531      	bpl.n	800428c <__ssputs_r+0xa0>
 8004228:	4629      	mov	r1, r5
 800422a:	f000 fb53 	bl	80048d4 <_malloc_r>
 800422e:	4606      	mov	r6, r0
 8004230:	b950      	cbnz	r0, 8004248 <__ssputs_r+0x5c>
 8004232:	230c      	movs	r3, #12
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	f8ca 3000 	str.w	r3, [sl]
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004248:	464a      	mov	r2, r9
 800424a:	6921      	ldr	r1, [r4, #16]
 800424c:	f000 face 	bl	80047ec <memcpy>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	6126      	str	r6, [r4, #16]
 800425e:	444e      	add	r6, r9
 8004260:	6026      	str	r6, [r4, #0]
 8004262:	463e      	mov	r6, r7
 8004264:	6165      	str	r5, [r4, #20]
 8004266:	eba5 0509 	sub.w	r5, r5, r9
 800426a:	60a5      	str	r5, [r4, #8]
 800426c:	42be      	cmp	r6, r7
 800426e:	d900      	bls.n	8004272 <__ssputs_r+0x86>
 8004270:	463e      	mov	r6, r7
 8004272:	4632      	mov	r2, r6
 8004274:	4641      	mov	r1, r8
 8004276:	6820      	ldr	r0, [r4, #0]
 8004278:	f000 fac6 	bl	8004808 <memmove>
 800427c:	68a3      	ldr	r3, [r4, #8]
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	1b9b      	subs	r3, r3, r6
 8004282:	4432      	add	r2, r6
 8004284:	2000      	movs	r0, #0
 8004286:	60a3      	str	r3, [r4, #8]
 8004288:	6022      	str	r2, [r4, #0]
 800428a:	e7db      	b.n	8004244 <__ssputs_r+0x58>
 800428c:	462a      	mov	r2, r5
 800428e:	f000 fb7b 	bl	8004988 <_realloc_r>
 8004292:	4606      	mov	r6, r0
 8004294:	2800      	cmp	r0, #0
 8004296:	d1e1      	bne.n	800425c <__ssputs_r+0x70>
 8004298:	4650      	mov	r0, sl
 800429a:	6921      	ldr	r1, [r4, #16]
 800429c:	f000 face 	bl	800483c <_free_r>
 80042a0:	e7c7      	b.n	8004232 <__ssputs_r+0x46>
	...

080042a4 <_svfiprintf_r>:
 80042a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a8:	4698      	mov	r8, r3
 80042aa:	898b      	ldrh	r3, [r1, #12]
 80042ac:	4607      	mov	r7, r0
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	460d      	mov	r5, r1
 80042b2:	4614      	mov	r4, r2
 80042b4:	b09d      	sub	sp, #116	; 0x74
 80042b6:	d50e      	bpl.n	80042d6 <_svfiprintf_r+0x32>
 80042b8:	690b      	ldr	r3, [r1, #16]
 80042ba:	b963      	cbnz	r3, 80042d6 <_svfiprintf_r+0x32>
 80042bc:	2140      	movs	r1, #64	; 0x40
 80042be:	f000 fb09 	bl	80048d4 <_malloc_r>
 80042c2:	6028      	str	r0, [r5, #0]
 80042c4:	6128      	str	r0, [r5, #16]
 80042c6:	b920      	cbnz	r0, 80042d2 <_svfiprintf_r+0x2e>
 80042c8:	230c      	movs	r3, #12
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	e0d1      	b.n	8004476 <_svfiprintf_r+0x1d2>
 80042d2:	2340      	movs	r3, #64	; 0x40
 80042d4:	616b      	str	r3, [r5, #20]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9309      	str	r3, [sp, #36]	; 0x24
 80042da:	2320      	movs	r3, #32
 80042dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e0:	2330      	movs	r3, #48	; 0x30
 80042e2:	f04f 0901 	mov.w	r9, #1
 80042e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004490 <_svfiprintf_r+0x1ec>
 80042ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042f2:	4623      	mov	r3, r4
 80042f4:	469a      	mov	sl, r3
 80042f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042fa:	b10a      	cbz	r2, 8004300 <_svfiprintf_r+0x5c>
 80042fc:	2a25      	cmp	r2, #37	; 0x25
 80042fe:	d1f9      	bne.n	80042f4 <_svfiprintf_r+0x50>
 8004300:	ebba 0b04 	subs.w	fp, sl, r4
 8004304:	d00b      	beq.n	800431e <_svfiprintf_r+0x7a>
 8004306:	465b      	mov	r3, fp
 8004308:	4622      	mov	r2, r4
 800430a:	4629      	mov	r1, r5
 800430c:	4638      	mov	r0, r7
 800430e:	f7ff ff6d 	bl	80041ec <__ssputs_r>
 8004312:	3001      	adds	r0, #1
 8004314:	f000 80aa 	beq.w	800446c <_svfiprintf_r+0x1c8>
 8004318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800431a:	445a      	add	r2, fp
 800431c:	9209      	str	r2, [sp, #36]	; 0x24
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80a2 	beq.w	800446c <_svfiprintf_r+0x1c8>
 8004328:	2300      	movs	r3, #0
 800432a:	f04f 32ff 	mov.w	r2, #4294967295
 800432e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004332:	f10a 0a01 	add.w	sl, sl, #1
 8004336:	9304      	str	r3, [sp, #16]
 8004338:	9307      	str	r3, [sp, #28]
 800433a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800433e:	931a      	str	r3, [sp, #104]	; 0x68
 8004340:	4654      	mov	r4, sl
 8004342:	2205      	movs	r2, #5
 8004344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004348:	4851      	ldr	r0, [pc, #324]	; (8004490 <_svfiprintf_r+0x1ec>)
 800434a:	f000 fa41 	bl	80047d0 <memchr>
 800434e:	9a04      	ldr	r2, [sp, #16]
 8004350:	b9d8      	cbnz	r0, 800438a <_svfiprintf_r+0xe6>
 8004352:	06d0      	lsls	r0, r2, #27
 8004354:	bf44      	itt	mi
 8004356:	2320      	movmi	r3, #32
 8004358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435c:	0711      	lsls	r1, r2, #28
 800435e:	bf44      	itt	mi
 8004360:	232b      	movmi	r3, #43	; 0x2b
 8004362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004366:	f89a 3000 	ldrb.w	r3, [sl]
 800436a:	2b2a      	cmp	r3, #42	; 0x2a
 800436c:	d015      	beq.n	800439a <_svfiprintf_r+0xf6>
 800436e:	4654      	mov	r4, sl
 8004370:	2000      	movs	r0, #0
 8004372:	f04f 0c0a 	mov.w	ip, #10
 8004376:	9a07      	ldr	r2, [sp, #28]
 8004378:	4621      	mov	r1, r4
 800437a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800437e:	3b30      	subs	r3, #48	; 0x30
 8004380:	2b09      	cmp	r3, #9
 8004382:	d94e      	bls.n	8004422 <_svfiprintf_r+0x17e>
 8004384:	b1b0      	cbz	r0, 80043b4 <_svfiprintf_r+0x110>
 8004386:	9207      	str	r2, [sp, #28]
 8004388:	e014      	b.n	80043b4 <_svfiprintf_r+0x110>
 800438a:	eba0 0308 	sub.w	r3, r0, r8
 800438e:	fa09 f303 	lsl.w	r3, r9, r3
 8004392:	4313      	orrs	r3, r2
 8004394:	46a2      	mov	sl, r4
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	e7d2      	b.n	8004340 <_svfiprintf_r+0x9c>
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	1d19      	adds	r1, r3, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	9103      	str	r1, [sp, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bfbb      	ittet	lt
 80043a6:	425b      	neglt	r3, r3
 80043a8:	f042 0202 	orrlt.w	r2, r2, #2
 80043ac:	9307      	strge	r3, [sp, #28]
 80043ae:	9307      	strlt	r3, [sp, #28]
 80043b0:	bfb8      	it	lt
 80043b2:	9204      	strlt	r2, [sp, #16]
 80043b4:	7823      	ldrb	r3, [r4, #0]
 80043b6:	2b2e      	cmp	r3, #46	; 0x2e
 80043b8:	d10c      	bne.n	80043d4 <_svfiprintf_r+0x130>
 80043ba:	7863      	ldrb	r3, [r4, #1]
 80043bc:	2b2a      	cmp	r3, #42	; 0x2a
 80043be:	d135      	bne.n	800442c <_svfiprintf_r+0x188>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	3402      	adds	r4, #2
 80043c4:	1d1a      	adds	r2, r3, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	9203      	str	r2, [sp, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bfb8      	it	lt
 80043ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80043d2:	9305      	str	r3, [sp, #20]
 80043d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044a0 <_svfiprintf_r+0x1fc>
 80043d8:	2203      	movs	r2, #3
 80043da:	4650      	mov	r0, sl
 80043dc:	7821      	ldrb	r1, [r4, #0]
 80043de:	f000 f9f7 	bl	80047d0 <memchr>
 80043e2:	b140      	cbz	r0, 80043f6 <_svfiprintf_r+0x152>
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	eba0 000a 	sub.w	r0, r0, sl
 80043ea:	fa03 f000 	lsl.w	r0, r3, r0
 80043ee:	9b04      	ldr	r3, [sp, #16]
 80043f0:	3401      	adds	r4, #1
 80043f2:	4303      	orrs	r3, r0
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fa:	2206      	movs	r2, #6
 80043fc:	4825      	ldr	r0, [pc, #148]	; (8004494 <_svfiprintf_r+0x1f0>)
 80043fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004402:	f000 f9e5 	bl	80047d0 <memchr>
 8004406:	2800      	cmp	r0, #0
 8004408:	d038      	beq.n	800447c <_svfiprintf_r+0x1d8>
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <_svfiprintf_r+0x1f4>)
 800440c:	bb1b      	cbnz	r3, 8004456 <_svfiprintf_r+0x1b2>
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	3307      	adds	r3, #7
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	3308      	adds	r3, #8
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441c:	4433      	add	r3, r6
 800441e:	9309      	str	r3, [sp, #36]	; 0x24
 8004420:	e767      	b.n	80042f2 <_svfiprintf_r+0x4e>
 8004422:	460c      	mov	r4, r1
 8004424:	2001      	movs	r0, #1
 8004426:	fb0c 3202 	mla	r2, ip, r2, r3
 800442a:	e7a5      	b.n	8004378 <_svfiprintf_r+0xd4>
 800442c:	2300      	movs	r3, #0
 800442e:	f04f 0c0a 	mov.w	ip, #10
 8004432:	4619      	mov	r1, r3
 8004434:	3401      	adds	r4, #1
 8004436:	9305      	str	r3, [sp, #20]
 8004438:	4620      	mov	r0, r4
 800443a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800443e:	3a30      	subs	r2, #48	; 0x30
 8004440:	2a09      	cmp	r2, #9
 8004442:	d903      	bls.n	800444c <_svfiprintf_r+0x1a8>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0c5      	beq.n	80043d4 <_svfiprintf_r+0x130>
 8004448:	9105      	str	r1, [sp, #20]
 800444a:	e7c3      	b.n	80043d4 <_svfiprintf_r+0x130>
 800444c:	4604      	mov	r4, r0
 800444e:	2301      	movs	r3, #1
 8004450:	fb0c 2101 	mla	r1, ip, r1, r2
 8004454:	e7f0      	b.n	8004438 <_svfiprintf_r+0x194>
 8004456:	ab03      	add	r3, sp, #12
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	462a      	mov	r2, r5
 800445c:	4638      	mov	r0, r7
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <_svfiprintf_r+0x1f8>)
 8004460:	a904      	add	r1, sp, #16
 8004462:	f3af 8000 	nop.w
 8004466:	1c42      	adds	r2, r0, #1
 8004468:	4606      	mov	r6, r0
 800446a:	d1d6      	bne.n	800441a <_svfiprintf_r+0x176>
 800446c:	89ab      	ldrh	r3, [r5, #12]
 800446e:	065b      	lsls	r3, r3, #25
 8004470:	f53f af2c 	bmi.w	80042cc <_svfiprintf_r+0x28>
 8004474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004476:	b01d      	add	sp, #116	; 0x74
 8004478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447c:	ab03      	add	r3, sp, #12
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	462a      	mov	r2, r5
 8004482:	4638      	mov	r0, r7
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <_svfiprintf_r+0x1f8>)
 8004486:	a904      	add	r1, sp, #16
 8004488:	f000 f87c 	bl	8004584 <_printf_i>
 800448c:	e7eb      	b.n	8004466 <_svfiprintf_r+0x1c2>
 800448e:	bf00      	nop
 8004490:	08004a98 	.word	0x08004a98
 8004494:	08004aa2 	.word	0x08004aa2
 8004498:	00000000 	.word	0x00000000
 800449c:	080041ed 	.word	0x080041ed
 80044a0:	08004a9e 	.word	0x08004a9e

080044a4 <_printf_common>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4616      	mov	r6, r2
 80044aa:	4699      	mov	r9, r3
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	4607      	mov	r7, r0
 80044b2:	4293      	cmp	r3, r2
 80044b4:	bfb8      	it	lt
 80044b6:	4613      	movlt	r3, r2
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044be:	460c      	mov	r4, r1
 80044c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044c4:	b10a      	cbz	r2, 80044ca <_printf_common+0x26>
 80044c6:	3301      	adds	r3, #1
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	0699      	lsls	r1, r3, #26
 80044ce:	bf42      	ittt	mi
 80044d0:	6833      	ldrmi	r3, [r6, #0]
 80044d2:	3302      	addmi	r3, #2
 80044d4:	6033      	strmi	r3, [r6, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	f015 0506 	ands.w	r5, r5, #6
 80044dc:	d106      	bne.n	80044ec <_printf_common+0x48>
 80044de:	f104 0a19 	add.w	sl, r4, #25
 80044e2:	68e3      	ldr	r3, [r4, #12]
 80044e4:	6832      	ldr	r2, [r6, #0]
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	42ab      	cmp	r3, r5
 80044ea:	dc28      	bgt.n	800453e <_printf_common+0x9a>
 80044ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f0:	1e13      	subs	r3, r2, #0
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	bf18      	it	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	0692      	lsls	r2, r2, #26
 80044fa:	d42d      	bmi.n	8004558 <_printf_common+0xb4>
 80044fc:	4649      	mov	r1, r9
 80044fe:	4638      	mov	r0, r7
 8004500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004504:	47c0      	blx	r8
 8004506:	3001      	adds	r0, #1
 8004508:	d020      	beq.n	800454c <_printf_common+0xa8>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	68e5      	ldr	r5, [r4, #12]
 800450e:	f003 0306 	and.w	r3, r3, #6
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf18      	it	ne
 8004516:	2500      	movne	r5, #0
 8004518:	6832      	ldr	r2, [r6, #0]
 800451a:	f04f 0600 	mov.w	r6, #0
 800451e:	68a3      	ldr	r3, [r4, #8]
 8004520:	bf08      	it	eq
 8004522:	1aad      	subeq	r5, r5, r2
 8004524:	6922      	ldr	r2, [r4, #16]
 8004526:	bf08      	it	eq
 8004528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800452c:	4293      	cmp	r3, r2
 800452e:	bfc4      	itt	gt
 8004530:	1a9b      	subgt	r3, r3, r2
 8004532:	18ed      	addgt	r5, r5, r3
 8004534:	341a      	adds	r4, #26
 8004536:	42b5      	cmp	r5, r6
 8004538:	d11a      	bne.n	8004570 <_printf_common+0xcc>
 800453a:	2000      	movs	r0, #0
 800453c:	e008      	b.n	8004550 <_printf_common+0xac>
 800453e:	2301      	movs	r3, #1
 8004540:	4652      	mov	r2, sl
 8004542:	4649      	mov	r1, r9
 8004544:	4638      	mov	r0, r7
 8004546:	47c0      	blx	r8
 8004548:	3001      	adds	r0, #1
 800454a:	d103      	bne.n	8004554 <_printf_common+0xb0>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004554:	3501      	adds	r5, #1
 8004556:	e7c4      	b.n	80044e2 <_printf_common+0x3e>
 8004558:	2030      	movs	r0, #48	; 0x30
 800455a:	18e1      	adds	r1, r4, r3
 800455c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004566:	4422      	add	r2, r4
 8004568:	3302      	adds	r3, #2
 800456a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800456e:	e7c5      	b.n	80044fc <_printf_common+0x58>
 8004570:	2301      	movs	r3, #1
 8004572:	4622      	mov	r2, r4
 8004574:	4649      	mov	r1, r9
 8004576:	4638      	mov	r0, r7
 8004578:	47c0      	blx	r8
 800457a:	3001      	adds	r0, #1
 800457c:	d0e6      	beq.n	800454c <_printf_common+0xa8>
 800457e:	3601      	adds	r6, #1
 8004580:	e7d9      	b.n	8004536 <_printf_common+0x92>
	...

08004584 <_printf_i>:
 8004584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004588:	460c      	mov	r4, r1
 800458a:	7e27      	ldrb	r7, [r4, #24]
 800458c:	4691      	mov	r9, r2
 800458e:	2f78      	cmp	r7, #120	; 0x78
 8004590:	4680      	mov	r8, r0
 8004592:	469a      	mov	sl, r3
 8004594:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800459a:	d807      	bhi.n	80045ac <_printf_i+0x28>
 800459c:	2f62      	cmp	r7, #98	; 0x62
 800459e:	d80a      	bhi.n	80045b6 <_printf_i+0x32>
 80045a0:	2f00      	cmp	r7, #0
 80045a2:	f000 80d9 	beq.w	8004758 <_printf_i+0x1d4>
 80045a6:	2f58      	cmp	r7, #88	; 0x58
 80045a8:	f000 80a4 	beq.w	80046f4 <_printf_i+0x170>
 80045ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b4:	e03a      	b.n	800462c <_printf_i+0xa8>
 80045b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ba:	2b15      	cmp	r3, #21
 80045bc:	d8f6      	bhi.n	80045ac <_printf_i+0x28>
 80045be:	a001      	add	r0, pc, #4	; (adr r0, 80045c4 <_printf_i+0x40>)
 80045c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045c4:	0800461d 	.word	0x0800461d
 80045c8:	08004631 	.word	0x08004631
 80045cc:	080045ad 	.word	0x080045ad
 80045d0:	080045ad 	.word	0x080045ad
 80045d4:	080045ad 	.word	0x080045ad
 80045d8:	080045ad 	.word	0x080045ad
 80045dc:	08004631 	.word	0x08004631
 80045e0:	080045ad 	.word	0x080045ad
 80045e4:	080045ad 	.word	0x080045ad
 80045e8:	080045ad 	.word	0x080045ad
 80045ec:	080045ad 	.word	0x080045ad
 80045f0:	0800473f 	.word	0x0800473f
 80045f4:	08004661 	.word	0x08004661
 80045f8:	08004721 	.word	0x08004721
 80045fc:	080045ad 	.word	0x080045ad
 8004600:	080045ad 	.word	0x080045ad
 8004604:	08004761 	.word	0x08004761
 8004608:	080045ad 	.word	0x080045ad
 800460c:	08004661 	.word	0x08004661
 8004610:	080045ad 	.word	0x080045ad
 8004614:	080045ad 	.word	0x080045ad
 8004618:	08004729 	.word	0x08004729
 800461c:	680b      	ldr	r3, [r1, #0]
 800461e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	600a      	str	r2, [r1, #0]
 8004628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800462c:	2301      	movs	r3, #1
 800462e:	e0a4      	b.n	800477a <_printf_i+0x1f6>
 8004630:	6825      	ldr	r5, [r4, #0]
 8004632:	6808      	ldr	r0, [r1, #0]
 8004634:	062e      	lsls	r6, r5, #24
 8004636:	f100 0304 	add.w	r3, r0, #4
 800463a:	d50a      	bpl.n	8004652 <_printf_i+0xce>
 800463c:	6805      	ldr	r5, [r0, #0]
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	2d00      	cmp	r5, #0
 8004642:	da03      	bge.n	800464c <_printf_i+0xc8>
 8004644:	232d      	movs	r3, #45	; 0x2d
 8004646:	426d      	negs	r5, r5
 8004648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464c:	230a      	movs	r3, #10
 800464e:	485e      	ldr	r0, [pc, #376]	; (80047c8 <_printf_i+0x244>)
 8004650:	e019      	b.n	8004686 <_printf_i+0x102>
 8004652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004656:	6805      	ldr	r5, [r0, #0]
 8004658:	600b      	str	r3, [r1, #0]
 800465a:	bf18      	it	ne
 800465c:	b22d      	sxthne	r5, r5
 800465e:	e7ef      	b.n	8004640 <_printf_i+0xbc>
 8004660:	680b      	ldr	r3, [r1, #0]
 8004662:	6825      	ldr	r5, [r4, #0]
 8004664:	1d18      	adds	r0, r3, #4
 8004666:	6008      	str	r0, [r1, #0]
 8004668:	0628      	lsls	r0, r5, #24
 800466a:	d501      	bpl.n	8004670 <_printf_i+0xec>
 800466c:	681d      	ldr	r5, [r3, #0]
 800466e:	e002      	b.n	8004676 <_printf_i+0xf2>
 8004670:	0669      	lsls	r1, r5, #25
 8004672:	d5fb      	bpl.n	800466c <_printf_i+0xe8>
 8004674:	881d      	ldrh	r5, [r3, #0]
 8004676:	2f6f      	cmp	r7, #111	; 0x6f
 8004678:	bf0c      	ite	eq
 800467a:	2308      	moveq	r3, #8
 800467c:	230a      	movne	r3, #10
 800467e:	4852      	ldr	r0, [pc, #328]	; (80047c8 <_printf_i+0x244>)
 8004680:	2100      	movs	r1, #0
 8004682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004686:	6866      	ldr	r6, [r4, #4]
 8004688:	2e00      	cmp	r6, #0
 800468a:	bfa8      	it	ge
 800468c:	6821      	ldrge	r1, [r4, #0]
 800468e:	60a6      	str	r6, [r4, #8]
 8004690:	bfa4      	itt	ge
 8004692:	f021 0104 	bicge.w	r1, r1, #4
 8004696:	6021      	strge	r1, [r4, #0]
 8004698:	b90d      	cbnz	r5, 800469e <_printf_i+0x11a>
 800469a:	2e00      	cmp	r6, #0
 800469c:	d04d      	beq.n	800473a <_printf_i+0x1b6>
 800469e:	4616      	mov	r6, r2
 80046a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80046a4:	fb03 5711 	mls	r7, r3, r1, r5
 80046a8:	5dc7      	ldrb	r7, [r0, r7]
 80046aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046ae:	462f      	mov	r7, r5
 80046b0:	42bb      	cmp	r3, r7
 80046b2:	460d      	mov	r5, r1
 80046b4:	d9f4      	bls.n	80046a0 <_printf_i+0x11c>
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d10b      	bne.n	80046d2 <_printf_i+0x14e>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	07df      	lsls	r7, r3, #31
 80046be:	d508      	bpl.n	80046d2 <_printf_i+0x14e>
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	6861      	ldr	r1, [r4, #4]
 80046c4:	4299      	cmp	r1, r3
 80046c6:	bfde      	ittt	le
 80046c8:	2330      	movle	r3, #48	; 0x30
 80046ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046d2:	1b92      	subs	r2, r2, r6
 80046d4:	6122      	str	r2, [r4, #16]
 80046d6:	464b      	mov	r3, r9
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f8cd a000 	str.w	sl, [sp]
 80046e0:	aa03      	add	r2, sp, #12
 80046e2:	f7ff fedf 	bl	80044a4 <_printf_common>
 80046e6:	3001      	adds	r0, #1
 80046e8:	d14c      	bne.n	8004784 <_printf_i+0x200>
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295
 80046ee:	b004      	add	sp, #16
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	4834      	ldr	r0, [pc, #208]	; (80047c8 <_printf_i+0x244>)
 80046f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046fa:	680e      	ldr	r6, [r1, #0]
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004702:	061f      	lsls	r7, r3, #24
 8004704:	600e      	str	r6, [r1, #0]
 8004706:	d514      	bpl.n	8004732 <_printf_i+0x1ae>
 8004708:	07d9      	lsls	r1, r3, #31
 800470a:	bf44      	itt	mi
 800470c:	f043 0320 	orrmi.w	r3, r3, #32
 8004710:	6023      	strmi	r3, [r4, #0]
 8004712:	b91d      	cbnz	r5, 800471c <_printf_i+0x198>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	2310      	movs	r3, #16
 800471e:	e7af      	b.n	8004680 <_printf_i+0xfc>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	f043 0320 	orr.w	r3, r3, #32
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	2378      	movs	r3, #120	; 0x78
 800472a:	4828      	ldr	r0, [pc, #160]	; (80047cc <_printf_i+0x248>)
 800472c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004730:	e7e3      	b.n	80046fa <_printf_i+0x176>
 8004732:	065e      	lsls	r6, r3, #25
 8004734:	bf48      	it	mi
 8004736:	b2ad      	uxthmi	r5, r5
 8004738:	e7e6      	b.n	8004708 <_printf_i+0x184>
 800473a:	4616      	mov	r6, r2
 800473c:	e7bb      	b.n	80046b6 <_printf_i+0x132>
 800473e:	680b      	ldr	r3, [r1, #0]
 8004740:	6826      	ldr	r6, [r4, #0]
 8004742:	1d1d      	adds	r5, r3, #4
 8004744:	6960      	ldr	r0, [r4, #20]
 8004746:	600d      	str	r5, [r1, #0]
 8004748:	0635      	lsls	r5, r6, #24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	d501      	bpl.n	8004752 <_printf_i+0x1ce>
 800474e:	6018      	str	r0, [r3, #0]
 8004750:	e002      	b.n	8004758 <_printf_i+0x1d4>
 8004752:	0671      	lsls	r1, r6, #25
 8004754:	d5fb      	bpl.n	800474e <_printf_i+0x1ca>
 8004756:	8018      	strh	r0, [r3, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	4616      	mov	r6, r2
 800475c:	6123      	str	r3, [r4, #16]
 800475e:	e7ba      	b.n	80046d6 <_printf_i+0x152>
 8004760:	680b      	ldr	r3, [r1, #0]
 8004762:	1d1a      	adds	r2, r3, #4
 8004764:	600a      	str	r2, [r1, #0]
 8004766:	681e      	ldr	r6, [r3, #0]
 8004768:	2100      	movs	r1, #0
 800476a:	4630      	mov	r0, r6
 800476c:	6862      	ldr	r2, [r4, #4]
 800476e:	f000 f82f 	bl	80047d0 <memchr>
 8004772:	b108      	cbz	r0, 8004778 <_printf_i+0x1f4>
 8004774:	1b80      	subs	r0, r0, r6
 8004776:	6060      	str	r0, [r4, #4]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	2300      	movs	r3, #0
 800477e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004782:	e7a8      	b.n	80046d6 <_printf_i+0x152>
 8004784:	4632      	mov	r2, r6
 8004786:	4649      	mov	r1, r9
 8004788:	4640      	mov	r0, r8
 800478a:	6923      	ldr	r3, [r4, #16]
 800478c:	47d0      	blx	sl
 800478e:	3001      	adds	r0, #1
 8004790:	d0ab      	beq.n	80046ea <_printf_i+0x166>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	079b      	lsls	r3, r3, #30
 8004796:	d413      	bmi.n	80047c0 <_printf_i+0x23c>
 8004798:	68e0      	ldr	r0, [r4, #12]
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	4298      	cmp	r0, r3
 800479e:	bfb8      	it	lt
 80047a0:	4618      	movlt	r0, r3
 80047a2:	e7a4      	b.n	80046ee <_printf_i+0x16a>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4632      	mov	r2, r6
 80047a8:	4649      	mov	r1, r9
 80047aa:	4640      	mov	r0, r8
 80047ac:	47d0      	blx	sl
 80047ae:	3001      	adds	r0, #1
 80047b0:	d09b      	beq.n	80046ea <_printf_i+0x166>
 80047b2:	3501      	adds	r5, #1
 80047b4:	68e3      	ldr	r3, [r4, #12]
 80047b6:	9903      	ldr	r1, [sp, #12]
 80047b8:	1a5b      	subs	r3, r3, r1
 80047ba:	42ab      	cmp	r3, r5
 80047bc:	dcf2      	bgt.n	80047a4 <_printf_i+0x220>
 80047be:	e7eb      	b.n	8004798 <_printf_i+0x214>
 80047c0:	2500      	movs	r5, #0
 80047c2:	f104 0619 	add.w	r6, r4, #25
 80047c6:	e7f5      	b.n	80047b4 <_printf_i+0x230>
 80047c8:	08004aa9 	.word	0x08004aa9
 80047cc:	08004aba 	.word	0x08004aba

080047d0 <memchr>:
 80047d0:	4603      	mov	r3, r0
 80047d2:	b510      	push	{r4, lr}
 80047d4:	b2c9      	uxtb	r1, r1
 80047d6:	4402      	add	r2, r0
 80047d8:	4293      	cmp	r3, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	d101      	bne.n	80047e2 <memchr+0x12>
 80047de:	2000      	movs	r0, #0
 80047e0:	e003      	b.n	80047ea <memchr+0x1a>
 80047e2:	7804      	ldrb	r4, [r0, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	428c      	cmp	r4, r1
 80047e8:	d1f6      	bne.n	80047d8 <memchr+0x8>
 80047ea:	bd10      	pop	{r4, pc}

080047ec <memcpy>:
 80047ec:	440a      	add	r2, r1
 80047ee:	4291      	cmp	r1, r2
 80047f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047f4:	d100      	bne.n	80047f8 <memcpy+0xc>
 80047f6:	4770      	bx	lr
 80047f8:	b510      	push	{r4, lr}
 80047fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047fe:	4291      	cmp	r1, r2
 8004800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004804:	d1f9      	bne.n	80047fa <memcpy+0xe>
 8004806:	bd10      	pop	{r4, pc}

08004808 <memmove>:
 8004808:	4288      	cmp	r0, r1
 800480a:	b510      	push	{r4, lr}
 800480c:	eb01 0402 	add.w	r4, r1, r2
 8004810:	d902      	bls.n	8004818 <memmove+0x10>
 8004812:	4284      	cmp	r4, r0
 8004814:	4623      	mov	r3, r4
 8004816:	d807      	bhi.n	8004828 <memmove+0x20>
 8004818:	1e43      	subs	r3, r0, #1
 800481a:	42a1      	cmp	r1, r4
 800481c:	d008      	beq.n	8004830 <memmove+0x28>
 800481e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004826:	e7f8      	b.n	800481a <memmove+0x12>
 8004828:	4601      	mov	r1, r0
 800482a:	4402      	add	r2, r0
 800482c:	428a      	cmp	r2, r1
 800482e:	d100      	bne.n	8004832 <memmove+0x2a>
 8004830:	bd10      	pop	{r4, pc}
 8004832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800483a:	e7f7      	b.n	800482c <memmove+0x24>

0800483c <_free_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4605      	mov	r5, r0
 8004840:	2900      	cmp	r1, #0
 8004842:	d043      	beq.n	80048cc <_free_r+0x90>
 8004844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004848:	1f0c      	subs	r4, r1, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfb8      	it	lt
 800484e:	18e4      	addlt	r4, r4, r3
 8004850:	f000 f8d0 	bl	80049f4 <__malloc_lock>
 8004854:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <_free_r+0x94>)
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	4610      	mov	r0, r2
 800485a:	b933      	cbnz	r3, 800486a <_free_r+0x2e>
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	6014      	str	r4, [r2, #0]
 8004860:	4628      	mov	r0, r5
 8004862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004866:	f000 b8cb 	b.w	8004a00 <__malloc_unlock>
 800486a:	42a3      	cmp	r3, r4
 800486c:	d90a      	bls.n	8004884 <_free_r+0x48>
 800486e:	6821      	ldr	r1, [r4, #0]
 8004870:	1862      	adds	r2, r4, r1
 8004872:	4293      	cmp	r3, r2
 8004874:	bf01      	itttt	eq
 8004876:	681a      	ldreq	r2, [r3, #0]
 8004878:	685b      	ldreq	r3, [r3, #4]
 800487a:	1852      	addeq	r2, r2, r1
 800487c:	6022      	streq	r2, [r4, #0]
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	6004      	str	r4, [r0, #0]
 8004882:	e7ed      	b.n	8004860 <_free_r+0x24>
 8004884:	461a      	mov	r2, r3
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	b10b      	cbz	r3, 800488e <_free_r+0x52>
 800488a:	42a3      	cmp	r3, r4
 800488c:	d9fa      	bls.n	8004884 <_free_r+0x48>
 800488e:	6811      	ldr	r1, [r2, #0]
 8004890:	1850      	adds	r0, r2, r1
 8004892:	42a0      	cmp	r0, r4
 8004894:	d10b      	bne.n	80048ae <_free_r+0x72>
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	4401      	add	r1, r0
 800489a:	1850      	adds	r0, r2, r1
 800489c:	4283      	cmp	r3, r0
 800489e:	6011      	str	r1, [r2, #0]
 80048a0:	d1de      	bne.n	8004860 <_free_r+0x24>
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4401      	add	r1, r0
 80048a8:	6011      	str	r1, [r2, #0]
 80048aa:	6053      	str	r3, [r2, #4]
 80048ac:	e7d8      	b.n	8004860 <_free_r+0x24>
 80048ae:	d902      	bls.n	80048b6 <_free_r+0x7a>
 80048b0:	230c      	movs	r3, #12
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	e7d4      	b.n	8004860 <_free_r+0x24>
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	1821      	adds	r1, r4, r0
 80048ba:	428b      	cmp	r3, r1
 80048bc:	bf01      	itttt	eq
 80048be:	6819      	ldreq	r1, [r3, #0]
 80048c0:	685b      	ldreq	r3, [r3, #4]
 80048c2:	1809      	addeq	r1, r1, r0
 80048c4:	6021      	streq	r1, [r4, #0]
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	6054      	str	r4, [r2, #4]
 80048ca:	e7c9      	b.n	8004860 <_free_r+0x24>
 80048cc:	bd38      	pop	{r3, r4, r5, pc}
 80048ce:	bf00      	nop
 80048d0:	200000d4 	.word	0x200000d4

080048d4 <_malloc_r>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	1ccd      	adds	r5, r1, #3
 80048d8:	f025 0503 	bic.w	r5, r5, #3
 80048dc:	3508      	adds	r5, #8
 80048de:	2d0c      	cmp	r5, #12
 80048e0:	bf38      	it	cc
 80048e2:	250c      	movcc	r5, #12
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	4606      	mov	r6, r0
 80048e8:	db01      	blt.n	80048ee <_malloc_r+0x1a>
 80048ea:	42a9      	cmp	r1, r5
 80048ec:	d903      	bls.n	80048f6 <_malloc_r+0x22>
 80048ee:	230c      	movs	r3, #12
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	2000      	movs	r0, #0
 80048f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f6:	f000 f87d 	bl	80049f4 <__malloc_lock>
 80048fa:	4921      	ldr	r1, [pc, #132]	; (8004980 <_malloc_r+0xac>)
 80048fc:	680a      	ldr	r2, [r1, #0]
 80048fe:	4614      	mov	r4, r2
 8004900:	b99c      	cbnz	r4, 800492a <_malloc_r+0x56>
 8004902:	4f20      	ldr	r7, [pc, #128]	; (8004984 <_malloc_r+0xb0>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	b923      	cbnz	r3, 8004912 <_malloc_r+0x3e>
 8004908:	4621      	mov	r1, r4
 800490a:	4630      	mov	r0, r6
 800490c:	f000 f862 	bl	80049d4 <_sbrk_r>
 8004910:	6038      	str	r0, [r7, #0]
 8004912:	4629      	mov	r1, r5
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f85d 	bl	80049d4 <_sbrk_r>
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	d123      	bne.n	8004966 <_malloc_r+0x92>
 800491e:	230c      	movs	r3, #12
 8004920:	4630      	mov	r0, r6
 8004922:	6033      	str	r3, [r6, #0]
 8004924:	f000 f86c 	bl	8004a00 <__malloc_unlock>
 8004928:	e7e3      	b.n	80048f2 <_malloc_r+0x1e>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	1b5b      	subs	r3, r3, r5
 800492e:	d417      	bmi.n	8004960 <_malloc_r+0x8c>
 8004930:	2b0b      	cmp	r3, #11
 8004932:	d903      	bls.n	800493c <_malloc_r+0x68>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	441c      	add	r4, r3
 8004938:	6025      	str	r5, [r4, #0]
 800493a:	e004      	b.n	8004946 <_malloc_r+0x72>
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	42a2      	cmp	r2, r4
 8004940:	bf0c      	ite	eq
 8004942:	600b      	streq	r3, [r1, #0]
 8004944:	6053      	strne	r3, [r2, #4]
 8004946:	4630      	mov	r0, r6
 8004948:	f000 f85a 	bl	8004a00 <__malloc_unlock>
 800494c:	f104 000b 	add.w	r0, r4, #11
 8004950:	1d23      	adds	r3, r4, #4
 8004952:	f020 0007 	bic.w	r0, r0, #7
 8004956:	1ac2      	subs	r2, r0, r3
 8004958:	d0cc      	beq.n	80048f4 <_malloc_r+0x20>
 800495a:	1a1b      	subs	r3, r3, r0
 800495c:	50a3      	str	r3, [r4, r2]
 800495e:	e7c9      	b.n	80048f4 <_malloc_r+0x20>
 8004960:	4622      	mov	r2, r4
 8004962:	6864      	ldr	r4, [r4, #4]
 8004964:	e7cc      	b.n	8004900 <_malloc_r+0x2c>
 8004966:	1cc4      	adds	r4, r0, #3
 8004968:	f024 0403 	bic.w	r4, r4, #3
 800496c:	42a0      	cmp	r0, r4
 800496e:	d0e3      	beq.n	8004938 <_malloc_r+0x64>
 8004970:	1a21      	subs	r1, r4, r0
 8004972:	4630      	mov	r0, r6
 8004974:	f000 f82e 	bl	80049d4 <_sbrk_r>
 8004978:	3001      	adds	r0, #1
 800497a:	d1dd      	bne.n	8004938 <_malloc_r+0x64>
 800497c:	e7cf      	b.n	800491e <_malloc_r+0x4a>
 800497e:	bf00      	nop
 8004980:	200000d4 	.word	0x200000d4
 8004984:	200000d8 	.word	0x200000d8

08004988 <_realloc_r>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	4607      	mov	r7, r0
 800498c:	4614      	mov	r4, r2
 800498e:	460e      	mov	r6, r1
 8004990:	b921      	cbnz	r1, 800499c <_realloc_r+0x14>
 8004992:	4611      	mov	r1, r2
 8004994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004998:	f7ff bf9c 	b.w	80048d4 <_malloc_r>
 800499c:	b922      	cbnz	r2, 80049a8 <_realloc_r+0x20>
 800499e:	f7ff ff4d 	bl	800483c <_free_r>
 80049a2:	4625      	mov	r5, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a8:	f000 f830 	bl	8004a0c <_malloc_usable_size_r>
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	d20f      	bcs.n	80049d0 <_realloc_r+0x48>
 80049b0:	4621      	mov	r1, r4
 80049b2:	4638      	mov	r0, r7
 80049b4:	f7ff ff8e 	bl	80048d4 <_malloc_r>
 80049b8:	4605      	mov	r5, r0
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d0f2      	beq.n	80049a4 <_realloc_r+0x1c>
 80049be:	4631      	mov	r1, r6
 80049c0:	4622      	mov	r2, r4
 80049c2:	f7ff ff13 	bl	80047ec <memcpy>
 80049c6:	4631      	mov	r1, r6
 80049c8:	4638      	mov	r0, r7
 80049ca:	f7ff ff37 	bl	800483c <_free_r>
 80049ce:	e7e9      	b.n	80049a4 <_realloc_r+0x1c>
 80049d0:	4635      	mov	r5, r6
 80049d2:	e7e7      	b.n	80049a4 <_realloc_r+0x1c>

080049d4 <_sbrk_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	2300      	movs	r3, #0
 80049d8:	4d05      	ldr	r5, [pc, #20]	; (80049f0 <_sbrk_r+0x1c>)
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	f7fc fd66 	bl	80014b0 <_sbrk>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_sbrk_r+0x1a>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_sbrk_r+0x1a>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	200001f8 	.word	0x200001f8

080049f4 <__malloc_lock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__malloc_lock+0x8>)
 80049f6:	f000 b811 	b.w	8004a1c <__retarget_lock_acquire_recursive>
 80049fa:	bf00      	nop
 80049fc:	20000200 	.word	0x20000200

08004a00 <__malloc_unlock>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__malloc_unlock+0x8>)
 8004a02:	f000 b80c 	b.w	8004a1e <__retarget_lock_release_recursive>
 8004a06:	bf00      	nop
 8004a08:	20000200 	.word	0x20000200

08004a0c <_malloc_usable_size_r>:
 8004a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a10:	1f18      	subs	r0, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfbc      	itt	lt
 8004a16:	580b      	ldrlt	r3, [r1, r0]
 8004a18:	18c0      	addlt	r0, r0, r3
 8004a1a:	4770      	bx	lr

08004a1c <__retarget_lock_acquire_recursive>:
 8004a1c:	4770      	bx	lr

08004a1e <__retarget_lock_release_recursive>:
 8004a1e:	4770      	bx	lr

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr
